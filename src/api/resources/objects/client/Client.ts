/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as lattice from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import * as fs from "fs";
import { Blob } from "buffer";

export declare namespace Objects {
    export interface Options {
        environment?: core.Supplier<environments.latticeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * API to manipulate and interrogate object data on the local node, as well as list objects from the Lattice mesh.
 */
export class Objects {
    protected readonly _options: Objects.Options;

    constructor(_options: Objects.Options = {}) {
        this._options = _options;
    }

    /**
     * Lists objects in your environment. You can define a prefix to list a subset of your objects. If you do not set a prefix, Lattice returns all available objects. By default this endpoint will list local objects only.
     *
     * @param {lattice.ListObjectsRequest} request
     * @param {Objects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link lattice.BadRequestError}
     * @throws {@link lattice.UnauthorizedError}
     * @throws {@link lattice.InternalServerError}
     *
     * @example
     *     await client.objects.listObjects()
     */
    public async listObjects(
        request: lattice.ListObjectsRequest = {},
        requestOptions?: Objects.RequestOptions,
    ): Promise<core.Page<lattice.PathMetadata>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (request: lattice.ListObjectsRequest): Promise<core.WithRawResponse<lattice.ListResponse>> => {
                const { prefix, sinceTimestamp, pageToken, allObjectsInMesh } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (prefix != null) {
                    _queryParams["prefix"] = prefix;
                }
                if (sinceTimestamp != null) {
                    _queryParams["sinceTimestamp"] = sinceTimestamp;
                }
                if (pageToken != null) {
                    _queryParams["pageToken"] = pageToken;
                }
                if (allObjectsInMesh != null) {
                    _queryParams["allObjectsInMesh"] = allObjectsInMesh;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.latticeEnvironment.Default,
                        "api/v1/objects",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return { data: _response.body as lattice.ListResponse, rawResponse: _response.rawResponse };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 400:
                            throw new lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                        case 401:
                            throw new lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                        case 500:
                            throw new lattice.InternalServerError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.latticeError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.latticeError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.latticeTimeoutError("Timeout exceeded when calling GET /api/v1/objects.");
                    case "unknown":
                        throw new errors.latticeError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<lattice.ListResponse, lattice.PathMetadata>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.next_page_token != null &&
                !(typeof response?.next_page_token === "string" && response?.next_page_token === ""),
            getItems: (response) => response?.path_metadatas ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "pageToken", response?.next_page_token));
            },
        });
    }

    /**
     * Fetches an object from your environment using the objectPath path parameter.
     * @throws {@link lattice.BadRequestError}
     * @throws {@link lattice.UnauthorizedError}
     * @throws {@link lattice.NotFoundError}
     * @throws {@link lattice.InternalServerError}
     */
    public getObject(
        objectPath: string,
        request: lattice.GetObjectRequest = {},
        requestOptions?: Objects.RequestOptions,
    ): core.HttpResponsePromise<core.BinaryResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getObject(objectPath, request, requestOptions));
    }

    private async __getObject(
        objectPath: string,
        request: lattice.GetObjectRequest = {},
        requestOptions?: Objects.RequestOptions,
    ): Promise<core.WithRawResponse<core.BinaryResponse>> {
        const { "Accept-Encoding": acceptEncoding } = request;
        const _response = await core.fetcher<core.BinaryResponse>({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.latticeEnvironment.Default,
                `api/v1/objects/${encodeURIComponent(objectPath)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Accept-Encoding": acceptEncoding != null ? acceptEncoding : undefined,
                }),
                requestOptions?.headers,
            ),
            responseType: "binary-response",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new lattice.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new lattice.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.latticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.latticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.latticeTimeoutError("Timeout exceeded when calling GET /api/v1/objects/{objectPath}.");
            case "unknown":
                throw new errors.latticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Uploads an object using multiform data. The object must be 1 GiB or smaller.
     *
     * @param {File | fs.ReadStream | Blob} bytes
     * @param {string} objectPath
     * @param {Objects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link lattice.BadRequestError}
     * @throws {@link lattice.UnauthorizedError}
     * @throws {@link lattice.ContentTooLargeError}
     * @throws {@link lattice.InternalServerError}
     * @throws {@link lattice.InsufficientStorageError}
     */
    public uploadObject(
        bytes: File | fs.ReadStream | Blob,
        objectPath: string,
        requestOptions?: Objects.RequestOptions,
    ): core.HttpResponsePromise<lattice.PathMetadata> {
        return core.HttpResponsePromise.fromPromise(this.__uploadObject(bytes, objectPath, requestOptions));
    }

    private async __uploadObject(
        bytes: File | fs.ReadStream | Blob,
        objectPath: string,
        requestOptions?: Objects.RequestOptions,
    ): Promise<core.WithRawResponse<lattice.PathMetadata>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.latticeEnvironment.Default,
                `api/v1/objects/${encodeURIComponent(objectPath)}`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/octet-stream",
            requestType: "bytes",
            duplex: "half",
            body: bytes,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as lattice.PathMetadata, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 413:
                    throw new lattice.ContentTooLargeError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new lattice.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 507:
                    throw new lattice.InsufficientStorageError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.latticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.latticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.latticeTimeoutError(
                    "Timeout exceeded when calling POST /api/v1/objects/{objectPath}.",
                );
            case "unknown":
                throw new errors.latticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes an object from your environment given the objectPath path parameter.
     *
     * @param {string} objectPath - The path of the object to delete.
     * @param {Objects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link lattice.BadRequestError}
     * @throws {@link lattice.UnauthorizedError}
     * @throws {@link lattice.NotFoundError}
     * @throws {@link lattice.InternalServerError}
     *
     * @example
     *     await client.objects.deleteObject("objectPath")
     */
    public deleteObject(objectPath: string, requestOptions?: Objects.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteObject(objectPath, requestOptions));
    }

    private async __deleteObject(
        objectPath: string,
        requestOptions?: Objects.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.latticeEnvironment.Default,
                `api/v1/objects/${encodeURIComponent(objectPath)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new lattice.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new lattice.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.latticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.latticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.latticeTimeoutError(
                    "Timeout exceeded when calling DELETE /api/v1/objects/{objectPath}.",
                );
            case "unknown":
                throw new errors.latticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns metadata for a specified object path. Use this to fetch metadata such as object size (size_bytes), its expiry time (expiry_time), or its latest update timestamp (last_updated_at).
     *
     * @param {string} objectPath - The path of the object to query.
     * @param {Objects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link lattice.BadRequestError}
     * @throws {@link lattice.UnauthorizedError}
     * @throws {@link lattice.InternalServerError}
     *
     * @example
     *     await client.objects.getObjectMetadata("objectPath")
     */
    public getObjectMetadata(
        objectPath: string,
        requestOptions?: Objects.RequestOptions,
    ): core.HttpResponsePromise<Headers> {
        return core.HttpResponsePromise.fromPromise(this.__getObjectMetadata(objectPath, requestOptions));
    }

    private async __getObjectMetadata(
        objectPath: string,
        requestOptions?: Objects.RequestOptions,
    ): Promise<core.WithRawResponse<Headers>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.latticeEnvironment.Default,
                `api/v1/objects/${encodeURIComponent(objectPath)}`,
            ),
            method: "HEAD",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.rawResponse.headers, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new lattice.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.latticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.latticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.latticeTimeoutError(
                    "Timeout exceeded when calling HEAD /api/v1/objects/{objectPath}.",
                );
            case "unknown":
                throw new errors.latticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
