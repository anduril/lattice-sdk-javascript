/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as lattice from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Tasking {
    export interface Options {
        environment?: core.Supplier<environments.latticeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * The Tasks API
 */
export class Tasking {
    protected readonly _options: Tasking.Options;

    constructor(_options: Tasking.Options = {}) {
        this._options = _options;
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     *
     * @param {lattice.TaskCreation} request
     * @param {Tasking.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link lattice.BadRequestError}
     * @throws {@link lattice.UnauthorizedError}
     *
     * @example
     *     await client.tasking.createTask()
     */
    public createTask(
        request: lattice.TaskCreation = {},
        requestOptions?: Tasking.RequestOptions,
    ): core.HttpResponsePromise<lattice.Task> {
        return core.HttpResponsePromise.fromPromise(this.__createTask(request, requestOptions));
    }

    private async __createTask(
        request: lattice.TaskCreation = {},
        requestOptions?: Tasking.RequestOptions,
    ): Promise<core.WithRawResponse<lattice.Task>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.latticeEnvironment.Default,
                "api/v1/tasks",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as lattice.Task, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.latticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.latticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.latticeTimeoutError("Timeout exceeded when calling POST /api/v1/tasks.");
            case "unknown":
                throw new errors.latticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} taskId - ID of task to return
     * @param {Tasking.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link lattice.BadRequestError}
     * @throws {@link lattice.UnauthorizedError}
     * @throws {@link lattice.NotFoundError}
     *
     * @example
     *     await client.tasking.getTask("taskId")
     */
    public getTask(taskId: string, requestOptions?: Tasking.RequestOptions): core.HttpResponsePromise<lattice.Task> {
        return core.HttpResponsePromise.fromPromise(this.__getTask(taskId, requestOptions));
    }

    private async __getTask(
        taskId: string,
        requestOptions?: Tasking.RequestOptions,
    ): Promise<core.WithRawResponse<lattice.Task>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.latticeEnvironment.Default,
                `api/v1/tasks/${encodeURIComponent(taskId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as lattice.Task, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new lattice.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.latticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.latticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.latticeTimeoutError("Timeout exceeded when calling GET /api/v1/tasks/{taskId}.");
            case "unknown":
                throw new errors.latticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update the status of a task.
     *
     * @param {string} taskId - ID of task to update status of
     * @param {lattice.TaskStatusUpdate} request
     * @param {Tasking.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link lattice.BadRequestError}
     * @throws {@link lattice.UnauthorizedError}
     * @throws {@link lattice.NotFoundError}
     *
     * @example
     *     await client.tasking.updateTaskStatus("taskId")
     */
    public updateTaskStatus(
        taskId: string,
        request: lattice.TaskStatusUpdate = {},
        requestOptions?: Tasking.RequestOptions,
    ): core.HttpResponsePromise<lattice.Task> {
        return core.HttpResponsePromise.fromPromise(this.__updateTaskStatus(taskId, request, requestOptions));
    }

    private async __updateTaskStatus(
        taskId: string,
        request: lattice.TaskStatusUpdate = {},
        requestOptions?: Tasking.RequestOptions,
    ): Promise<core.WithRawResponse<lattice.Task>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.latticeEnvironment.Default,
                `api/v1/tasks/${encodeURIComponent(taskId)}/status`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as lattice.Task, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new lattice.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.latticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.latticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.latticeTimeoutError(
                    "Timeout exceeded when calling PUT /api/v1/tasks/{taskId}/status.",
                );
            case "unknown":
                throw new errors.latticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Query for tasks by a specified search criteria.
     *
     * @param {lattice.TaskQuery} request
     * @param {Tasking.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link lattice.BadRequestError}
     * @throws {@link lattice.UnauthorizedError}
     * @throws {@link lattice.NotFoundError}
     *
     * @example
     *     await client.tasking.queryTasks()
     */
    public queryTasks(
        request: lattice.TaskQuery = {},
        requestOptions?: Tasking.RequestOptions,
    ): core.HttpResponsePromise<lattice.TaskQueryResults> {
        return core.HttpResponsePromise.fromPromise(this.__queryTasks(request, requestOptions));
    }

    private async __queryTasks(
        request: lattice.TaskQuery = {},
        requestOptions?: Tasking.RequestOptions,
    ): Promise<core.WithRawResponse<lattice.TaskQueryResults>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.latticeEnvironment.Default,
                "api/v1/tasks/query",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as lattice.TaskQueryResults, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new lattice.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.latticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.latticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.latticeTimeoutError("Timeout exceeded when calling POST /api/v1/tasks/query.");
            case "unknown":
                throw new errors.latticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     *
     * @param {lattice.AgentListener} request
     * @param {Tasking.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link lattice.BadRequestError}
     * @throws {@link lattice.UnauthorizedError}
     *
     * @example
     *     await client.tasking.listenAsAgent()
     */
    public listenAsAgent(
        request: lattice.AgentListener = {},
        requestOptions?: Tasking.RequestOptions,
    ): core.HttpResponsePromise<lattice.AgentRequest> {
        return core.HttpResponsePromise.fromPromise(this.__listenAsAgent(request, requestOptions));
    }

    private async __listenAsAgent(
        request: lattice.AgentListener = {},
        requestOptions?: Tasking.RequestOptions,
    ): Promise<core.WithRawResponse<lattice.AgentRequest>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.latticeEnvironment.Default,
                "api/v1/agent/listen",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as lattice.AgentRequest, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.latticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.latticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.latticeTimeoutError("Timeout exceeded when calling POST /api/v1/agent/listen.");
            case "unknown":
                throw new errors.latticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
