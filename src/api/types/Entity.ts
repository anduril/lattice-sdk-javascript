/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as lattice from "../index.js";

/**
 * The entity object represents a single known object within the Lattice operational environment. It contains
 *  all data associated with the entity, such as its name, ID, and other relevant components.
 */
export interface Entity {
    /**
     * A Globally Unique Identifier (GUID) for your entity. If this field is empty, the Entity Manager API
     *  automatically generates an ID when it creates the entity.
     */
    entityId?: string;
    /**
     * A human-readable entity description that's helpful for debugging purposes and human
     *  traceability. If this field is empty, the Entity Manager API generates one for you.
     */
    description?: string;
    /**
     * Indicates the entity is active and should have a lifecycle state of CREATE or UPDATE.
     *  Set this field to true when publishing an entity.
     */
    isLive?: boolean;
    /**
     * The time when the entity was first known to the entity producer. If this field is empty, the Entity Manager API uses the
     *  current timestamp of when the entity is first received.
     *  For example, when a drone is first powered on, it might report its startup time as the created time.
     *  The timestamp doesn't change for the lifetime of an entity.
     */
    createdTime?: string;
    /**
     * Future time that expires an entity and updates the is_live flag.
     *  For entities that are constantly updating, the expiry time also updates.
     *  In some cases, this may differ from is_live.
     *  Example: Entities with tasks exported to an external system must remain
     *  active even after they expire.
     *  This field is required when publishing a prepopulated entity.
     *  The expiry time must be in the future, but less than 30 days from the current time.
     */
    expiryTime?: string;
    /** Human-readable descriptions of what the entity is currently doing. */
    status?: lattice.Status;
    /** Geospatial data related to the entity, including its position, kinematics, and orientation. */
    location?: lattice.Location;
    /** Indicates uncertainty of the entity's position and kinematics. */
    locationUncertainty?: lattice.LocationUncertainty;
    /** Geospatial representation of the entity, including entities that cover an area rather than a fixed point. */
    geoShape?: lattice.GeoShape;
    /** Additional details on what the geospatial area or point represents, along with visual display details. */
    geoDetails?: lattice.GeoDetails;
    /** Entity name displayed in the Lattice UI side panel. Also includes identifiers that other systems can use to reference the same entity. */
    aliases?: lattice.Aliases;
    /** If this entity is tracked by another entity, this component contains data related to how it's being tracked. */
    tracked?: lattice.Tracked;
    /** If this entity has been correlated or decorrelated to another one, this component contains information on the correlation or decorrelation. */
    correlation?: lattice.Correlation;
    /** View of the entity. */
    milView?: lattice.MilView;
    /** Ontology defines an entity's categorization in Lattice, and improves data retrieval and integration. Builds a standardized representation of the entity. */
    ontology?: lattice.Ontology;
    /** Details an entity's available sensors. */
    sensors?: lattice.Sensors;
    /** Details an entity's available payloads. */
    payloads?: lattice.Payloads;
    /** Details the entity's power source. */
    powerState?: lattice.PowerState;
    /** The primary data source provenance for this entity. */
    provenance?: lattice.Provenance;
    /** Provenance of override data. */
    overrides?: lattice.Overrides;
    /**
     * Describes an entity's specific characteristics and the operations that can be performed on the entity.
     *  For example, "simulated" informs the operator that the entity is from a simulation, and "deletable"
     *  informs the operator (and system) that the delete operation is valid against the entity.
     */
    indicators?: lattice.Indicators;
    /** The prioritization associated with an entity, such as if it's a threat or a high-value target. */
    targetPriority?: lattice.TargetPriority;
    /** Describes an entity's signal characteristics, primarily used when an entity is a signal of interest. */
    signal?: lattice.Signal;
    /** A message describing any transponder codes associated with Mode 1, 2, 3, 4, 5, S interrogations. These are related to ADS-B modes. */
    transponderCodes?: lattice.TransponderCodes;
    /**
     * Describes an entity's security classification levels at an overall classification level and on a per
     *  field level.
     */
    dataClassification?: lattice.Classification;
    /** A catalog of tasks that can be performed by an entity. */
    taskCatalog?: lattice.TaskCatalog;
    /** Media associated with an entity, such as videos, images, or thumbnails. */
    media?: lattice.Media;
    /** The relationships between this entity and other entities in the common operational picture (COP). */
    relationships?: lattice.Relationships;
    /** Visual details associated with the display of an entity in the client. */
    visualDetails?: lattice.VisualDetails;
    /** Physical dimensions of the entity. */
    dimensions?: lattice.Dimensions;
    /** Additional information about an entity's route. */
    routeDetails?: lattice.RouteDetails;
    /** Schedules associated with this entity. */
    schedules?: lattice.Schedules;
    /** Health metrics or connection status reported by the entity. */
    health?: lattice.Health;
    /** Details for the group associated with this entity. */
    groupDetails?: lattice.GroupDetails;
    /** Contains relevant supply information for the entity, such as fuel. */
    supplies?: lattice.Supplies;
    /** Orbit information for space objects. */
    orbit?: lattice.Orbit;
}
