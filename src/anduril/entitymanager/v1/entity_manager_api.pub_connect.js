// @generated by protoc-gen-connect-es v1.4.0 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/entitymanager/v1/entity_manager_api.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const { DeleteEntityRequest, DeleteEntityResponse, GetEntityRequest, GetEntityResponse, OverrideEntityRequest, OverrideEntityResponse, PublishEntitiesRequest, PublishEntitiesResponse, PutEntityRequest, PutEntityResponse, RelateEntityRequest, RelateEntityResponse, RemoveEntityOverrideRequest, RemoveEntityOverrideResponse, StreamEntityComponentsRequest, StreamEntityComponentsResponse, UnrelateEntityRequest, UnrelateEntityResponse } = require("./entity_manager_api.pub_pb.js");
const { MethodKind } = require("@bufbuild/protobuf");

/**
 * The EntityManager provides a UI centric data model for understanding the entities in a battle space.
 *
 * Every object in a battle space is represented as an "Entity". Each Entity is essentially an ID, with a life cycle,
 * and a collection of data components. Each data component is a separate protobuf message definition.
 *
 * EntityManager provides a way to query the currently live set of entities within a set of filter constraints,
 * as well as a limited set of management APIs to change the grouping or relationships between entities.
 *
 * @generated from service anduril.entitymanager.v1.EntityManagerAPI
 */
const EntityManagerAPI = {
  typeName: "anduril.entitymanager.v1.EntityManagerAPI",
  methods: {
    /**
     * Get a entity based on an entityId.
     *
     * @generated from rpc anduril.entitymanager.v1.EntityManagerAPI.GetEntity
     */
    getEntity: {
      name: "GetEntity",
      I: GetEntityRequest,
      O: GetEntityResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a stream of entity with specified components populated.
     *
     * @generated from rpc anduril.entitymanager.v1.EntityManagerAPI.StreamEntityComponents
     */
    streamEntityComponents: {
      name: "StreamEntityComponents",
      I: StreamEntityComponentsRequest,
      O: StreamEntityComponentsResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Create or Update an Entity. This should be used by low update rate situations where Entity Manager is
     * the source of truth, rather than an aggregator. The canonical example is a manually created entity.
     * Entities created in this fashion are stored as a Base entity, overrides on top are still possible.
     *
     * @generated from rpc anduril.entitymanager.v1.EntityManagerAPI.PutEntity
     */
    putEntity: {
      name: "PutEntity",
      I: PutEntityRequest,
      O: PutEntityResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create or Update one or more Entities. This should be used during high update rate situations where the originator
     * is both the aggregator and source of truth for the published entities, and the originator does not have
     * the ability to directly publish to Flux.
     *
     * @generated from rpc anduril.entitymanager.v1.EntityManagerAPI.PublishEntities
     */
    publishEntities: {
      name: "PublishEntities",
      I: PublishEntitiesRequest,
      O: PublishEntitiesResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * Override an Entity Component. Only fields marked with overridable can be overwritten.
     *
     * @generated from rpc anduril.entitymanager.v1.EntityManagerAPI.OverrideEntity
     */
    overrideEntity: {
      name: "OverrideEntity",
      I: OverrideEntityRequest,
      O: OverrideEntityResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Remove an override for an Entity component.
     *
     * @generated from rpc anduril.entitymanager.v1.EntityManagerAPI.RemoveEntityOverride
     */
    removeEntityOverride: {
      name: "RemoveEntityOverride",
      I: RemoveEntityOverrideRequest,
      O: RemoveEntityOverrideResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an Entity - only works on entities created by PutEntity.
     *
     * @generated from rpc anduril.entitymanager.v1.EntityManagerAPI.DeleteEntity
     */
    deleteEntity: {
      name: "DeleteEntity",
      I: DeleteEntityRequest,
      O: DeleteEntityResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates or Updates relationships on an Entity. All relationships that are being added in the request
     * succeed or fail as a batch (i.e. if any one relationship is invalid, the request will fail).
     *
     * @generated from rpc anduril.entitymanager.v1.EntityManagerAPI.RelateEntity
     */
    relateEntity: {
      name: "RelateEntity",
      I: RelateEntityRequest,
      O: RelateEntityResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes relationships on an Entity.
     *
     * @generated from rpc anduril.entitymanager.v1.EntityManagerAPI.UnrelateEntity
     */
    unrelateEntity: {
      name: "UnrelateEntity",
      I: UnrelateEntityRequest,
      O: UnrelateEntityResponse,
      kind: MethodKind.Unary,
    },
  }
};


exports.EntityManagerAPI = EntityManagerAPI;
