// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/entitymanager/v1/health_status.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Enumeration of possible connection states.
 *
 * @generated from enum anduril.entitymanager.v1.ConnectionStatus
 */
export enum ConnectionStatus {
  /**
   * @generated from enum value: CONNECTION_STATUS_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: CONNECTION_STATUS_ONLINE = 1;
   */
  ONLINE = 1,

  /**
   * @generated from enum value: CONNECTION_STATUS_OFFLINE = 2;
   */
  OFFLINE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ConnectionStatus)
proto3.util.setEnumType(ConnectionStatus, "anduril.entitymanager.v1.ConnectionStatus", [
  { no: 0, name: "CONNECTION_STATUS_INVALID" },
  { no: 1, name: "CONNECTION_STATUS_ONLINE" },
  { no: 2, name: "CONNECTION_STATUS_OFFLINE" },
]);

/**
 * Enumeration of possible health states.
 *
 * @generated from enum anduril.entitymanager.v1.HealthStatus
 */
export enum HealthStatus {
  /**
   * @generated from enum value: HEALTH_STATUS_INVALID = 0;
   */
  INVALID = 0,

  /**
   * Indicates that the component is operating as intended.
   *
   * @generated from enum value: HEALTH_STATUS_HEALTHY = 1;
   */
  HEALTHY = 1,

  /**
   * Indicates that the component is at risk of transitioning into a HEALTH_STATUS_FAIL
   * state or that the component is operating in a degraded state.
   *
   * @generated from enum value: HEALTH_STATUS_WARN = 2;
   */
  WARN = 2,

  /**
   * Indicates that the component is not functioning as intended.
   *
   * @generated from enum value: HEALTH_STATUS_FAIL = 3;
   */
  FAIL = 3,

  /**
   * Indicates that the component is offline.
   *
   * @generated from enum value: HEALTH_STATUS_OFFLINE = 4;
   */
  OFFLINE = 4,

  /**
   * Indicates that the component is not yet functioning, but it is transitioning into a
   * HEALTH_STATUS_HEALTHY state. A component should only report this state temporarily.
   *
   * @generated from enum value: HEALTH_STATUS_NOT_READY = 5;
   */
  NOT_READY = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(HealthStatus)
proto3.util.setEnumType(HealthStatus, "anduril.entitymanager.v1.HealthStatus", [
  { no: 0, name: "HEALTH_STATUS_INVALID" },
  { no: 1, name: "HEALTH_STATUS_HEALTHY" },
  { no: 2, name: "HEALTH_STATUS_WARN" },
  { no: 3, name: "HEALTH_STATUS_FAIL" },
  { no: 4, name: "HEALTH_STATUS_OFFLINE" },
  { no: 5, name: "HEALTH_STATUS_NOT_READY" },
]);

/**
 * A message describing the component's health status.
 *
 * @generated from message anduril.entitymanager.v1.ComponentMessage
 */
export class ComponentMessage extends Message<ComponentMessage> {
  /**
   * The status associated with this message.
   *
   * @generated from field: anduril.entitymanager.v1.HealthStatus status = 1;
   */
  status = HealthStatus.INVALID;

  /**
   * The human-readable content of the message.
   *
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<ComponentMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.ComponentMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(HealthStatus) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentMessage {
    return new ComponentMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentMessage {
    return new ComponentMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentMessage {
    return new ComponentMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentMessage | PlainMessage<ComponentMessage> | undefined, b: ComponentMessage | PlainMessage<ComponentMessage> | undefined): boolean {
    return proto3.util.equals(ComponentMessage, a, b);
  }
}

/**
 * Health of an individual component.
 *
 * @generated from message anduril.entitymanager.v1.ComponentHealth
 */
export class ComponentHealth extends Message<ComponentHealth> {
  /**
   * Consistent internal ID for this component.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Display name for this component.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Health for this component.
   *
   * @generated from field: anduril.entitymanager.v1.HealthStatus health = 3;
   */
  health = HealthStatus.INVALID;

  /**
   * Human-readable describing the component state. These messages should be understandable by end users.
   *
   * @generated from field: repeated anduril.entitymanager.v1.ComponentMessage messages = 4;
   */
  messages: ComponentMessage[] = [];

  /**
   * The last update time for this specific component.
   * If this timestamp is unset, the data is assumed to be most recent
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;

  constructor(data?: PartialMessage<ComponentHealth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.ComponentHealth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "health", kind: "enum", T: proto3.getEnumType(HealthStatus) },
    { no: 4, name: "messages", kind: "message", T: ComponentMessage, repeated: true },
    { no: 5, name: "update_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentHealth {
    return new ComponentHealth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentHealth {
    return new ComponentHealth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentHealth {
    return new ComponentHealth().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentHealth | PlainMessage<ComponentHealth> | undefined, b: ComponentHealth | PlainMessage<ComponentHealth> | undefined): boolean {
    return proto3.util.equals(ComponentHealth, a, b);
  }
}

/**
 * General health of the entity as reported by the entity.
 *
 * @generated from message anduril.entitymanager.v1.Health
 */
export class Health extends Message<Health> {
  /**
   * Status indicating whether the entity is able to communicate with Entity Manager.
   *
   * @generated from field: anduril.entitymanager.v1.ConnectionStatus connection_status = 1;
   */
  connectionStatus = ConnectionStatus.INVALID;

  /**
   * Top-level health status; typically a roll-up of individual component healths.
   *
   * @generated from field: anduril.entitymanager.v1.HealthStatus health_status = 2;
   */
  healthStatus = HealthStatus.INVALID;

  /**
   * Health of individual components running on this Entity.
   *
   * @generated from field: repeated anduril.entitymanager.v1.ComponentHealth components = 3;
   */
  components: ComponentHealth[] = [];

  /**
   * The update time for the top-level health information.
   * If this timestamp is unset, the data is assumed to be most recent
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  constructor(data?: PartialMessage<Health>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.Health";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_status", kind: "enum", T: proto3.getEnumType(ConnectionStatus) },
    { no: 2, name: "health_status", kind: "enum", T: proto3.getEnumType(HealthStatus) },
    { no: 3, name: "components", kind: "message", T: ComponentHealth, repeated: true },
    { no: 4, name: "update_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Health {
    return new Health().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Health {
    return new Health().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Health {
    return new Health().fromJsonString(jsonString, options);
  }

  static equals(a: Health | PlainMessage<Health> | undefined, b: Health | PlainMessage<Health> | undefined): boolean {
    return proto3.util.equals(Health, a, b);
  }
}

