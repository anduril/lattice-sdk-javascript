// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/entitymanager/v1/geoentity.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Position } from "./location.pub_pb.js";

/**
 * The type of geo entity.
 *
 * @generated from enum anduril.entitymanager.v1.GeoType
 */
export declare enum GeoType {
  /**
   * @generated from enum value: GEO_TYPE_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: GEO_TYPE_GENERAL = 1;
   */
  GENERAL = 1,

  /**
   * @generated from enum value: GEO_TYPE_HAZARD = 2;
   */
  HAZARD = 2,

  /**
   * @generated from enum value: GEO_TYPE_EMERGENCY = 3;
   */
  EMERGENCY = 3,

  /**
   * Fire support coordination measure
   *
   * @generated from enum value: GEO_TYPE_FSCM = 4;
   */
  FSCM = 4,

  /**
   * Engagement zones allow for engaging an entity if it comes within the zone of another entity.
   *
   * @generated from enum value: GEO_TYPE_ENGAGEMENT_ZONE = 5;
   */
  ENGAGEMENT_ZONE = 5,

  /**
   * @generated from enum value: GEO_TYPE_CONTROL_AREA = 6;
   */
  CONTROL_AREA = 6,

  /**
   * @generated from enum value: GEO_TYPE_BULLSEYE = 7;
   */
  BULLSEYE = 7,

  /**
   * Airspace Coordinating Measure
   *
   * @generated from enum value: GEO_TYPE_ACM = 8;
   */
  ACM = 8,

  /**
   * Maneuver Control Measure
   *
   * @generated from enum value: GEO_TYPE_MCM = 9;
   */
  MCM = 9,
}

/**
 * A component that describes a geo-entity.
 *
 * @generated from message anduril.entitymanager.v1.GeoDetails
 */
export declare class GeoDetails extends Message<GeoDetails> {
  /**
   * @generated from field: anduril.entitymanager.v1.GeoType type = 1;
   */
  type: GeoType;

  constructor(data?: PartialMessage<GeoDetails>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.GeoDetails";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeoDetails;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeoDetails;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeoDetails;

  static equals(a: GeoDetails | PlainMessage<GeoDetails> | undefined, b: GeoDetails | PlainMessage<GeoDetails> | undefined): boolean;
}

/**
 * A component that describes the shape of a geo-entity.
 *
 * @generated from message anduril.entitymanager.v1.GeoShape
 */
export declare class GeoShape extends Message<GeoShape> {
  /**
   * point, line_string, and polygon are convertible as a subset of GeoJSON
   *
   * @generated from oneof anduril.entitymanager.v1.GeoShape.shape
   */
  shape: {
    /**
     * @generated from field: anduril.entitymanager.v1.GeoPoint point = 1;
     */
    value: GeoPoint;
    case: "point";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.GeoLine line = 2;
     */
    value: GeoLine;
    case: "line";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.GeoPolygon polygon = 3;
     */
    value: GeoPolygon;
    case: "polygon";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.GeoEllipse ellipse = 4;
     */
    value: GeoEllipse;
    case: "ellipse";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.GeoEllipsoid ellipsoid = 5;
     */
    value: GeoEllipsoid;
    case: "ellipsoid";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<GeoShape>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.GeoShape";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeoShape;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeoShape;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeoShape;

  static equals(a: GeoShape | PlainMessage<GeoShape> | undefined, b: GeoShape | PlainMessage<GeoShape> | undefined): boolean;
}

/**
 * A point shaped geo-entity.
 * See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2
 *
 * @generated from message anduril.entitymanager.v1.GeoPoint
 */
export declare class GeoPoint extends Message<GeoPoint> {
  /**
   * @generated from field: anduril.entitymanager.v1.Position position = 1;
   */
  position?: Position;

  constructor(data?: PartialMessage<GeoPoint>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.GeoPoint";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeoPoint;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeoPoint;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeoPoint;

  static equals(a: GeoPoint | PlainMessage<GeoPoint> | undefined, b: GeoPoint | PlainMessage<GeoPoint> | undefined): boolean;
}

/**
 * A line shaped geo-entity.
 * See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.4
 *
 * @generated from message anduril.entitymanager.v1.GeoLine
 */
export declare class GeoLine extends Message<GeoLine> {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.Position positions = 1;
   */
  positions: Position[];

  constructor(data?: PartialMessage<GeoLine>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.GeoLine";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeoLine;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeoLine;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeoLine;

  static equals(a: GeoLine | PlainMessage<GeoLine> | undefined, b: GeoLine | PlainMessage<GeoLine> | undefined): boolean;
}

/**
 * A polygon shaped geo-entity.
 * See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6, only canonical representations accepted
 *
 * @generated from message anduril.entitymanager.v1.GeoPolygon
 */
export declare class GeoPolygon extends Message<GeoPolygon> {
  /**
   * An array of LinearRings where the first item is the exterior ring and subsequent items are interior rings.
   * For a good introduction read (https://macwright.com/2015/03/23/geojson-second-bite.html#polygons)
   *
   * @generated from field: repeated anduril.entitymanager.v1.LinearRing rings = 1;
   */
  rings: LinearRing[];

  /**
   * An extension hint that this polygon is a rectangle. When true this implies several things:
   * * exactly 1 linear ring with 5 points (starting corner, 3 other corners and start again)
   * * each point has the same altitude corresponding with the plane of the rectangle
   * * each point has the same height (either all present and equal, or all not present)
   *
   * @generated from field: bool is_rectangle = 2;
   */
  isRectangle: boolean;

  constructor(data?: PartialMessage<GeoPolygon>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.GeoPolygon";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeoPolygon;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeoPolygon;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeoPolygon;

  static equals(a: GeoPolygon | PlainMessage<GeoPolygon> | undefined, b: GeoPolygon | PlainMessage<GeoPolygon> | undefined): boolean;
}

/**
 * An ellipse shaped geo-entity.
 * For a circle, the major and minor axis would be the same values.
 * This shape is NOT Geo-JSON compatible.
 *
 * @generated from message anduril.entitymanager.v1.GeoEllipse
 */
export declare class GeoEllipse extends Message<GeoEllipse> {
  /**
   * Defines the distance from the center point of the ellipse to the furthest distance on the perimeter in meters.
   *
   * @generated from field: google.protobuf.DoubleValue semi_major_axis_m = 2;
   */
  semiMajorAxisM?: number;

  /**
   * Defines the distance from the center point of the ellipse to the shortest distance on the perimeter in meters.
   *
   * @generated from field: google.protobuf.DoubleValue semi_minor_axis_m = 3;
   */
  semiMinorAxisM?: number;

  /**
   * The orientation of the semi-major relative to true north in degrees from clockwise: 0-180 due to symmetry across the semi-minor axis.
   *
   * @generated from field: google.protobuf.DoubleValue orientation_d = 4;
   */
  orientationD?: number;

  /**
   * Optional height above entity position to extrude in meters. A non-zero value creates an elliptic cylinder
   *
   * @generated from field: google.protobuf.DoubleValue height_m = 5;
   */
  heightM?: number;

  constructor(data?: PartialMessage<GeoEllipse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.GeoEllipse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeoEllipse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeoEllipse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeoEllipse;

  static equals(a: GeoEllipse | PlainMessage<GeoEllipse> | undefined, b: GeoEllipse | PlainMessage<GeoEllipse> | undefined): boolean;
}

/**
 * An ellipsoid shaped geo-entity.
 * Principal axis lengths are defined in entity body space
 * This shape is NOT Geo-JSON compatible.
 *
 * @generated from message anduril.entitymanager.v1.GeoEllipsoid
 */
export declare class GeoEllipsoid extends Message<GeoEllipsoid> {
  /**
   * Defines the distance from the center point to the surface along the forward axis
   *
   * @generated from field: google.protobuf.DoubleValue forward_axis_m = 1;
   */
  forwardAxisM?: number;

  /**
   * Defines the distance from the center point to the surface along the side axis
   *
   * @generated from field: google.protobuf.DoubleValue side_axis_m = 2;
   */
  sideAxisM?: number;

  /**
   * Defines the distance from the center point to the surface along the up axis
   *
   * @generated from field: google.protobuf.DoubleValue up_axis_m = 3;
   */
  upAxisM?: number;

  constructor(data?: PartialMessage<GeoEllipsoid>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.GeoEllipsoid";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeoEllipsoid;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeoEllipsoid;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeoEllipsoid;

  static equals(a: GeoEllipsoid | PlainMessage<GeoEllipsoid> | undefined, b: GeoEllipsoid | PlainMessage<GeoEllipsoid> | undefined): boolean;
}

/**
 * A closed ring of points. The first and last point must be the same.
 *
 * @generated from message anduril.entitymanager.v1.LinearRing
 */
export declare class LinearRing extends Message<LinearRing> {
  /**
   * Deprecated: do not use, use positions instead
   *
   * @generated from field: repeated anduril.entitymanager.v1.Position points = 1 [deprecated = true];
   * @deprecated
   */
  points: Position[];

  /**
   * @generated from field: repeated anduril.entitymanager.v1.GeoPolygonPosition positions = 2;
   */
  positions: GeoPolygonPosition[];

  constructor(data?: PartialMessage<LinearRing>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.LinearRing";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinearRing;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinearRing;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinearRing;

  static equals(a: LinearRing | PlainMessage<LinearRing> | undefined, b: LinearRing | PlainMessage<LinearRing> | undefined): boolean;
}

/**
 * A position in a GeoPolygon with an optional extruded height.
 *
 * @generated from message anduril.entitymanager.v1.GeoPolygonPosition
 */
export declare class GeoPolygonPosition extends Message<GeoPolygonPosition> {
  /**
   * base position. if no altitude set, its on the ground.
   *
   * @generated from field: anduril.entitymanager.v1.Position position = 1;
   */
  position?: Position;

  /**
   * optional height above base position to extrude in meters.
   * for a given polygon, all points should have a height or none of them.
   * strictly GeoJSON compatible polygons will not have this set.
   *
   * @generated from field: google.protobuf.FloatValue height_m = 2;
   */
  heightM?: number;

  constructor(data?: PartialMessage<GeoPolygonPosition>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.GeoPolygonPosition";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeoPolygonPosition;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeoPolygonPosition;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeoPolygonPosition;

  static equals(a: GeoPolygonPosition | PlainMessage<GeoPolygonPosition> | undefined, b: GeoPolygonPosition | PlainMessage<GeoPolygonPosition> | undefined): boolean;
}

