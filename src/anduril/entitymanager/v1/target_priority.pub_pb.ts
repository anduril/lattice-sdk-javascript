// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/entitymanager/v1/target_priority.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The target prioritization associated with an entity.
 *
 * @generated from message anduril.entitymanager.v1.TargetPriority
 */
export class TargetPriority extends Message<TargetPriority> {
  /**
   * Describes the target priority in relation to high value target lists.
   *
   * @generated from field: anduril.entitymanager.v1.HighValueTarget high_value_target = 1;
   */
  highValueTarget?: HighValueTarget;

  /**
   * Describes whether the entity should be treated as a threat
   *
   * @generated from field: anduril.entitymanager.v1.Threat threat = 2;
   */
  threat?: Threat;

  constructor(data?: PartialMessage<TargetPriority>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.TargetPriority";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "high_value_target", kind: "message", T: HighValueTarget },
    { no: 2, name: "threat", kind: "message", T: Threat },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetPriority {
    return new TargetPriority().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetPriority {
    return new TargetPriority().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetPriority {
    return new TargetPriority().fromJsonString(jsonString, options);
  }

  static equals(a: TargetPriority | PlainMessage<TargetPriority> | undefined, b: TargetPriority | PlainMessage<TargetPriority> | undefined): boolean {
    return proto3.util.equals(TargetPriority, a, b);
  }
}

/**
 * Describes whether something is a high value target or not.
 *
 * @generated from message anduril.entitymanager.v1.HighValueTarget
 */
export class HighValueTarget extends Message<HighValueTarget> {
  /**
   * Indicates whether the target matches any description from a high value target list.
   *
   * @generated from field: bool is_high_value_target = 1;
   */
  isHighValueTarget = false;

  /**
   * The priority associated with the target. If the target's description appears on multiple high value target lists,
   * the priority will be a reflection of the highest priority of all of those list's target description.
   *
   * A lower value indicates the target is of a higher priority, with 1 being the highest possible priority. A value of
   * 0 indicates there is no priority associated with this target.
   *
   * @generated from field: uint32 target_priority = 2;
   */
  targetPriority = 0;

  /**
   * All of the high value target descriptions that the target matches against.
   *
   * @generated from field: repeated anduril.entitymanager.v1.HighValueTargetMatch target_matches = 3;
   */
  targetMatches: HighValueTargetMatch[] = [];

  /**
   * Indicates whether the target is a 'High Payoff Target'. Targets can be one or both of high value and high payoff.
   * Semantically a High Value Target characterizes the target's importance to Red, whereas a High Payoff Target
   * indicates prosecuting the target furthers Blue's specific objectives.
   *
   * @generated from field: bool is_high_payoff_target = 4;
   */
  isHighPayoffTarget = false;

  constructor(data?: PartialMessage<HighValueTarget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.HighValueTarget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_high_value_target", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "target_priority", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "target_matches", kind: "message", T: HighValueTargetMatch, repeated: true },
    { no: 4, name: "is_high_payoff_target", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HighValueTarget {
    return new HighValueTarget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HighValueTarget {
    return new HighValueTarget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HighValueTarget {
    return new HighValueTarget().fromJsonString(jsonString, options);
  }

  static equals(a: HighValueTarget | PlainMessage<HighValueTarget> | undefined, b: HighValueTarget | PlainMessage<HighValueTarget> | undefined): boolean {
    return proto3.util.equals(HighValueTarget, a, b);
  }
}

/**
 * @generated from message anduril.entitymanager.v1.HighValueTargetMatch
 */
export class HighValueTargetMatch extends Message<HighValueTargetMatch> {
  /**
   * The ID of the high value target list that matches the target description.
   *
   * @generated from field: string high_value_target_list_id = 1;
   */
  highValueTargetListId = "";

  /**
   * The ID of the specific high value target description within a high value target list that was matched against.
   * The ID is considered to be a globally unique identifier across all high value target IDs.
   *
   * @generated from field: string high_value_target_description_id = 2;
   */
  highValueTargetDescriptionId = "";

  constructor(data?: PartialMessage<HighValueTargetMatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.HighValueTargetMatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "high_value_target_list_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "high_value_target_description_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HighValueTargetMatch {
    return new HighValueTargetMatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HighValueTargetMatch {
    return new HighValueTargetMatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HighValueTargetMatch {
    return new HighValueTargetMatch().fromJsonString(jsonString, options);
  }

  static equals(a: HighValueTargetMatch | PlainMessage<HighValueTargetMatch> | undefined, b: HighValueTargetMatch | PlainMessage<HighValueTargetMatch> | undefined): boolean {
    return proto3.util.equals(HighValueTargetMatch, a, b);
  }
}

/**
 * Describes whether an entity is a threat or not.
 *
 * @generated from message anduril.entitymanager.v1.Threat
 */
export class Threat extends Message<Threat> {
  /**
   * Indicates that the entity has been determined to be a threat.
   *
   * @generated from field: bool is_threat = 1;
   */
  isThreat = false;

  constructor(data?: PartialMessage<Threat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.Threat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_threat", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Threat {
    return new Threat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Threat {
    return new Threat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Threat {
    return new Threat().fromJsonString(jsonString, options);
  }

  static equals(a: Threat | PlainMessage<Threat> | undefined, b: Threat | PlainMessage<Threat> | undefined): boolean {
    return proto3.util.equals(Threat, a, b);
  }
}

