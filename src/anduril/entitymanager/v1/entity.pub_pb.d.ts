// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/entitymanager/v1/entity.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Location, LocationUncertainty } from "./location.pub_pb.js";
import type { GeoDetails, GeoPolygon, GeoShape } from "./geoentity.pub_pb.js";
import type { Correlated } from "./correlations.pub_pb.js";
import type { MilView, Ontology } from "./ontology.pub_pb.js";
import type { Sensors } from "./sensors.pub_pb.js";
import type { Payloads } from "./payloads.pub_pb.js";
import type { PowerState } from "./power.pub_pb.js";
import type { TargetPriority } from "./target_priority.pub_pb.js";
import type { LineOfBearing, Signal } from "./signal.pub_pb.js";
import type { TransponderCodes } from "./transponder_codes.pub_pb.js";
import type { ContactDetails } from "./contact_details.pub_pb.js";
import type { Classification } from "./classification.pub_pb.js";
import type { TaskCatalog } from "../../tasks/v2/catalog.pub_pb.js";
import type { Media } from "./media.pub_pb.js";
import type { Relationships } from "./relationship.pub_pb.js";
import type { PrototypeExtensions } from "./prototype.pub_pb.js";
import type { Dimensions } from "./dimensions.pub_pb.js";
import type { RouteDetails } from "./route_details.pub_pb.js";
import type { Schedules } from "./schedule.pub_pb.js";
import type { Health } from "./health_status.pub_pb.js";
import type { GroupDetails } from "./group.pub_pb.js";
import type { Supplies } from "./supplies.pub_pb.js";
import type { AltIdType, OverrideStatus, OverrideType, Source, UInt32Range } from "./types.pub_pb.js";

/**
 * Indicates whether an entity can be deleted with the DeleteEntity API call
 *
 * @generated from enum anduril.entitymanager.v1.Deletable
 */
export declare enum Deletable {
  /**
   * @generated from enum value: DELETABLE_INVALID = 0;
   */
  INVALID = 0,

  /**
   * Entity can immediately be deleted.
   *
   * @generated from enum value: DELETABLE_TRUE = 1;
   */
  TRUE = 1,

  /**
   * Entity is from another source that is known to not allow entities to be deleted
   *
   * @generated from enum value: DELETABLE_FALSE = 2;
   */
  FALSE = 2,

  /**
   * Entity is from another source that requires the source to accept the request. The DeleteEntity API call
   * will work asynchronously in this case.
   *
   * @generated from enum value: DELETABLE_REQUEST = 3;
   */
  REQUEST = 3,
}

/**
 * @generated from enum anduril.entitymanager.v1.InteractivityMode
 */
export declare enum InteractivityMode {
  /**
   * @generated from enum value: INTERACTIVITY_MODE_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: INTERACTIVITY_MODE_DEFAULT = 1;
   */
  DEFAULT = 1,

  /**
   * @generated from enum value: INTERACTIVITY_MODE_DISABLED_ON_MAP = 2;
   */
  DISABLED_ON_MAP = 2,
}

/**
 * An entity object represents a single entity within the Lattice operational environment, and it contains
 * all data associated with that entity, such as its name, ID, and any other relevant components.
 *
 * @generated from message anduril.entitymanager.v1.Entity
 */
export declare class Entity extends Message<Entity> {
  /**
   * A Globally Unique Identifier (GUID) for your entity. If blank, the Entity API creates
   * an entity and automatically generates a new ID for the entity.
   *
   * @generated from field: string entity_id = 1;
   */
  entityId: string;

  /**
   * Helpful, human-readable entity description mainly used for debugging purposes and human
   * traceability. If blank, the Entity API generates one for you.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Indicates an active asset receiving updates. This is a required field for publishing an entity.
   * It needs to be set to true when publishing an entity.
   *
   * @generated from field: bool is_live = 3;
   */
  isLive: boolean;

  /**
   * Time when the asset enters the system. If blank, the Entity API uses a current timestamp.
   * For example, when a drone is first powered on, it might report it's boot time as the created time.
   *
   * @generated from field: google.protobuf.Timestamp created_time = 4;
   */
  createdTime?: Timestamp;

  /**
   * A future time that expires an entity and updates the isLive flag.
   * For entities that are constantly updating, the expiry time also updates.
   * Note in some cases this may differ from isLive.
   * Example: Entities with tasks exported to an external system must remain
   * active, even after they expire.
   * This is a required field for publishing an entity via Flux or PublishEntities rpc. When publishing
   * an entity, this timestamp must be in the future, but less than 30 days from the current time.
   *
   * @generated from field: google.protobuf.Timestamp expiry_time = 5;
   */
  expiryTime?: Timestamp;

  /**
   * To indicate that this entity should not expire. Only to be set to `true` on entities published
   * via PutEntity call. Entities published via Flux or PublishEntities rpc with `no_expiry == true` will be rejected.
   *
   * @generated from field: bool no_expiry = 43;
   */
  noExpiry: boolean;

  /**
   * Human-readable descriptions of what the entity is currently doing.
   *
   * @generated from field: anduril.entitymanager.v1.Status status = 19;
   */
  status?: Status;

  /**
   * Geospatial data related to the entity, including it's position, kinematics and orientation.
   *
   * @generated from field: anduril.entitymanager.v1.Location location = 6;
   */
  location?: Location;

  /**
   * Uncertainty of the entity's position and kinematics.
   *
   * @generated from field: anduril.entitymanager.v1.LocationUncertainty location_uncertainty = 15;
   */
  locationUncertainty?: LocationUncertainty;

  /**
   * Deprecated: do not use, use geo_shape instead
   *
   * @generated from field: anduril.entitymanager.v1.GeoPolygon geopolygon = 17 [deprecated = true];
   * @deprecated
   */
  geopolygon?: GeoPolygon;

  /**
   * Geospatial representation of the entity, including entities that cover an area rather than a fixed point.
   *
   * @generated from field: anduril.entitymanager.v1.GeoShape geo_shape = 23;
   */
  geoShape?: GeoShape;

  /**
   * Additional details on what the geospatial area or point represents, along with visual display details.
   *
   * @generated from field: anduril.entitymanager.v1.GeoDetails geo_details = 24;
   */
  geoDetails?: GeoDetails;

  /**
   * Naming of the entity as well as identifiers that other systems use to reference the same entity.
   *
   * @generated from field: anduril.entitymanager.v1.Aliases aliases = 7;
   */
  aliases?: Aliases;

  /**
   * If this entity is tracked by another, this component contains data related to how it's being tracked.
   *
   * @generated from field: anduril.entitymanager.v1.Tracked tracked = 8;
   */
  tracked?: Tracked;

  /**
   * If this entity has been correlated to another one, this component contains the status of the correlation, the primary entity
   * and the correlation scores.
   *
   * @generated from field: anduril.entitymanager.v1.Correlated correlated = 9;
   */
  correlated?: Correlated;

  /**
   * Military view of the entity
   *
   * @generated from field: anduril.entitymanager.v1.MilView mil_view = 10;
   */
  milView?: MilView;

  /**
   * A standardized representation of the entity
   *
   * @generated from field: anduril.entitymanager.v1.Ontology ontology = 11;
   */
  ontology?: Ontology;

  /**
   * Details of Sensors that are available on an entity
   *
   * @generated from field: anduril.entitymanager.v1.Sensors sensors = 20;
   */
  sensors?: Sensors;

  /**
   * Details of payloads that are available on an entity
   *
   * @generated from field: anduril.entitymanager.v1.Payloads payloads = 21;
   */
  payloads?: Payloads;

  /**
   * Details of the power source on an entity
   *
   * @generated from field: anduril.entitymanager.v1.PowerState power_state = 30;
   */
  powerState?: PowerState;

  /**
   * The primary data source provenance for this entity
   *
   * @generated from field: anduril.entitymanager.v1.Provenance provenance = 12;
   */
  provenance?: Provenance;

  /**
   * Provenance of override data
   *
   * @generated from field: anduril.entitymanager.v1.Overrides overrides = 13;
   */
  overrides?: Overrides;

  /**
   * Indicators of an entity's state that describes properties of the entity as well as what operations can be performed on the entity (eg.
   * can it be deleted)
   *
   * @generated from field: anduril.entitymanager.v1.Indicators indicators = 14;
   */
  indicators?: Indicators;

  /**
   * A component that references the primary original data source. For example, this would allow the original NITF file
   * data that was ingested to be retrieved.
   *
   * @generated from field: anduril.entitymanager.v1.OriginalData original_data = 18;
   */
  originalData?: OriginalData;

  /**
   * The prioritization associated with an entity such as if it's a threat or a high value target.
   *
   * @generated from field: anduril.entitymanager.v1.TargetPriority target_priority = 22;
   */
  targetPriority?: TargetPriority;

  /**
   * A component that describes an entity's signal characteristics. Primarily used if the entity is a signal of interest
   *
   * @generated from field: anduril.entitymanager.v1.Signal signal = 25;
   */
  signal?: Signal;

  /**
   * A message describing any transponder codes associated with Mode 1, 2, 3, 4, 5, S interrogations. These are related to ADS-B modes
   *
   * @generated from field: anduril.entitymanager.v1.TransponderCodes transponder_codes = 26;
   */
  transponderCodes?: TransponderCodes;

  /**
   * Contains details on how to make out-of-band contact with an entity, such as via a phone or email
   *
   * @generated from field: anduril.entitymanager.v1.ContactDetails contact = 27;
   */
  contact?: ContactDetails;

  /**
   * A component that describes an entity's security classification levels both at an overall classification level for the entity as well as on a per
   * field level.
   *
   * @generated from field: anduril.entitymanager.v1.Classification data_classification = 29;
   */
  dataClassification?: Classification;

  /**
   * A catalog of tasks that can be performed by an entity.
   *
   * @generated from field: anduril.tasks.v2.TaskCatalog task_catalog = 31;
   */
  taskCatalog?: TaskCatalog;

  /**
   * Media associated with an entity such as videos, images or thumbnails.
   *
   * @generated from field: anduril.entitymanager.v1.Media media = 32;
   */
  media?: Media;

  /**
   * The relationships between this entity and other entities in the battlespace.
   *
   * @generated from field: anduril.entitymanager.v1.Relationships relationships = 33;
   */
  relationships?: Relationships;

  /**
   * Visual details associated with the display of an entity in the client.
   *
   * @generated from field: anduril.entitymanager.v1.VisualDetails visual_details = 34;
   */
  visualDetails?: VisualDetails;

  /**
   * A generic component that should only be used by Anduril employees as a way of ferrying data without modelling it as a full component. USE WITH CAUTION!!
   * The following should be considered before use:
   * If you have the time available, liaise with the battlespace team (#battlespace-team) to determine if this should be modelled on an existing/new component
   * You're responsible for handling key conflicts
   * Any data on here is not supported by the battlespace awareness team
   * The intention is for this to be used by short-lived prototypes where you may not have conviction in it's longevity
   * 🙏
   *
   * @generated from field: anduril.entitymanager.v1.PrototypeExtensions prototype_extensions = 35;
   */
  prototypeExtensions?: PrototypeExtensions;

  /**
   * Physical dimensions of the entity
   *
   * @generated from field: anduril.entitymanager.v1.Dimensions dimensions = 36;
   */
  dimensions?: Dimensions;

  /**
   * Additional information about an entity's route.
   *
   * @generated from field: anduril.entitymanager.v1.RouteDetails route_details = 37;
   */
  routeDetails?: RouteDetails;

  /**
   * Schedules associated with this entity
   *
   * @generated from field: anduril.entitymanager.v1.Schedules schedules = 38;
   */
  schedules?: Schedules;

  /**
   * Health metrics or status reported by the entity
   *
   * @generated from field: anduril.entitymanager.v1.Health health = 39;
   */
  health?: Health;

  /**
   * Details for the group associated with this entity
   *
   * @generated from field: anduril.entitymanager.v1.GroupDetails group_details = 40;
   */
  groupDetails?: GroupDetails;

  /**
   * Describes an entity's collaborative autonomous teaming status, if any.
   *
   * @generated from field: anduril.entitymanager.v1.TeamStatus team_status = 41;
   */
  teamStatus?: TeamStatus;

  /**
   * Contains relevant supply information for the entity (e.g., munitions and fuel)
   *
   * @generated from field: anduril.entitymanager.v1.Supplies supplies = 42;
   */
  supplies?: Supplies;

  constructor(data?: PartialMessage<Entity>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Entity";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entity;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entity;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entity;

  static equals(a: Entity | PlainMessage<Entity> | undefined, b: Entity | PlainMessage<Entity> | undefined): boolean;
}

/**
 * We need a proto containing a list of Entities for marshalling/unmarshalling
 *
 * @generated from message anduril.entitymanager.v1.Entities
 */
export declare class Entities extends Message<Entities> {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.Entity entities = 1;
   */
  entities: Entity[];

  constructor(data?: PartialMessage<Entities>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Entities";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entities;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entities;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entities;

  static equals(a: Entities | PlainMessage<Entities> | undefined, b: Entities | PlainMessage<Entities> | undefined): boolean;
}

/**
 * Contains status of entities.
 *
 * @generated from message anduril.entitymanager.v1.Status
 */
export declare class Status extends Message<Status> {
  /**
   * A string that describes the activity that the entity is performing. These values
   * include, but are not limited to the AIR/SURFACE/SUBSURFACE/LAND/SPACE ACTIVITY values found in MIL-STD 6016F.
   * Examples include "RECONNAISSANCE", "INTERDICTION", "ELECTRONIC WARFARE (EW)", "RETURN TO BASE (RTB)", "PREPARING
   * FOR LAUNCH".
   *
   * @generated from field: string platform_activity = 1;
   */
  platformActivity: string;

  /**
   * A string that describes the role the entity is currently performing. E.g. "Team Member", "Commander" or
   *
   * @generated from field: string role = 2;
   */
  role: string;

  constructor(data?: PartialMessage<Status>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Status";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Status;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Status;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Status;

  static equals(a: Status | PlainMessage<Status> | undefined, b: Status | PlainMessage<Status> | undefined): boolean;
}

/**
 * Available for any Entities with alternate ids in other systems.
 *
 * @generated from message anduril.entitymanager.v1.Aliases
 */
export declare class Aliases extends Message<Aliases> {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.AlternateId alternate_ids = 1;
   */
  alternateIds: AlternateId[];

  /**
   * The best available version of the entity's display name.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  constructor(data?: PartialMessage<Aliases>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Aliases";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Aliases;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Aliases;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Aliases;

  static equals(a: Aliases | PlainMessage<Aliases> | undefined, b: Aliases | PlainMessage<Aliases> | undefined): boolean;
}

/**
 * Available for Entities that are tracked.
 *
 * @generated from message anduril.entitymanager.v1.Tracked
 */
export declare class Tracked extends Message<Tracked> {
  /**
   * deprecated in favor of track_quality_wrapper to better indicate when TQ is actually missing vs 0 which is valid
   *
   * @generated from field: uint32 track_quality = 1 [deprecated = true];
   * @deprecated
   */
  trackQuality: number;

  /**
   * Quality score, 0-15, nil if none
   *
   * @generated from field: google.protobuf.Int32Value track_quality_wrapper = 2;
   */
  trackQualityWrapper?: number;

  /**
   * Sensor hits aggregation on the tracked entity.
   *
   * @generated from field: google.protobuf.Int32Value sensor_hits = 3;
   */
  sensorHits?: number;

  /**
   * Estimated number of objects or units that are represented by this entity. Known as Strength in certain contexts (Link16)
   * if UpperBound == LowerBound; (strength = LowerBound)
   * If both UpperBound and LowerBound are defined; strength is between LowerBound and UpperBound (represented as string "Strength: 4-5")
   * If UpperBound is defined only (LowerBound unset), Strength ≤ UpperBound
   * If LowerBound is defined only (UpperBound unset), LowerBound ≤ Strength
   * 0 indicates unset.
   *
   * @generated from field: anduril.entitymanager.v1.UInt32Range number_of_objects = 4;
   */
  numberOfObjects?: UInt32Range;

  /**
   * deprecated. data from sensors actively tracking the entity are placed in the TrackedBy relationship.
   *
   * @generated from field: anduril.entitymanager.v1.Sensors sensor_details = 5 [deprecated = true];
   * @deprecated
   */
  sensorDetails?: Sensors;

  /**
   * The radar cross section (RCS) is a measure of how detectable an object is by radar. A large RCS indicates an object is more easily
   * detected. The unit is “decibels per square meter,” or dBsm
   *
   * @generated from field: google.protobuf.DoubleValue radar_cross_section = 6;
   */
  radarCrossSection?: number;

  /**
   * Timestamp of the latest tracking measurement for this entity.
   *
   * @generated from field: google.protobuf.Timestamp last_measurement_time = 7;
   */
  lastMeasurementTime?: Timestamp;

  /**
   * The relative position of a track with respect to the entity that is tracking it. Used for tracks that do not yet have a 3D position.
   * For this entity (A), being tracked by some entity (B), this LineOfBearing would express a ray from B to A.
   *
   * @generated from field: anduril.entitymanager.v1.LineOfBearing line_of_bearing = 9;
   */
  lineOfBearing?: LineOfBearing;

  constructor(data?: PartialMessage<Tracked>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Tracked";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tracked;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tracked;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tracked;

  static equals(a: Tracked | PlainMessage<Tracked> | undefined, b: Tracked | PlainMessage<Tracked> | undefined): boolean;
}

/**
 * Data provenance.
 *
 * @generated from message anduril.entitymanager.v1.Provenance
 */
export declare class Provenance extends Message<Provenance> {
  /**
   * Name of the integration that produced this entity
   *
   * @generated from field: string integration_name = 5;
   */
  integrationName: string;

  /**
   * Source data type of this entity. Examples: ADSB, Link16, etc.
   *
   * @generated from field: string data_type = 6;
   */
  dataType: string;

  /**
   * Enum defining the source TO BE DEPRECATED
   *
   * @generated from field: anduril.entitymanager.v1.Source source = 1;
   */
  source: Source;

  /**
   * An ID that allows an element from a source to be uniquely identified
   *
   * @generated from field: string source_id = 3;
   */
  sourceId: string;

  /**
   * Main update timer for the entity with the exception of overrides
   *
   * @generated from field: google.protobuf.Timestamp source_update_time = 2;
   */
  sourceUpdateTime?: Timestamp;

  /**
   * Description of the modification source. In the case of a user this is the email address.
   *
   * @generated from field: string source_description = 4;
   */
  sourceDescription: string;

  constructor(data?: PartialMessage<Provenance>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Provenance";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Provenance;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Provenance;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Provenance;

  static equals(a: Provenance | PlainMessage<Provenance> | undefined, b: Provenance | PlainMessage<Provenance> | undefined): boolean;
}

/**
 * Indicators to describe entity to consumers.
 *
 * @generated from message anduril.entitymanager.v1.Indicators
 */
export declare class Indicators extends Message<Indicators> {
  /**
   * @generated from field: google.protobuf.BoolValue simulated = 1;
   */
  simulated?: boolean;

  /**
   * @generated from field: google.protobuf.BoolValue exercise = 2;
   */
  exercise?: boolean;

  /**
   * @generated from field: google.protobuf.BoolValue emergency = 3;
   */
  emergency?: boolean;

  /**
   * @generated from field: google.protobuf.BoolValue c2 = 4;
   */
  c2?: boolean;

  /**
   * @generated from field: anduril.entitymanager.v1.Deletable deletable = 5;
   */
  deletable: Deletable;

  /**
   * Indicates the Entity should be egressed to external sources.
   * Integrations choose how the egressing happens (e.g. if an Entity needs fuzzing).
   *
   * @generated from field: google.protobuf.BoolValue egressable = 6;
   */
  egressable?: boolean;

  /**
   * A signal of arbitrary importance such that the entity should be globally marked for all users
   *
   * @generated from field: google.protobuf.BoolValue starred = 7;
   */
  starred?: boolean;

  constructor(data?: PartialMessage<Indicators>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Indicators";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Indicators;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Indicators;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Indicators;

  static equals(a: Indicators | PlainMessage<Indicators> | undefined, b: Indicators | PlainMessage<Indicators> | undefined): boolean;
}

/**
 * Metadata about entity overrides present.
 *
 * @generated from message anduril.entitymanager.v1.Overrides
 */
export declare class Overrides extends Message<Overrides> {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.Override override = 2;
   */
  override: Override[];

  /**
   * Deprecated: do not use
   *
   * @generated from field: repeated anduril.entitymanager.v1.OverrideProvenance provenance = 1 [deprecated = true];
   * @deprecated
   */
  provenance: OverrideProvenance[];

  constructor(data?: PartialMessage<Overrides>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Overrides";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Overrides;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Overrides;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Overrides;

  static equals(a: Overrides | PlainMessage<Overrides> | undefined, b: Overrides | PlainMessage<Overrides> | undefined): boolean;
}

/**
 * Details about an override. Last write wins.
 *
 * @generated from message anduril.entitymanager.v1.Override
 */
export declare class Override extends Message<Override> {
  /**
   * override request id for an override request
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * proto field path which is the string representation of a field.
   * example: correlated.primary_entity_id would be primary_entity_id in correlated component
   *
   * @generated from field: string field_path = 2;
   */
  fieldPath: string;

  /**
   * new field value corresponding to field path. In the shape of an empty entity with only the changed value.
   * example: entity: { mil_view: { disposition: Disposition_DISPOSITION_HOSTILE } }
   *
   * @generated from field: anduril.entitymanager.v1.Entity masked_field_value = 3;
   */
  maskedFieldValue?: Entity;

  /**
   * status of the override
   *
   * @generated from field: anduril.entitymanager.v1.OverrideStatus status = 4;
   */
  status: OverrideStatus;

  /**
   * @generated from field: anduril.entitymanager.v1.Provenance provenance = 5;
   */
  provenance?: Provenance;

  /**
   * The type of the override, defined by the stage of the entity lifecycle that the entity was in when the override
   * was requested.
   *
   * @generated from field: anduril.entitymanager.v1.OverrideType type = 6;
   */
  type: OverrideType;

  /**
   * Timestamp of the override request. The timestamp is generated by the Entity Manager instance that receives the request.
   *
   * @generated from field: google.protobuf.Timestamp request_timestamp = 7;
   */
  requestTimestamp?: Timestamp;

  constructor(data?: PartialMessage<Override>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Override";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Override;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Override;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Override;

  static equals(a: Override | PlainMessage<Override> | undefined, b: Override | PlainMessage<Override> | undefined): boolean;
}

/**
 * The provenance of a particular override within the entity.
 *
 * @generated from message anduril.entitymanager.v1.OverrideProvenance
 * @deprecated
 */
export declare class OverrideProvenance extends Message<OverrideProvenance> {
  /**
   * proto field path which is the string representation of a field.
   * example: correlated.primary_entity_id would be primary_entity_id in correlated component
   *
   * @generated from field: string field_path = 1;
   */
  fieldPath: string;

  /**
   * Deprecated: do not use
   *
   * @generated from field: string source_id = 2 [deprecated = true];
   * @deprecated
   */
  sourceId: string;

  /**
   * @generated from field: anduril.entitymanager.v1.Provenance provenance = 3;
   */
  provenance?: Provenance;

  constructor(data?: PartialMessage<OverrideProvenance>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.OverrideProvenance";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OverrideProvenance;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OverrideProvenance;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OverrideProvenance;

  static equals(a: OverrideProvenance | PlainMessage<OverrideProvenance> | undefined, b: OverrideProvenance | PlainMessage<OverrideProvenance> | undefined): boolean;
}

/**
 * A component that references the primary original data source. For example, this would allow the original NITF file
 * data that was ingested to be retrieved.
 *
 * @generated from message anduril.entitymanager.v1.OriginalData
 */
export declare class OriginalData extends Message<OriginalData> {
  /**
   * The URL is a reference to the data's location so it can be retrieved after being converted to an entity.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * @generated from field: anduril.entitymanager.v1.OriginalData.TLE tle = 2;
   */
  tle?: OriginalData_TLE;

  constructor(data?: PartialMessage<OriginalData>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.OriginalData";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OriginalData;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OriginalData;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OriginalData;

  static equals(a: OriginalData | PlainMessage<OriginalData> | undefined, b: OriginalData | PlainMessage<OriginalData> | undefined): boolean;
}

/**
 * A TLE is a space industry standard for representing the characteristics of an object on orbit.
 * It is composed of two lines that are each a fixed width of 69 characters.
 *
 * @generated from message anduril.entitymanager.v1.OriginalData.TLE
 */
export declare class OriginalData_TLE extends Message<OriginalData_TLE> {
  /**
   * @generated from field: string line1 = 1;
   */
  line1: string;

  /**
   * @generated from field: string line2 = 2;
   */
  line2: string;

  constructor(data?: PartialMessage<OriginalData_TLE>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.OriginalData.TLE";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OriginalData_TLE;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OriginalData_TLE;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OriginalData_TLE;

  static equals(a: OriginalData_TLE | PlainMessage<OriginalData_TLE> | undefined, b: OriginalData_TLE | PlainMessage<OriginalData_TLE> | undefined): boolean;
}

/**
 * An alternate id for an Entity.
 *
 * @generated from message anduril.entitymanager.v1.AlternateId
 */
export declare class AlternateId extends Message<AlternateId> {
  /**
   * deprecated in favor of type
   *
   * @generated from field: string source = 1 [deprecated = true];
   * @deprecated
   */
  source: string;

  /**
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * @generated from field: anduril.entitymanager.v1.AltIdType type = 3;
   */
  type: AltIdType;

  constructor(data?: PartialMessage<AlternateId>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.AlternateId";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlternateId;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlternateId;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlternateId;

  static equals(a: AlternateId | PlainMessage<AlternateId> | undefined, b: AlternateId | PlainMessage<AlternateId> | undefined): boolean;
}

/**
 * Visual details associated with the display of an entity in the client.
 *
 * @generated from message anduril.entitymanager.v1.VisualDetails
 */
export declare class VisualDetails extends Message<VisualDetails> {
  /**
   * The range rings to display around an entity.
   *
   * @generated from field: anduril.entitymanager.v1.RangeRings range_rings = 1;
   */
  rangeRings?: RangeRings;

  /**
   * Control the operator's ability to interact with the entity on the UI (disable hover/click on map, etc.)
   * Not a security/access flag
   *
   * @generated from field: anduril.entitymanager.v1.InteractivityMode interactivity_mode = 2;
   */
  interactivityMode: InteractivityMode;

  constructor(data?: PartialMessage<VisualDetails>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.VisualDetails";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VisualDetails;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VisualDetails;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VisualDetails;

  static equals(a: VisualDetails | PlainMessage<VisualDetails> | undefined, b: VisualDetails | PlainMessage<VisualDetails> | undefined): boolean;
}

/**
 * Range rings allow visual assessment of map distance at varying zoom levels.
 *
 * @generated from message anduril.entitymanager.v1.RangeRings
 */
export declare class RangeRings extends Message<RangeRings> {
  /**
   * The minimum range ring distance, specified in meters.
   *
   * @generated from field: google.protobuf.DoubleValue min_distance_m = 1;
   */
  minDistanceM?: number;

  /**
   * The maximum range ring distance, specified in meters.
   *
   * @generated from field: google.protobuf.DoubleValue max_distance_m = 2;
   */
  maxDistanceM?: number;

  /**
   * The count of range rings.
   *
   * @generated from field: uint32 ring_count = 3;
   */
  ringCount: number;

  constructor(data?: PartialMessage<RangeRings>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.RangeRings";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RangeRings;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RangeRings;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RangeRings;

  static equals(a: RangeRings | PlainMessage<RangeRings> | undefined, b: RangeRings | PlainMessage<RangeRings> | undefined): boolean;
}

/**
 * If present, signifies the entity can participate in collaborative autonomous teaming.
 * Any status about team membership will be reported here.
 *
 * @generated from message anduril.entitymanager.v1.TeamStatus
 */
export declare class TeamStatus extends Message<TeamStatus> {
  constructor(data?: PartialMessage<TeamStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.TeamStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TeamStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TeamStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TeamStatus;

  static equals(a: TeamStatus | PlainMessage<TeamStatus> | undefined, b: TeamStatus | PlainMessage<TeamStatus> | undefined): boolean;
}

