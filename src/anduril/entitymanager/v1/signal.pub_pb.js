// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/entitymanager/v1/signal.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const { DoubleValue, Int32Value, proto3 } = require("@bufbuild/protobuf");
const { Position } = require("./location.pub_pb.js");
const { Pose, TMat2 } = require("../../type/coords.pub_pb.js");

/**
 * Enumerates the possible modulation types
 *
 * @generated from enum anduril.entitymanager.v1.ModulationType
 */
const ModulationType = proto3.makeEnum(
  "anduril.entitymanager.v1.ModulationType",
  [
    {no: 0, name: "MODULATION_TYPE_INVALID", localName: "INVALID"},
    {no: 1, name: "MODULATION_TYPE_AMPLITUDE", localName: "AMPLITUDE"},
    {no: 2, name: "MODULATION_TYPE_FREQUENCY", localName: "FREQUENCY"},
    {no: 3, name: "MODULATION_TYPE_PHASE", localName: "PHASE"},
    {no: 4, name: "MODULATION_TYPE_SPACED", localName: "SPACED"},
    {no: 5, name: "MODULATION_TYPE_AMPLITUDE_SHIFT_KEYING", localName: "AMPLITUDE_SHIFT_KEYING"},
    {no: 6, name: "MODULATION_TYPE_FREQUENCY_SHIFT_KEYING", localName: "FREQUENCY_SHIFT_KEYING"},
    {no: 7, name: "MODULATION_TYPE_PHASE_SHIFT_KEYING", localName: "PHASE_SHIFT_KEYING"},
    {no: 8, name: "MODULATION_TYPE_MINIMUM_SHIFT_KEYING", localName: "MINIMUM_SHIFT_KEYING"},
    {no: 9, name: "MODULATION_TYPE_MINIMUM_SHIFT_KEYING_GAUSSIAN", localName: "MINIMUM_SHIFT_KEYING_GAUSSIAN"},
    {no: 10, name: "MODULATION_TYPE_SINGLE_SIDE_BAND_UPPER", localName: "SINGLE_SIDE_BAND_UPPER"},
    {no: 11, name: "MODULATION_TYPE_SINGLE_SIDE_BAND_LOWER", localName: "SINGLE_SIDE_BAND_LOWER"},
    {no: 12, name: "MODULATION_TYPE_SINGLE_SIDE_BAND_FULL_CARRIER", localName: "SINGLE_SIDE_BAND_FULL_CARRIER"},
    {no: 13, name: "MODULATION_TYPE_SINGLE_SIDE_BAND_SUPPRESSED_CARRIER", localName: "SINGLE_SIDE_BAND_SUPPRESSED_CARRIER"},
    {no: 14, name: "MODULATION_TYPE_SINGLE_SIDE_BAND_REDUCED_CARRIER", localName: "SINGLE_SIDE_BAND_REDUCED_CARRIER"},
    {no: 15, name: "MODULATION_TYPE_SINGLE_SIDE_BAND_WITHOUT_CARRIER", localName: "SINGLE_SIDE_BAND_WITHOUT_CARRIER"},
    {no: 16, name: "MODULATION_TYPE_DUAL_SIDE_BAND_FULL_CARRIER", localName: "DUAL_SIDE_BAND_FULL_CARRIER"},
    {no: 17, name: "MODULATION_TYPE_DUAL_SIDE_BAND_SUPPRESSED_CARRIER", localName: "DUAL_SIDE_BAND_SUPPRESSED_CARRIER"},
    {no: 18, name: "MODULATION_TYPE_DUAL_SIDE_BAND_REDUCED_CARRIER", localName: "DUAL_SIDE_BAND_REDUCED_CARRIER"},
    {no: 19, name: "MODULATION_TYPE_DUAL_SIDE_BAND_WITHOUT_CARRIER", localName: "DUAL_SIDE_BAND_WITHOUT_CARRIER"},
    {no: 20, name: "MODULATION_TYPE_INDEPENDENT_SIDE_BAND", localName: "INDEPENDENT_SIDE_BAND"},
    {no: 21, name: "MODULATION_TYPE_VESTIGIAL_SIDE_BAND", localName: "VESTIGIAL_SIDE_BAND"},
    {no: 22, name: "MODULATION_TYPE_ON_OFF_KEYING", localName: "ON_OFF_KEYING"},
    {no: 23, name: "MODULATION_TYPE_MULTI_FREQUENCY_SHIFT_KEYING", localName: "MULTI_FREQUENCY_SHIFT_KEYING"},
    {no: 24, name: "MODULATION_TYPE_AUDIO_FREQUENCY_SHIFT_KEYING", localName: "AUDIO_FREQUENCY_SHIFT_KEYING"},
    {no: 25, name: "MODULATION_TYPE_CONTINUOUS_PHASE_FREQUENCY_SHIFT_KEYING", localName: "CONTINUOUS_PHASE_FREQUENCY_SHIFT_KEYING"},
    {no: 26, name: "MODULATION_TYPE_C_PHASE_SHIFT_KEYING", localName: "C_PHASE_SHIFT_KEYING"},
    {no: 27, name: "MODULATION_TYPE_DIFFERENTIALLY_ENCODED_BINARY_PHASE_SHIFT_KEYING", localName: "DIFFERENTIALLY_ENCODED_BINARY_PHASE_SHIFT_KEYING"},
    {no: 28, name: "MODULATION_TYPE_DIFFERENTIALLY_ENCODED_QUADRATURE_PHASE_SHIFT_KEYING", localName: "DIFFERENTIALLY_ENCODED_QUADRATURE_PHASE_SHIFT_KEYING"},
    {no: 29, name: "MODULATION_TYPE_OFFSET_QUADRATURE_PHASE_SHIFT_KEYING", localName: "OFFSET_QUADRATURE_PHASE_SHIFT_KEYING"},
    {no: 30, name: "MODULATION_TYPE_DIFFERENTIAL_PHASE_SHIFT_KEYING", localName: "DIFFERENTIAL_PHASE_SHIFT_KEYING"},
    {no: 31, name: "MODULATION_TYPE_PI_4_QUADRATURE_PHASE_SHIFT_KEYING", localName: "PI_4_QUADRATURE_PHASE_SHIFT_KEYING"},
    {no: 32, name: "MODULATION_TYPE_STACKED_OVERLAPPING_QUADRATURE_PHASE_SHIFT_KEYING", localName: "STACKED_OVERLAPPING_QUADRATURE_PHASE_SHIFT_KEYING"},
    {no: 33, name: "MODULATION_TYPE_F_QUADRATURE_PHASE_SHIFT_KEYING", localName: "F_QUADRATURE_PHASE_SHIFT_KEYING"},
    {no: 34, name: "MODULATION_TYPE_QUADRATURE_AMPLITUDE_ANALOG", localName: "QUADRATURE_AMPLITUDE_ANALOG"},
    {no: 35, name: "MODULATION_TYPE_QUADRATURE_AMPLITUDE_DIGITAL", localName: "QUADRATURE_AMPLITUDE_DIGITAL"},
    {no: 36, name: "MODULATION_TYPE_CONTINUOUS_PHASE", localName: "CONTINUOUS_PHASE"},
    {no: 37, name: "MODULATION_TYPE_PULSE_POSITION", localName: "PULSE_POSITION"},
    {no: 38, name: "MODULATION_TYPE_TRELLIS_CODE", localName: "TRELLIS_CODE"},
    {no: 39, name: "MODULATION_TYPE_ORTHOGONAL_FREQUENCY_DIVISION_MULTIPLEXING", localName: "ORTHOGONAL_FREQUENCY_DIVISION_MULTIPLEXING"},
    {no: 40, name: "MODULATION_TYPE_FREQUENCY_HOPPING_SPREAD_SPECTRUM", localName: "FREQUENCY_HOPPING_SPREAD_SPECTRUM"},
    {no: 41, name: "MODULATION_TYPE_DIGITAL_SEQUENCE_SPREAD_SPECTRUM", localName: "DIGITAL_SEQUENCE_SPREAD_SPECTRUM"},
  ],
);

/**
 * Enumerates the possible scan types
 *
 * @generated from enum anduril.entitymanager.v1.ScanType
 */
const ScanType = proto3.makeEnum(
  "anduril.entitymanager.v1.ScanType",
  [
    {no: 0, name: "SCAN_TYPE_INVALID", localName: "INVALID"},
    {no: 1, name: "SCAN_TYPE_CIRCULAR", localName: "CIRCULAR"},
    {no: 2, name: "SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR", localName: "BIDIRECTIONAL_HORIZONTAL_SECTOR"},
    {no: 3, name: "SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR", localName: "BIDIRECTIONAL_VERTICAL_SECTOR"},
    {no: 4, name: "SCAN_TYPE_NON_SCANNING", localName: "NON_SCANNING"},
    {no: 5, name: "SCAN_TYPE_IRREGULAR", localName: "IRREGULAR"},
    {no: 6, name: "SCAN_TYPE_CONICAL", localName: "CONICAL"},
    {no: 7, name: "SCAN_TYPE_LOBE_SWITCHING", localName: "LOBE_SWITCHING"},
    {no: 8, name: "SCAN_TYPE_RASTER", localName: "RASTER"},
    {no: 9, name: "SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR", localName: "CIRCULAR_VERTICAL_SECTOR"},
    {no: 10, name: "SCAN_TYPE_CIRCULAR_CONICAL", localName: "CIRCULAR_CONICAL"},
    {no: 11, name: "SCAN_TYPE_SECTOR_CONICAL", localName: "SECTOR_CONICAL"},
    {no: 12, name: "SCAN_TYPE_AGILE_BEAM", localName: "AGILE_BEAM"},
    {no: 13, name: "SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR", localName: "UNIDIRECTIONAL_VERTICAL_SECTOR"},
    {no: 14, name: "SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR", localName: "UNIDIRECTIONAL_HORIZONTAL_SECTOR"},
    {no: 15, name: "SCAN_TYPE_UNIDIRECTIONAL_SECTOR", localName: "UNIDIRECTIONAL_SECTOR"},
    {no: 16, name: "SCAN_TYPE_BIDIRECTIONAL_SECTOR", localName: "BIDIRECTIONAL_SECTOR"},
  ],
);

/**
 * A component that describes an entity's signal characteristics.
 *
 * @generated from message anduril.entitymanager.v1.Signal
 */
const Signal = proto3.makeMessageType(
  "anduril.entitymanager.v1.Signal",
  () => [
    { no: 1, name: "frequency_center", kind: "message", T: Frequency, oneof: "frequency_measurement" },
    { no: 2, name: "frequency_range", kind: "message", T: FrequencyRange, oneof: "frequency_measurement" },
    { no: 3, name: "bandwidth_hz", kind: "message", T: DoubleValue },
    { no: 4, name: "signal_to_noise_ratio", kind: "message", T: DoubleValue },
    { no: 5, name: "line_of_bearing", kind: "message", T: LineOfBearing, oneof: "report" },
    { no: 6, name: "fixed", kind: "message", T: Fixed, oneof: "report" },
    { no: 7, name: "emitter_notations", kind: "message", T: EmitterNotation, repeated: true },
    { no: 8, name: "pulse_width_s", kind: "message", T: DoubleValue },
    { no: 9, name: "pulse_repetition_interval", kind: "message", T: PulseRepetitionInterval },
    { no: 10, name: "modulation", kind: "message", T: Modulation },
    { no: 11, name: "scan_characteristics", kind: "message", T: ScanCharacteristics },
  ],
);

/**
 * A representation of a single emitter notation.
 *
 * @generated from message anduril.entitymanager.v1.EmitterNotation
 */
const EmitterNotation = proto3.makeMessageType(
  "anduril.entitymanager.v1.EmitterNotation",
  () => [
    { no: 1, name: "emitter_notation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "confidence", kind: "message", T: DoubleValue },
  ],
);

/**
 * A component that describes some measured value with error.
 *
 * @generated from message anduril.entitymanager.v1.Measurement
 */
const Measurement = proto3.makeMessageType(
  "anduril.entitymanager.v1.Measurement",
  () => [
    { no: 1, name: "value", kind: "message", T: DoubleValue },
    { no: 2, name: "sigma", kind: "message", T: DoubleValue },
  ],
);

/**
 * A component for describing frequency.
 *
 * @generated from message anduril.entitymanager.v1.Frequency
 */
const Frequency = proto3.makeMessageType(
  "anduril.entitymanager.v1.Frequency",
  () => [
    { no: 1, name: "frequency_hz", kind: "message", T: Measurement },
  ],
);

/**
 * A component to represent a frequency range.
 *
 * @generated from message anduril.entitymanager.v1.FrequencyRange
 */
const FrequencyRange = proto3.makeMessageType(
  "anduril.entitymanager.v1.FrequencyRange",
  () => [
    { no: 1, name: "minimum_frequency_hz", kind: "message", T: Frequency },
    { no: 2, name: "maximum_frequency_hz", kind: "message", T: Frequency },
  ],
);

/**
 * A line of bearing of a signal.
 *
 * @generated from message anduril.entitymanager.v1.LineOfBearing
 */
const LineOfBearing = proto3.makeMessageType(
  "anduril.entitymanager.v1.LineOfBearing",
  () => [
    { no: 1, name: "origin", kind: "message", T: Position },
    { no: 2, name: "range_bearing", kind: "message", T: RangeBearing },
    { no: 3, name: "angle_of_arrival", kind: "message", T: AngleOfArrival },
    { no: 4, name: "range_estimate_m", kind: "message", T: Measurement, oneof: "detection_range" },
    { no: 5, name: "max_range_m", kind: "message", T: Measurement, oneof: "detection_range" },
  ],
);

/**
 * The direction from which the signal is received
 *
 * @generated from message anduril.entitymanager.v1.AngleOfArrival
 */
const AngleOfArrival = proto3.makeMessageType(
  "anduril.entitymanager.v1.AngleOfArrival",
  () => [
    { no: 1, name: "relative_pose", kind: "message", T: Pose },
    { no: 2, name: "bearing_elevation_covariance_rad2", kind: "message", T: TMat2 },
  ],
);

/**
 * A fix of a signal. No extra fields but it is expected that location should be populated when using this report.
 *
 * @generated from message anduril.entitymanager.v1.Fixed
 */
const Fixed = proto3.makeMessageType(
  "anduril.entitymanager.v1.Fixed",
  [],
);

/**
 * Describes range and vertical and horizontal angular measurements of an entity with respect to a target.
 *
 * @generated from message anduril.entitymanager.v1.RangeBearing
 */
const RangeBearing = proto3.makeMessageType(
  "anduril.entitymanager.v1.RangeBearing",
  () => [
    { no: 1, name: "range_m", kind: "message", T: Measurement },
    { no: 2, name: "range_angle_d", kind: "message", T: Measurement },
  ],
);

/**
 * A component that describe the length in time between two pulses
 *
 * @generated from message anduril.entitymanager.v1.PulseRepetitionInterval
 */
const PulseRepetitionInterval = proto3.makeMessageType(
  "anduril.entitymanager.v1.PulseRepetitionInterval",
  () => [
    { no: 1, name: "pulse_repetition_interval_s", kind: "message", T: Measurement },
  ],
);

/**
 * A component that describe how information is encoded in a transmitted signal through a carrier signal
 *
 * @generated from message anduril.entitymanager.v1.Modulation
 */
const Modulation = proto3.makeMessageType(
  "anduril.entitymanager.v1.Modulation",
  () => [
    { no: 1, name: "modulation_type", kind: "enum", T: proto3.getEnumType(ModulationType) },
    { no: 2, name: "symbols", kind: "message", T: Int32Value },
    { no: 3, name: "interpulse_modulation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "encoding", kind: "message", T: Encoding },
  ],
);

/**
 * A component that describes the formatting of the information in a signal
 *
 * @generated from message anduril.entitymanager.v1.Encoding
 */
const Encoding = proto3.makeMessageType(
  "anduril.entitymanager.v1.Encoding",
  () => [
    { no: 1, name: "chip_hop_rate_num_sec", kind: "message", T: DoubleValue },
    { no: 2, name: "hop_dwell_time_sec", kind: "message", T: DoubleValue },
    { no: 3, name: "baud_rate_num_sec", kind: "message", T: DoubleValue },
  ],
);

/**
 * A component that describes the scanning characteristics of a signal
 *
 * @generated from message anduril.entitymanager.v1.ScanCharacteristics
 */
const ScanCharacteristics = proto3.makeMessageType(
  "anduril.entitymanager.v1.ScanCharacteristics",
  () => [
    { no: 1, name: "scan_type", kind: "enum", T: proto3.getEnumType(ScanType) },
    { no: 2, name: "scan_period_s", kind: "message", T: DoubleValue },
  ],
);


exports.ModulationType = ModulationType;
exports.ScanType = ScanType;
exports.Signal = Signal;
exports.EmitterNotation = EmitterNotation;
exports.Measurement = Measurement;
exports.Frequency = Frequency;
exports.FrequencyRange = FrequencyRange;
exports.LineOfBearing = LineOfBearing;
exports.AngleOfArrival = AngleOfArrival;
exports.Fixed = Fixed;
exports.RangeBearing = RangeBearing;
exports.PulseRepetitionInterval = PulseRepetitionInterval;
exports.Modulation = Modulation;
exports.Encoding = Encoding;
exports.ScanCharacteristics = ScanCharacteristics;
