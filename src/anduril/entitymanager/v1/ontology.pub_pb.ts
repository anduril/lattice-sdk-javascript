// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/entitymanager/v1/ontology.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Disposition, Environment, Nationality } from "../../ontology/v1/type.pub_pb.js";
import { Template } from "./types.pub_pb.js";

/**
 * Available for Entities that have a military view representation.
 *
 * @generated from message anduril.entitymanager.v1.MilView
 */
export class MilView extends Message<MilView> {
  /**
   * @generated from field: anduril.ontology.v1.Disposition disposition = 1;
   */
  disposition = Disposition.UNKNOWN;

  /**
   * @generated from field: anduril.ontology.v1.Environment environment = 2;
   */
  environment = Environment.UNKNOWN;

  /**
   * @generated from field: anduril.ontology.v1.Nationality nationality = 3;
   */
  nationality = Nationality.INVALID;

  constructor(data?: PartialMessage<MilView>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.MilView";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "disposition", kind: "enum", T: proto3.getEnumType(Disposition) },
    { no: 2, name: "environment", kind: "enum", T: proto3.getEnumType(Environment) },
    { no: 3, name: "nationality", kind: "enum", T: proto3.getEnumType(Nationality) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MilView {
    return new MilView().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MilView {
    return new MilView().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MilView {
    return new MilView().fromJsonString(jsonString, options);
  }

  static equals(a: MilView | PlainMessage<MilView> | undefined, b: MilView | PlainMessage<MilView> | undefined): boolean {
    return proto3.util.equals(MilView, a, b);
  }
}

/**
 * Ontology of the entity.
 *
 * @generated from message anduril.entitymanager.v1.Ontology
 */
export class Ontology extends Message<Ontology> {
  /**
   * DEPRECATED: list of possible descriptors in preferred order.
   *
   * @generated from field: repeated string descriptors = 1 [deprecated = true];
   * @deprecated
   */
  descriptors: string[] = [];

  /**
   * KRN: Knowledge Resource Name
   * A string that references the ontology of the entity defined in KnowledgeGraph.
   *
   * @generated from field: string krn = 5;
   */
  krn = "";

  /**
   * A string that describes the asset's high-level type with natural language. These values include, but are not
   * limited to the AIR/SURFACE/SUBSURFACE/LAND/SPACE PLATFORM TYPE values found in MIL-STD 6016F.
   * Examples include "FIGHTER", "TANK", "AIRCRAFT CARRIER", "UAV".
   *
   * @generated from field: string platform_type = 3;
   */
  platformType = "";

  /**
   * A string that describes the asset's exact model or type. These values include, but are not
   * limited to the AIR/SURFACE/SUBSURFACE/LAND/SPACE SPECIFIC TYPE values found in MIL-STD 6016F.
   * Examples include "F-16", "NASAMS-LCHR", "ARLEIGH BURKE DDG", "GHOST".
   *
   * @generated from field: string specific_type = 4;
   */
  specificType = "";

  /**
   * The template used when creating this entity. Specifies minimum required components.
   *
   * @generated from field: anduril.entitymanager.v1.Template template = 2;
   */
  template = Template.INVALID;

  constructor(data?: PartialMessage<Ontology>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.Ontology";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "descriptors", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "krn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "platform_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "specific_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "template", kind: "enum", T: proto3.getEnumType(Template) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ontology {
    return new Ontology().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ontology {
    return new Ontology().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ontology {
    return new Ontology().fromJsonString(jsonString, options);
  }

  static equals(a: Ontology | PlainMessage<Ontology> | undefined, b: Ontology | PlainMessage<Ontology> | undefined): boolean {
    return proto3.util.equals(Ontology, a, b);
  }
}

