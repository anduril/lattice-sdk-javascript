// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/entitymanager/v1/group.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Details related to grouping for this entity
 *
 * @generated from message anduril.entitymanager.v1.GroupDetails
 */
export class GroupDetails extends Message<GroupDetails> {
  /**
   * @generated from oneof anduril.entitymanager.v1.GroupDetails.group_type
   */
  groupType: {
    /**
     * @generated from field: anduril.entitymanager.v1.Team team = 1;
     */
    value: Team;
    case: "team";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GroupDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.GroupDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team", kind: "message", T: Team, oneof: "group_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupDetails {
    return new GroupDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupDetails {
    return new GroupDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupDetails {
    return new GroupDetails().fromJsonString(jsonString, options);
  }

  static equals(a: GroupDetails | PlainMessage<GroupDetails> | undefined, b: GroupDetails | PlainMessage<GroupDetails> | undefined): boolean {
    return proto3.util.equals(GroupDetails, a, b);
  }
}

/**
 * Describes a Team group type. Comprised of autonomous assets where an asset
 * in a Team can only be a part of a single Team at a time.
 *
 * @generated from message anduril.entitymanager.v1.Team
 */
export class Team extends Message<Team> {
  constructor(data?: PartialMessage<Team>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.Team";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Team {
    return new Team().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Team {
    return new Team().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Team {
    return new Team().fromJsonString(jsonString, options);
  }

  static equals(a: Team | PlainMessage<Team> | undefined, b: Team | PlainMessage<Team> | undefined): boolean {
    return proto3.util.equals(Team, a, b);
  }
}

