// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/entitymanager/v1/media.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum anduril.entitymanager.v1.MediaType
 */
export enum MediaType {
  /**
   * @generated from enum value: MEDIA_TYPE_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: MEDIA_TYPE_THUMBNAIL = 1;
   */
  THUMBNAIL = 1,

  /**
   * @generated from enum value: MEDIA_TYPE_IMAGE = 2;
   */
  IMAGE = 2,

  /**
   * @generated from enum value: MEDIA_TYPE_VIDEO = 3;
   */
  VIDEO = 3,

  /**
   * @generated from enum value: MEDIA_TYPE_SLIPPY_TILES = 4;
   */
  SLIPPY_TILES = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(MediaType)
proto3.util.setEnumType(MediaType, "anduril.entitymanager.v1.MediaType", [
  { no: 0, name: "MEDIA_TYPE_INVALID" },
  { no: 1, name: "MEDIA_TYPE_THUMBNAIL" },
  { no: 2, name: "MEDIA_TYPE_IMAGE" },
  { no: 3, name: "MEDIA_TYPE_VIDEO" },
  { no: 4, name: "MEDIA_TYPE_SLIPPY_TILES" },
]);

/**
 * Media associated with an entity.
 *
 * @generated from message anduril.entitymanager.v1.Media
 */
export class Media extends Message<Media> {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.MediaItem media = 1;
   */
  media: MediaItem[] = [];

  constructor(data?: PartialMessage<Media>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.Media";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media", kind: "message", T: MediaItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Media {
    return new Media().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Media {
    return new Media().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Media {
    return new Media().fromJsonString(jsonString, options);
  }

  static equals(a: Media | PlainMessage<Media> | undefined, b: Media | PlainMessage<Media> | undefined): boolean {
    return proto3.util.equals(Media, a, b);
  }
}

/**
 * @generated from message anduril.entitymanager.v1.MediaItem
 */
export class MediaItem extends Message<MediaItem> {
  /**
   * To Be Deprecated, use relative_path.
   * The url where the media related to an entity can be accessed
   *
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: anduril.entitymanager.v1.MediaType type = 2;
   */
  type = MediaType.INVALID;

  /**
   * The relative path where the media related to an entity can be accessed when used to query against a blobs service
   * node.
   *
   * @generated from field: string relative_path = 3;
   */
  relativePath = "";

  constructor(data?: PartialMessage<MediaItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.MediaItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(MediaType) },
    { no: 3, name: "relative_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaItem {
    return new MediaItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaItem {
    return new MediaItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaItem {
    return new MediaItem().fromJsonString(jsonString, options);
  }

  static equals(a: MediaItem | PlainMessage<MediaItem> | undefined, b: MediaItem | PlainMessage<MediaItem> | undefined): boolean {
    return proto3.util.equals(MediaItem, a, b);
  }
}

