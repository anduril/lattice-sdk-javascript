// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/entitymanager/v1/health_status.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Enumeration of possible connection states.
 *
 * @generated from enum anduril.entitymanager.v1.ConnectionStatus
 */
export declare enum ConnectionStatus {
  /**
   * @generated from enum value: CONNECTION_STATUS_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: CONNECTION_STATUS_ONLINE = 1;
   */
  ONLINE = 1,

  /**
   * @generated from enum value: CONNECTION_STATUS_OFFLINE = 2;
   */
  OFFLINE = 2,
}

/**
 * Enumeration of possible health states.
 *
 * @generated from enum anduril.entitymanager.v1.HealthStatus
 */
export declare enum HealthStatus {
  /**
   * @generated from enum value: HEALTH_STATUS_INVALID = 0;
   */
  INVALID = 0,

  /**
   * Indicates that the component is operating as intended.
   *
   * @generated from enum value: HEALTH_STATUS_HEALTHY = 1;
   */
  HEALTHY = 1,

  /**
   * Indicates that the component is at risk of transitioning into a HEALTH_STATUS_FAIL
   * state or that the component is operating in a degraded state.
   *
   * @generated from enum value: HEALTH_STATUS_WARN = 2;
   */
  WARN = 2,

  /**
   * Indicates that the component is not functioning as intended.
   *
   * @generated from enum value: HEALTH_STATUS_FAIL = 3;
   */
  FAIL = 3,

  /**
   * Indicates that the component is offline.
   *
   * @generated from enum value: HEALTH_STATUS_OFFLINE = 4;
   */
  OFFLINE = 4,

  /**
   * Indicates that the component is not yet functioning, but it is transitioning into a
   * HEALTH_STATUS_HEALTHY state. A component should only report this state temporarily.
   *
   * @generated from enum value: HEALTH_STATUS_NOT_READY = 5;
   */
  NOT_READY = 5,
}

/**
 * Alerts are categorized into one of three levels - Warnings, Cautions, and Advisories (WCAs).
 *
 * @generated from enum anduril.entitymanager.v1.AlertLevel
 */
export declare enum AlertLevel {
  /**
   * @generated from enum value: ALERT_LEVEL_INVALID = 0;
   */
  INVALID = 0,

  /**
   * For conditions that require awareness and may require subsequent response.
   *
   * @generated from enum value: ALERT_LEVEL_ADVISORY = 1;
   */
  ADVISORY = 1,

  /**
   * For conditions that require immediate awareness and subsequent response.
   *
   * @generated from enum value: ALERT_LEVEL_CAUTION = 2;
   */
  CAUTION = 2,

  /**
   * For conditions that require immediate awareness and response.
   *
   * @generated from enum value: ALERT_LEVEL_WARNING = 3;
   */
  WARNING = 3,
}

/**
 * A message describing the component's health status.
 *
 * @generated from message anduril.entitymanager.v1.ComponentMessage
 */
export declare class ComponentMessage extends Message<ComponentMessage> {
  /**
   * The status associated with this message.
   *
   * @generated from field: anduril.entitymanager.v1.HealthStatus status = 1;
   */
  status: HealthStatus;

  /**
   * The human-readable content of the message.
   *
   * @generated from field: string message = 2;
   */
  message: string;

  constructor(data?: PartialMessage<ComponentMessage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.ComponentMessage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentMessage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentMessage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentMessage;

  static equals(a: ComponentMessage | PlainMessage<ComponentMessage> | undefined, b: ComponentMessage | PlainMessage<ComponentMessage> | undefined): boolean;
}

/**
 * Health of an individual component.
 *
 * @generated from message anduril.entitymanager.v1.ComponentHealth
 */
export declare class ComponentHealth extends Message<ComponentHealth> {
  /**
   * Consistent internal ID for this component.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Display name for this component.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Health for this component.
   *
   * @generated from field: anduril.entitymanager.v1.HealthStatus health = 3;
   */
  health: HealthStatus;

  /**
   * Human-readable describing the component state. These messages should be understandable by end users.
   *
   * @generated from field: repeated anduril.entitymanager.v1.ComponentMessage messages = 4;
   */
  messages: ComponentMessage[];

  /**
   * The last update time for this specific component.
   * If this timestamp is unset, the data is assumed to be most recent
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;

  constructor(data?: PartialMessage<ComponentHealth>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.ComponentHealth";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentHealth;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentHealth;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentHealth;

  static equals(a: ComponentHealth | PlainMessage<ComponentHealth> | undefined, b: ComponentHealth | PlainMessage<ComponentHealth> | undefined): boolean;
}

/**
 * General health of the entity as reported by the entity.
 *
 * @generated from message anduril.entitymanager.v1.Health
 */
export declare class Health extends Message<Health> {
  /**
   * Status indicating whether the entity is able to communicate with Entity Manager.
   *
   * @generated from field: anduril.entitymanager.v1.ConnectionStatus connection_status = 1;
   */
  connectionStatus: ConnectionStatus;

  /**
   * Top-level health status; typically a roll-up of individual component healths.
   *
   * @generated from field: anduril.entitymanager.v1.HealthStatus health_status = 2;
   */
  healthStatus: HealthStatus;

  /**
   * Health of individual components running on this Entity.
   *
   * @generated from field: repeated anduril.entitymanager.v1.ComponentHealth components = 3;
   */
  components: ComponentHealth[];

  /**
   * The update time for the top-level health information.
   * If this timestamp is unset, the data is assumed to be most recent
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * Active alerts indicate a critical change in system state sent by the asset
   * that must be made known to an operator or consumer of the common operating picture.
   * Alerts are different from ComponentHealth messages--an active alert does not necessarily
   * indicate a component is in an unhealthy state. For example, an asset may trigger
   * an active alert based on fuel levels running low. Alerts should be removed from this list when their conditions
   * are cleared. In other words, only active alerts should be reported here.
   *
   * @generated from field: repeated anduril.entitymanager.v1.Alert active_alerts = 5;
   */
  activeAlerts: Alert[];

  constructor(data?: PartialMessage<Health>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Health";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Health;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Health;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Health;

  static equals(a: Health | PlainMessage<Health> | undefined, b: Health | PlainMessage<Health> | undefined): boolean;
}

/**
 * An alert informs operators of critical events related to system performance and mission
 * execution. An alert is produced as a result of one or more alert conditions.
 *
 * @generated from message anduril.entitymanager.v1.Alert
 */
export declare class Alert extends Message<Alert> {
  /**
   * Short, machine-readable code that describes this alert. This code is intended to provide systems off-asset
   * with a lookup key to retrieve more detailed information about the alert.
   *
   * @generated from field: string alert_code = 1;
   */
  alertCode: string;

  /**
   * Human-readable description of this alert. The description is intended for display in the UI for human
   * understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
   * provides no dynamic substitutions, then prefer lookup based on alert_code.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Alert level (Warning, Caution, or Advisory).
   *
   * @generated from field: anduril.entitymanager.v1.AlertLevel level = 3;
   */
  level: AlertLevel;

  /**
   * Time at which this alert was activated.
   *
   * @generated from field: google.protobuf.Timestamp activated_time = 4;
   */
  activatedTime?: Timestamp;

  /**
   * Set of conditions which have activated this alert.
   *
   * @generated from field: repeated anduril.entitymanager.v1.AlertCondition active_conditions = 5;
   */
  activeConditions: AlertCondition[];

  constructor(data?: PartialMessage<Alert>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Alert";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Alert;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Alert;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Alert;

  static equals(a: Alert | PlainMessage<Alert> | undefined, b: Alert | PlainMessage<Alert> | undefined): boolean;
}

/**
 * A condition which may trigger an alert.
 *
 * @generated from message anduril.entitymanager.v1.AlertCondition
 */
export declare class AlertCondition extends Message<AlertCondition> {
  /**
   * Short, machine-readable code that describes this condition. This code is intended to provide systems off-asset
   * with a lookup key to retrieve more detailed information about the condition.
   *
   * @generated from field: string condition_code = 1;
   */
  conditionCode: string;

  /**
   * Human-readable description of this condition. The description is intended for display in the UI for human
   * understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
   * provides no dynamic substitutions, then prefer lookup based on condition_code.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  constructor(data?: PartialMessage<AlertCondition>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.AlertCondition";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertCondition;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertCondition;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertCondition;

  static equals(a: AlertCondition | PlainMessage<AlertCondition> | undefined, b: AlertCondition | PlainMessage<AlertCondition> | undefined): boolean;
}

