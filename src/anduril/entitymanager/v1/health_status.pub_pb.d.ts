// @generated by protoc-gen-es v2.2.0
// @generated from file anduril/entitymanager/v1/health_status.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file anduril/entitymanager/v1/health_status.pub.proto.
 */
export declare const file_anduril_entitymanager_v1_health_status_pub: GenFile;

/**
 * A message describing the component's health status.
 *
 * @generated from message anduril.entitymanager.v1.ComponentMessage
 */
export declare type ComponentMessage = Message<"anduril.entitymanager.v1.ComponentMessage"> & {
  /**
   * The status associated with this message.
   *
   * @generated from field: anduril.entitymanager.v1.HealthStatus status = 1;
   */
  status: HealthStatus;

  /**
   * The human-readable content of the message.
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message anduril.entitymanager.v1.ComponentMessage.
 * Use `create(ComponentMessageSchema)` to create a new message.
 */
export declare const ComponentMessageSchema: GenMessage<ComponentMessage>;

/**
 * Health of an individual component.
 *
 * @generated from message anduril.entitymanager.v1.ComponentHealth
 */
export declare type ComponentHealth = Message<"anduril.entitymanager.v1.ComponentHealth"> & {
  /**
   * Consistent internal ID for this component.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Display name for this component.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Health for this component.
   *
   * @generated from field: anduril.entitymanager.v1.HealthStatus health = 3;
   */
  health: HealthStatus;

  /**
   * Human-readable describing the component state. These messages should be understandable by end users.
   *
   * @generated from field: repeated anduril.entitymanager.v1.ComponentMessage messages = 4;
   */
  messages: ComponentMessage[];

  /**
   * The last update time for this specific component.
   * If this timestamp is unset, the data is assumed to be most recent
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;
};

/**
 * Describes the message anduril.entitymanager.v1.ComponentHealth.
 * Use `create(ComponentHealthSchema)` to create a new message.
 */
export declare const ComponentHealthSchema: GenMessage<ComponentHealth>;

/**
 * General health of the entity as reported by the entity.
 *
 * @generated from message anduril.entitymanager.v1.Health
 */
export declare type Health = Message<"anduril.entitymanager.v1.Health"> & {
  /**
   * Status indicating whether the entity is able to communicate with Entity Manager.
   *
   * @generated from field: anduril.entitymanager.v1.ConnectionStatus connection_status = 1;
   */
  connectionStatus: ConnectionStatus;

  /**
   * Top-level health status; typically a roll-up of individual component healths.
   *
   * @generated from field: anduril.entitymanager.v1.HealthStatus health_status = 2;
   */
  healthStatus: HealthStatus;

  /**
   * Health of individual components running on this Entity.
   *
   * @generated from field: repeated anduril.entitymanager.v1.ComponentHealth components = 3;
   */
  components: ComponentHealth[];

  /**
   * The update time for the top-level health information.
   * If this timestamp is unset, the data is assumed to be most recent
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * Active alerts indicate a critical change in system state sent by the asset
   * that must be made known to an operator or consumer of the common operating picture.
   * Alerts are different from ComponentHealth messages--an active alert does not necessarily
   * indicate a component is in an unhealthy state. For example, an asset may trigger
   * an active alert based on fuel levels running low. Alerts should be removed from this list when their conditions
   * are cleared. In other words, only active alerts should be reported here.
   *
   * @generated from field: repeated anduril.entitymanager.v1.Alert active_alerts = 5;
   */
  activeAlerts: Alert[];
};

/**
 * Describes the message anduril.entitymanager.v1.Health.
 * Use `create(HealthSchema)` to create a new message.
 */
export declare const HealthSchema: GenMessage<Health>;

/**
 * An alert informs operators of critical events related to system performance and mission
 * execution. An alert is produced as a result of one or more alert conditions.
 *
 * @generated from message anduril.entitymanager.v1.Alert
 */
export declare type Alert = Message<"anduril.entitymanager.v1.Alert"> & {
  /**
   * Short, machine-readable code that describes this alert. This code is intended to provide systems off-asset
   * with a lookup key to retrieve more detailed information about the alert.
   *
   * @generated from field: string alert_code = 1;
   */
  alertCode: string;

  /**
   * Human-readable description of this alert. The description is intended for display in the UI for human
   * understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
   * provides no dynamic substitutions, then prefer lookup based on alert_code.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Alert level (Warning, Caution, or Advisory).
   *
   * @generated from field: anduril.entitymanager.v1.AlertLevel level = 3;
   */
  level: AlertLevel;

  /**
   * Time at which this alert was activated.
   *
   * @generated from field: google.protobuf.Timestamp activated_time = 4;
   */
  activatedTime?: Timestamp;

  /**
   * Set of conditions which have activated this alert.
   *
   * @generated from field: repeated anduril.entitymanager.v1.AlertCondition active_conditions = 5;
   */
  activeConditions: AlertCondition[];
};

/**
 * Describes the message anduril.entitymanager.v1.Alert.
 * Use `create(AlertSchema)` to create a new message.
 */
export declare const AlertSchema: GenMessage<Alert>;

/**
 * A condition which may trigger an alert.
 *
 * @generated from message anduril.entitymanager.v1.AlertCondition
 */
export declare type AlertCondition = Message<"anduril.entitymanager.v1.AlertCondition"> & {
  /**
   * Short, machine-readable code that describes this condition. This code is intended to provide systems off-asset
   * with a lookup key to retrieve more detailed information about the condition.
   *
   * @generated from field: string condition_code = 1;
   */
  conditionCode: string;

  /**
   * Human-readable description of this condition. The description is intended for display in the UI for human
   * understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
   * provides no dynamic substitutions, then prefer lookup based on condition_code.
   *
   * @generated from field: string description = 2;
   */
  description: string;
};

/**
 * Describes the message anduril.entitymanager.v1.AlertCondition.
 * Use `create(AlertConditionSchema)` to create a new message.
 */
export declare const AlertConditionSchema: GenMessage<AlertCondition>;

/**
 * Enumeration of possible connection states.
 *
 * @generated from enum anduril.entitymanager.v1.ConnectionStatus
 */
export enum ConnectionStatus {
  /**
   * @generated from enum value: CONNECTION_STATUS_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: CONNECTION_STATUS_ONLINE = 1;
   */
  ONLINE = 1,

  /**
   * @generated from enum value: CONNECTION_STATUS_OFFLINE = 2;
   */
  OFFLINE = 2,
}

/**
 * Describes the enum anduril.entitymanager.v1.ConnectionStatus.
 */
export declare const ConnectionStatusSchema: GenEnum<ConnectionStatus>;

/**
 * Enumeration of possible health states.
 *
 * @generated from enum anduril.entitymanager.v1.HealthStatus
 */
export enum HealthStatus {
  /**
   * @generated from enum value: HEALTH_STATUS_INVALID = 0;
   */
  INVALID = 0,

  /**
   * Indicates that the component is operating as intended.
   *
   * @generated from enum value: HEALTH_STATUS_HEALTHY = 1;
   */
  HEALTHY = 1,

  /**
   * Indicates that the component is at risk of transitioning into a HEALTH_STATUS_FAIL
   * state or that the component is operating in a degraded state.
   *
   * @generated from enum value: HEALTH_STATUS_WARN = 2;
   */
  WARN = 2,

  /**
   * Indicates that the component is not functioning as intended.
   *
   * @generated from enum value: HEALTH_STATUS_FAIL = 3;
   */
  FAIL = 3,

  /**
   * Indicates that the component is offline.
   *
   * @generated from enum value: HEALTH_STATUS_OFFLINE = 4;
   */
  OFFLINE = 4,

  /**
   * Indicates that the component is not yet functioning, but it is transitioning into a
   * HEALTH_STATUS_HEALTHY state. A component should only report this state temporarily.
   *
   * @generated from enum value: HEALTH_STATUS_NOT_READY = 5;
   */
  NOT_READY = 5,
}

/**
 * Describes the enum anduril.entitymanager.v1.HealthStatus.
 */
export declare const HealthStatusSchema: GenEnum<HealthStatus>;

/**
 * Alerts are categorized into one of three levels - Warnings, Cautions, and Advisories (WCAs).
 *
 * @generated from enum anduril.entitymanager.v1.AlertLevel
 */
export enum AlertLevel {
  /**
   * @generated from enum value: ALERT_LEVEL_INVALID = 0;
   */
  INVALID = 0,

  /**
   * For conditions that require awareness and may require subsequent response.
   *
   * @generated from enum value: ALERT_LEVEL_ADVISORY = 1;
   */
  ADVISORY = 1,

  /**
   * For conditions that require immediate awareness and subsequent response.
   *
   * @generated from enum value: ALERT_LEVEL_CAUTION = 2;
   */
  CAUTION = 2,

  /**
   * For conditions that require immediate awareness and response.
   *
   * @generated from enum value: ALERT_LEVEL_WARNING = 3;
   */
  WARNING = 3,
}

/**
 * Describes the enum anduril.entitymanager.v1.AlertLevel.
 */
export declare const AlertLevelSchema: GenEnum<AlertLevel>;

