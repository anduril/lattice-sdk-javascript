// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/entitymanager/v1/entity_manager_api.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const { proto3, Timestamp } = require("@bufbuild/protobuf");
const { Entity, Provenance } = require("./entity.pub_pb.js");
const { Statement } = require("./filter.pub_pb.js");
const { RateLimit } = require("./rate_limit.pub_pb.js");
const { OverrideStatus } = require("./types.pub_pb.js");

/**
 * The type of entity event.
 *
 * @generated from enum anduril.entitymanager.v1.EventType
 */
const EventType = proto3.makeEnum(
  "anduril.entitymanager.v1.EventType",
  [
    {no: 0, name: "EVENT_TYPE_INVALID", localName: "INVALID"},
    {no: 1, name: "EVENT_TYPE_CREATED", localName: "CREATED"},
    {no: 2, name: "EVENT_TYPE_UPDATE", localName: "UPDATE"},
    {no: 3, name: "EVENT_TYPE_DELETED", localName: "DELETED"},
    {no: 4, name: "EVENT_TYPE_PREEXISTING", localName: "PREEXISTING"},
    {no: 5, name: "EVENT_TYPE_POST_EXPIRY_OVERRIDE", localName: "POST_EXPIRY_OVERRIDE"},
  ],
);

/**
 * @generated from message anduril.entitymanager.v1.GetEntityRequest
 */
const GetEntityRequest = proto3.makeMessageType(
  "anduril.entitymanager.v1.GetEntityRequest",
  () => [
    { no: 1, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message anduril.entitymanager.v1.GetEntityResponse
 */
const GetEntityResponse = proto3.makeMessageType(
  "anduril.entitymanager.v1.GetEntityResponse",
  () => [
    { no: 1, name: "entity", kind: "message", T: Entity },
  ],
);

/**
 * @generated from message anduril.entitymanager.v1.StreamEntityComponentsRequest
 */
const StreamEntityComponentsRequest = proto3.makeMessageType(
  "anduril.entitymanager.v1.StreamEntityComponentsRequest",
  () => [
    { no: 1, name: "components_to_include", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "include_all_components", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "filter", kind: "message", T: Statement },
    { no: 4, name: "rate_limit", kind: "message", T: RateLimit },
    { no: 5, name: "heartbeat_period_millis", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "preexisting_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * response stream will be fed all matching pre-existing live entities as CREATED, plus any new events ongoing.
 *
 * @generated from message anduril.entitymanager.v1.StreamEntityComponentsResponse
 */
const StreamEntityComponentsResponse = proto3.makeMessageType(
  "anduril.entitymanager.v1.StreamEntityComponentsResponse",
  () => [
    { no: 1, name: "entity_event", kind: "message", T: EntityEvent },
    { no: 2, name: "heartbeat", kind: "message", T: Heartbeat },
  ],
);

/**
 * @generated from message anduril.entitymanager.v1.PutEntityRequest
 */
const PutEntityRequest = proto3.makeMessageType(
  "anduril.entitymanager.v1.PutEntityRequest",
  () => [
    { no: 1, name: "entity", kind: "message", T: Entity },
    { no: 2, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message anduril.entitymanager.v1.PutEntityResponse
 */
const PutEntityResponse = proto3.makeMessageType(
  "anduril.entitymanager.v1.PutEntityResponse",
  () => [
    { no: 1, name: "entity", kind: "message", T: Entity },
  ],
);

/**
 * @generated from message anduril.entitymanager.v1.PublishEntitiesRequest
 */
const PublishEntitiesRequest = proto3.makeMessageType(
  "anduril.entitymanager.v1.PublishEntitiesRequest",
  () => [
    { no: 1, name: "entity", kind: "message", T: Entity },
  ],
);

/**
 * After the stream is closed the server will return an empty message indicating success. If any streamed message
 * caused an error then the stream is immediately terminated and an error code is returned.
 *
 * @generated from message anduril.entitymanager.v1.PublishEntitiesResponse
 */
const PublishEntitiesResponse = proto3.makeMessageType(
  "anduril.entitymanager.v1.PublishEntitiesResponse",
  [],
);

/**
 * @generated from message anduril.entitymanager.v1.OverrideEntityRequest
 */
const OverrideEntityRequest = proto3.makeMessageType(
  "anduril.entitymanager.v1.OverrideEntityRequest",
  () => [
    { no: 1, name: "entity", kind: "message", T: Entity },
    { no: 2, name: "field_path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "provenance", kind: "message", T: Provenance },
  ],
);

/**
 * @generated from message anduril.entitymanager.v1.OverrideEntityResponse
 */
const OverrideEntityResponse = proto3.makeMessageType(
  "anduril.entitymanager.v1.OverrideEntityResponse",
  () => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(OverrideStatus) },
  ],
);

/**
 * @generated from message anduril.entitymanager.v1.RemoveEntityOverrideRequest
 */
const RemoveEntityOverrideRequest = proto3.makeMessageType(
  "anduril.entitymanager.v1.RemoveEntityOverrideRequest",
  () => [
    { no: 1, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "field_path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * void response but with placeholder for future optional fields.
 *
 * @generated from message anduril.entitymanager.v1.RemoveEntityOverrideResponse
 */
const RemoveEntityOverrideResponse = proto3.makeMessageType(
  "anduril.entitymanager.v1.RemoveEntityOverrideResponse",
  [],
);

/**
 * @generated from message anduril.entitymanager.v1.DeleteEntityRequest
 */
const DeleteEntityRequest = proto3.makeMessageType(
  "anduril.entitymanager.v1.DeleteEntityRequest",
  () => [
    { no: 1, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * void response but with placeholder for future optional fields.
 *
 * @generated from message anduril.entitymanager.v1.DeleteEntityResponse
 */
const DeleteEntityResponse = proto3.makeMessageType(
  "anduril.entitymanager.v1.DeleteEntityResponse",
  [],
);

/**
 * Event representing some type of entity change.
 *
 * @generated from message anduril.entitymanager.v1.EntityEvent
 */
const EntityEvent = proto3.makeMessageType(
  "anduril.entitymanager.v1.EntityEvent",
  () => [
    { no: 1, name: "event_type", kind: "enum", T: proto3.getEnumType(EventType) },
    { no: 2, name: "time", kind: "message", T: Timestamp },
    { no: 3, name: "entity", kind: "message", T: Entity },
  ],
);

/**
 * A message that is periodically sent on the stream for keep-alive behaviour.
 *
 * @generated from message anduril.entitymanager.v1.Heartbeat
 */
const Heartbeat = proto3.makeMessageType(
  "anduril.entitymanager.v1.Heartbeat",
  () => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
  ],
);


exports.EventType = EventType;
exports.GetEntityRequest = GetEntityRequest;
exports.GetEntityResponse = GetEntityResponse;
exports.StreamEntityComponentsRequest = StreamEntityComponentsRequest;
exports.StreamEntityComponentsResponse = StreamEntityComponentsResponse;
exports.PutEntityRequest = PutEntityRequest;
exports.PutEntityResponse = PutEntityResponse;
exports.PublishEntitiesRequest = PublishEntitiesRequest;
exports.PublishEntitiesResponse = PublishEntitiesResponse;
exports.OverrideEntityRequest = OverrideEntityRequest;
exports.OverrideEntityResponse = OverrideEntityResponse;
exports.RemoveEntityOverrideRequest = RemoveEntityOverrideRequest;
exports.RemoveEntityOverrideResponse = RemoveEntityOverrideResponse;
exports.DeleteEntityRequest = DeleteEntityRequest;
exports.DeleteEntityResponse = DeleteEntityResponse;
exports.EntityEvent = EntityEvent;
exports.Heartbeat = Heartbeat;
