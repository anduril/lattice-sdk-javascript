// @generated by protoc-gen-es v2.2.0 with parameter "import_extension=js"
// @generated from file anduril/entitymanager/v1/supplies.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { Classification } from "./classification.pub_pb.js";

/**
 * Describes the file anduril/entitymanager/v1/supplies.pub.proto.
 */
export declare const file_anduril_entitymanager_v1_supplies_pub: GenFile;

/**
 * Represents the state of supplies associated with an entity (available but not in condition to use immediately)
 *
 * @generated from message anduril.entitymanager.v1.Supplies
 */
export declare type Supplies = Message<"anduril.entitymanager.v1.Supplies"> & {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.Fuel fuel = 2;
   */
  fuel: Fuel[];
};

/**
 * Describes the message anduril.entitymanager.v1.Supplies.
 * Use `create(SuppliesSchema)` to create a new message.
 */
export declare const SuppliesSchema: GenMessage<Supplies>;

/**
 * Fuel describes an entity's repository of fuels stores including current amount, operational requirements, and maximum authorized capacity
 *
 * @generated from message anduril.entitymanager.v1.Fuel
 */
export declare type Fuel = Message<"anduril.entitymanager.v1.Fuel"> & {
  /**
   * unique fuel identifier
   *
   * @generated from field: string fuel_id = 1;
   */
  fuelId: string;

  /**
   * long form name of the fuel source.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * timestamp the information was reported
   *
   * @generated from field: google.protobuf.Timestamp reported_date = 3;
   */
  reportedDate?: Timestamp;

  /**
   * amount of gallons on hand
   *
   * @generated from field: uint32 amount_gallons = 4;
   */
  amountGallons: number;

  /**
   * how much the asset is allowed to have available (in gallons)
   *
   * @generated from field: uint32 max_authorized_capacity_gallons = 5;
   */
  maxAuthorizedCapacityGallons: number;

  /**
   * minimum required for operations (in gallons)
   *
   * @generated from field: uint32 operational_requirement_gallons = 6;
   */
  operationalRequirementGallons: number;

  /**
   * fuel in a single asset may have different levels of classification
   * use case: fuel for a SECRET asset while diesel fuel may be UNCLASSIFIED
   *
   * @generated from field: anduril.entitymanager.v1.Classification data_classification = 7;
   */
  dataClassification?: Classification;

  /**
   * source of information
   *
   * @generated from field: string data_source = 8;
   */
  dataSource: string;
};

/**
 * Describes the message anduril.entitymanager.v1.Fuel.
 * Use `create(FuelSchema)` to create a new message.
 */
export declare const FuelSchema: GenMessage<Fuel>;

