// @generated by protoc-gen-es v2.2.0 with parameter "import_extension=js"
// @generated from file anduril/entitymanager/v1/signal.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Pose, TMat2 } from "../../type/coords.pub_pb.js";

/**
 * Describes the file anduril/entitymanager/v1/signal.pub.proto.
 */
export declare const file_anduril_entitymanager_v1_signal_pub: GenFile;

/**
 * A component that describes an entity's signal characteristics.
 *
 * @generated from message anduril.entitymanager.v1.Signal
 */
export declare type Signal = Message<"anduril.entitymanager.v1.Signal"> & {
  /**
   * Indicates either a frequency range or a center frequency of this signal.
   *
   * @generated from oneof anduril.entitymanager.v1.Signal.frequency_measurement
   */
  frequencyMeasurement: {
    /**
     * @generated from field: anduril.entitymanager.v1.Frequency frequency_center = 1;
     */
    value: Frequency;
    case: "frequencyCenter";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.FrequencyRange frequency_range = 2;
     */
    value: FrequencyRange;
    case: "frequencyRange";
  } | { case: undefined; value?: undefined };

  /**
   * Indicates the bandwidth of a signal (Hz).
   *
   * @generated from field: google.protobuf.DoubleValue bandwidth_hz = 3;
   */
  bandwidthHz?: number;

  /**
   * Indicates the signal to noise (SNR) of this signal.
   *
   * @generated from field: google.protobuf.DoubleValue signal_to_noise_ratio = 4;
   */
  signalToNoiseRatio?: number;

  /**
   * Indicates the signal report.
   *
   * @generated from oneof anduril.entitymanager.v1.Signal.report
   */
  report: {
    /**
     * @generated from field: anduril.entitymanager.v1.LineOfBearing line_of_bearing = 5;
     */
    value: LineOfBearing;
    case: "lineOfBearing";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.Fixed fixed = 6;
     */
    value: Fixed;
    case: "fixed";
  } | { case: undefined; value?: undefined };

  /**
   * Emitter notations associated with this entity.
   *
   * @generated from field: repeated anduril.entitymanager.v1.EmitterNotation emitter_notations = 7;
   */
  emitterNotations: EmitterNotation[];

  /**
   * length in time of a single pulse
   *
   * @generated from field: google.protobuf.DoubleValue pulse_width_s = 8;
   */
  pulseWidthS?: number;

  /**
   * length in time between the start of two pulses
   *
   * @generated from field: anduril.entitymanager.v1.PulseRepetitionInterval pulse_repetition_interval = 9;
   */
  pulseRepetitionInterval?: PulseRepetitionInterval;

  /**
   * describes how a signal is observing the environment
   *
   * @generated from field: anduril.entitymanager.v1.ScanCharacteristics scan_characteristics = 11;
   */
  scanCharacteristics?: ScanCharacteristics;
};

/**
 * Describes the message anduril.entitymanager.v1.Signal.
 * Use `create(SignalSchema)` to create a new message.
 */
export declare const SignalSchema: GenMessage<Signal>;

/**
 * A representation of a single emitter notation.
 *
 * @generated from message anduril.entitymanager.v1.EmitterNotation
 */
export declare type EmitterNotation = Message<"anduril.entitymanager.v1.EmitterNotation"> & {
  /**
   * @generated from field: string emitter_notation = 1;
   */
  emitterNotation: string;

  /**
   * confidence as a percentage that the emitter notation in this component is accurate
   *
   * @generated from field: google.protobuf.DoubleValue confidence = 2;
   */
  confidence?: number;
};

/**
 * Describes the message anduril.entitymanager.v1.EmitterNotation.
 * Use `create(EmitterNotationSchema)` to create a new message.
 */
export declare const EmitterNotationSchema: GenMessage<EmitterNotation>;

/**
 * A component that describes some measured value with error.
 *
 * @generated from message anduril.entitymanager.v1.Measurement
 */
export declare type Measurement = Message<"anduril.entitymanager.v1.Measurement"> & {
  /**
   * The value of the measurement.
   *
   * @generated from field: google.protobuf.DoubleValue value = 1;
   */
  value?: number;

  /**
   * Estimated one standard deviation in same unit as the value.
   *
   * @generated from field: google.protobuf.DoubleValue sigma = 2;
   */
  sigma?: number;
};

/**
 * Describes the message anduril.entitymanager.v1.Measurement.
 * Use `create(MeasurementSchema)` to create a new message.
 */
export declare const MeasurementSchema: GenMessage<Measurement>;

/**
 * A component for describing frequency.
 *
 * @generated from message anduril.entitymanager.v1.Frequency
 */
export declare type Frequency = Message<"anduril.entitymanager.v1.Frequency"> & {
  /**
   * Indicates a frequency of a signal (Hz) with its standard deviation.
   *
   * @generated from field: anduril.entitymanager.v1.Measurement frequency_hz = 1;
   */
  frequencyHz?: Measurement;
};

/**
 * Describes the message anduril.entitymanager.v1.Frequency.
 * Use `create(FrequencySchema)` to create a new message.
 */
export declare const FrequencySchema: GenMessage<Frequency>;

/**
 * A component to represent a frequency range.
 *
 * @generated from message anduril.entitymanager.v1.FrequencyRange
 */
export declare type FrequencyRange = Message<"anduril.entitymanager.v1.FrequencyRange"> & {
  /**
   * Indicates the lowest measured frequency of a signal (Hz).
   *
   * @generated from field: anduril.entitymanager.v1.Frequency minimum_frequency_hz = 1;
   */
  minimumFrequencyHz?: Frequency;

  /**
   * Indicates the maximum measured frequency of a signal (Hz).
   *
   * @generated from field: anduril.entitymanager.v1.Frequency maximum_frequency_hz = 2;
   */
  maximumFrequencyHz?: Frequency;
};

/**
 * Describes the message anduril.entitymanager.v1.FrequencyRange.
 * Use `create(FrequencyRangeSchema)` to create a new message.
 */
export declare const FrequencyRangeSchema: GenMessage<FrequencyRange>;

/**
 * A line of bearing of a signal.
 *
 * @generated from message anduril.entitymanager.v1.LineOfBearing
 */
export declare type LineOfBearing = Message<"anduril.entitymanager.v1.LineOfBearing"> & {
  /**
   * The direction pointing from this entity to the detection
   *
   * @generated from field: anduril.entitymanager.v1.AngleOfArrival angle_of_arrival = 3;
   */
  angleOfArrival?: AngleOfArrival;

  /**
   * The range of the detection in the direction defined by the angle of arrival
   *
   * @generated from oneof anduril.entitymanager.v1.LineOfBearing.detection_range
   */
  detectionRange: {
    /**
     * The estimated distance of the detection
     *
     * @generated from field: anduril.entitymanager.v1.Measurement range_estimate_m = 4;
     */
    value: Measurement;
    case: "rangeEstimateM";
  } | {
    /**
     * The maximum distance of the detection
     *
     * @generated from field: anduril.entitymanager.v1.Measurement max_range_m = 5;
     */
    value: Measurement;
    case: "maxRangeM";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entitymanager.v1.LineOfBearing.
 * Use `create(LineOfBearingSchema)` to create a new message.
 */
export declare const LineOfBearingSchema: GenMessage<LineOfBearing>;

/**
 * The direction from which the signal is received
 *
 * @generated from message anduril.entitymanager.v1.AngleOfArrival
 */
export declare type AngleOfArrival = Message<"anduril.entitymanager.v1.AngleOfArrival"> & {
  /**
   * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
   * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
   *
   * @generated from field: anduril.type.Pose relative_pose = 1;
   */
  relativePose?: Pose;

  /**
   * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
   * and elevation is positive down from the FL/XY plane.
   * mxx = bearing variance in rad^2
   * mxy = bearing/elevation covariance in rad^2
   * myy = elevation variance in rad^2
   *
   * @generated from field: anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2;
   */
  bearingElevationCovarianceRad2?: TMat2;
};

/**
 * Describes the message anduril.entitymanager.v1.AngleOfArrival.
 * Use `create(AngleOfArrivalSchema)` to create a new message.
 */
export declare const AngleOfArrivalSchema: GenMessage<AngleOfArrival>;

/**
 * A fix of a signal. No extra fields but it is expected that location should be populated when using this report.
 *
 * @generated from message anduril.entitymanager.v1.Fixed
 */
export declare type Fixed = Message<"anduril.entitymanager.v1.Fixed"> & {
};

/**
 * Describes the message anduril.entitymanager.v1.Fixed.
 * Use `create(FixedSchema)` to create a new message.
 */
export declare const FixedSchema: GenMessage<Fixed>;

/**
 * A component that describe the length in time between two pulses
 *
 * @generated from message anduril.entitymanager.v1.PulseRepetitionInterval
 */
export declare type PulseRepetitionInterval = Message<"anduril.entitymanager.v1.PulseRepetitionInterval"> & {
  /**
   * @generated from field: anduril.entitymanager.v1.Measurement pulse_repetition_interval_s = 1;
   */
  pulseRepetitionIntervalS?: Measurement;
};

/**
 * Describes the message anduril.entitymanager.v1.PulseRepetitionInterval.
 * Use `create(PulseRepetitionIntervalSchema)` to create a new message.
 */
export declare const PulseRepetitionIntervalSchema: GenMessage<PulseRepetitionInterval>;

/**
 * A component that describes the scanning characteristics of a signal
 *
 * @generated from message anduril.entitymanager.v1.ScanCharacteristics
 */
export declare type ScanCharacteristics = Message<"anduril.entitymanager.v1.ScanCharacteristics"> & {
  /**
   * @generated from field: anduril.entitymanager.v1.ScanType scan_type = 1;
   */
  scanType: ScanType;

  /**
   * @generated from field: google.protobuf.DoubleValue scan_period_s = 2;
   */
  scanPeriodS?: number;
};

/**
 * Describes the message anduril.entitymanager.v1.ScanCharacteristics.
 * Use `create(ScanCharacteristicsSchema)` to create a new message.
 */
export declare const ScanCharacteristicsSchema: GenMessage<ScanCharacteristics>;

/**
 * Enumerates the possible scan types
 *
 * @generated from enum anduril.entitymanager.v1.ScanType
 */
export enum ScanType {
  /**
   * @generated from enum value: SCAN_TYPE_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: SCAN_TYPE_CIRCULAR = 1;
   */
  CIRCULAR = 1,

  /**
   * @generated from enum value: SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR = 2;
   */
  BIDIRECTIONAL_HORIZONTAL_SECTOR = 2,

  /**
   * @generated from enum value: SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR = 3;
   */
  BIDIRECTIONAL_VERTICAL_SECTOR = 3,

  /**
   * @generated from enum value: SCAN_TYPE_NON_SCANNING = 4;
   */
  NON_SCANNING = 4,

  /**
   * @generated from enum value: SCAN_TYPE_IRREGULAR = 5;
   */
  IRREGULAR = 5,

  /**
   * @generated from enum value: SCAN_TYPE_CONICAL = 6;
   */
  CONICAL = 6,

  /**
   * @generated from enum value: SCAN_TYPE_LOBE_SWITCHING = 7;
   */
  LOBE_SWITCHING = 7,

  /**
   * @generated from enum value: SCAN_TYPE_RASTER = 8;
   */
  RASTER = 8,

  /**
   * @generated from enum value: SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR = 9;
   */
  CIRCULAR_VERTICAL_SECTOR = 9,

  /**
   * @generated from enum value: SCAN_TYPE_CIRCULAR_CONICAL = 10;
   */
  CIRCULAR_CONICAL = 10,

  /**
   * @generated from enum value: SCAN_TYPE_SECTOR_CONICAL = 11;
   */
  SECTOR_CONICAL = 11,

  /**
   * @generated from enum value: SCAN_TYPE_AGILE_BEAM = 12;
   */
  AGILE_BEAM = 12,

  /**
   * @generated from enum value: SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR = 13;
   */
  UNIDIRECTIONAL_VERTICAL_SECTOR = 13,

  /**
   * @generated from enum value: SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR = 14;
   */
  UNIDIRECTIONAL_HORIZONTAL_SECTOR = 14,

  /**
   * @generated from enum value: SCAN_TYPE_UNIDIRECTIONAL_SECTOR = 15;
   */
  UNIDIRECTIONAL_SECTOR = 15,

  /**
   * @generated from enum value: SCAN_TYPE_BIDIRECTIONAL_SECTOR = 16;
   */
  BIDIRECTIONAL_SECTOR = 16,
}

/**
 * Describes the enum anduril.entitymanager.v1.ScanType.
 */
export declare const ScanTypeSchema: GenEnum<ScanType>;

