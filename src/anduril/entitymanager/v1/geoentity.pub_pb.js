// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/entitymanager/v1/geoentity.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const { DoubleValue, FloatValue, proto3 } = require("@bufbuild/protobuf");
const { Position } = require("./location.pub_pb.js");

/**
 * The type of geo entity.
 *
 * @generated from enum anduril.entitymanager.v1.GeoType
 */
const GeoType = proto3.makeEnum(
  "anduril.entitymanager.v1.GeoType",
  [
    {no: 0, name: "GEO_TYPE_INVALID", localName: "INVALID"},
    {no: 1, name: "GEO_TYPE_GENERAL", localName: "GENERAL"},
    {no: 2, name: "GEO_TYPE_HAZARD", localName: "HAZARD"},
    {no: 3, name: "GEO_TYPE_EMERGENCY", localName: "EMERGENCY"},
    {no: 5, name: "GEO_TYPE_ENGAGEMENT_ZONE", localName: "ENGAGEMENT_ZONE"},
    {no: 6, name: "GEO_TYPE_CONTROL_AREA", localName: "CONTROL_AREA"},
    {no: 7, name: "GEO_TYPE_BULLSEYE", localName: "BULLSEYE"},
  ],
);

/**
 * A component that describes a geo-entity.
 *
 * @generated from message anduril.entitymanager.v1.GeoDetails
 */
const GeoDetails = proto3.makeMessageType(
  "anduril.entitymanager.v1.GeoDetails",
  () => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(GeoType) },
  ],
);

/**
 * A component that describes the shape of a geo-entity.
 *
 * @generated from message anduril.entitymanager.v1.GeoShape
 */
const GeoShape = proto3.makeMessageType(
  "anduril.entitymanager.v1.GeoShape",
  () => [
    { no: 1, name: "point", kind: "message", T: GeoPoint, oneof: "shape" },
    { no: 2, name: "line", kind: "message", T: GeoLine, oneof: "shape" },
    { no: 3, name: "polygon", kind: "message", T: GeoPolygon, oneof: "shape" },
    { no: 4, name: "ellipse", kind: "message", T: GeoEllipse, oneof: "shape" },
    { no: 5, name: "ellipsoid", kind: "message", T: GeoEllipsoid, oneof: "shape" },
  ],
);

/**
 * A point shaped geo-entity.
 * See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2
 *
 * @generated from message anduril.entitymanager.v1.GeoPoint
 */
const GeoPoint = proto3.makeMessageType(
  "anduril.entitymanager.v1.GeoPoint",
  () => [
    { no: 1, name: "position", kind: "message", T: Position },
  ],
);

/**
 * A line shaped geo-entity.
 * See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.4
 *
 * @generated from message anduril.entitymanager.v1.GeoLine
 */
const GeoLine = proto3.makeMessageType(
  "anduril.entitymanager.v1.GeoLine",
  () => [
    { no: 1, name: "positions", kind: "message", T: Position, repeated: true },
  ],
);

/**
 * A polygon shaped geo-entity.
 * See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6, only canonical representations accepted
 *
 * @generated from message anduril.entitymanager.v1.GeoPolygon
 */
const GeoPolygon = proto3.makeMessageType(
  "anduril.entitymanager.v1.GeoPolygon",
  () => [
    { no: 1, name: "rings", kind: "message", T: LinearRing, repeated: true },
    { no: 2, name: "is_rectangle", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * An ellipse shaped geo-entity.
 * For a circle, the major and minor axis would be the same values.
 * This shape is NOT Geo-JSON compatible.
 *
 * @generated from message anduril.entitymanager.v1.GeoEllipse
 */
const GeoEllipse = proto3.makeMessageType(
  "anduril.entitymanager.v1.GeoEllipse",
  () => [
    { no: 2, name: "semi_major_axis_m", kind: "message", T: DoubleValue },
    { no: 3, name: "semi_minor_axis_m", kind: "message", T: DoubleValue },
    { no: 4, name: "orientation_d", kind: "message", T: DoubleValue },
    { no: 5, name: "height_m", kind: "message", T: DoubleValue },
  ],
);

/**
 * An ellipsoid shaped geo-entity.
 * Principal axis lengths are defined in entity body space
 * This shape is NOT Geo-JSON compatible.
 *
 * @generated from message anduril.entitymanager.v1.GeoEllipsoid
 */
const GeoEllipsoid = proto3.makeMessageType(
  "anduril.entitymanager.v1.GeoEllipsoid",
  () => [
    { no: 1, name: "forward_axis_m", kind: "message", T: DoubleValue },
    { no: 2, name: "side_axis_m", kind: "message", T: DoubleValue },
    { no: 3, name: "up_axis_m", kind: "message", T: DoubleValue },
  ],
);

/**
 * A closed ring of points. The first and last point must be the same.
 *
 * @generated from message anduril.entitymanager.v1.LinearRing
 */
const LinearRing = proto3.makeMessageType(
  "anduril.entitymanager.v1.LinearRing",
  () => [
    { no: 1, name: "points", kind: "message", T: Position, repeated: true },
    { no: 2, name: "positions", kind: "message", T: GeoPolygonPosition, repeated: true },
  ],
);

/**
 * A position in a GeoPolygon with an optional extruded height.
 *
 * @generated from message anduril.entitymanager.v1.GeoPolygonPosition
 */
const GeoPolygonPosition = proto3.makeMessageType(
  "anduril.entitymanager.v1.GeoPolygonPosition",
  () => [
    { no: 1, name: "position", kind: "message", T: Position },
    { no: 2, name: "height_m", kind: "message", T: FloatValue },
  ],
);


exports.GeoType = GeoType;
exports.GeoDetails = GeoDetails;
exports.GeoShape = GeoShape;
exports.GeoPoint = GeoPoint;
exports.GeoLine = GeoLine;
exports.GeoPolygon = GeoPolygon;
exports.GeoEllipse = GeoEllipse;
exports.GeoEllipsoid = GeoEllipsoid;
exports.LinearRing = LinearRing;
exports.GeoPolygonPosition = GeoPolygonPosition;
