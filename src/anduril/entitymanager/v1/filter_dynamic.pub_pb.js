// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/entitymanager/v1/filter_dynamic.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const { proto3 } = require("@bufbuild/protobuf");
const { Statement } = require("./filter.pub_pb.js");

/**
 * A DynamicStatement is the building block of a "runtime aware" entity filter - that is, any filter
 * which needs to perform operations against a series of entities that will need to be evaluated against
 * on demand. The DynamicStatement allows you to perform a set intersection operation across a static
 * set of entities dictated by a filter, and a dynamic set of entities dictated by a selector statement.
 *
 * For example, the expression "find me all hostile entities that reside within any assumed
 * friendly geoentity" would be represented as the following dynamic statement:
 *
 *  DynamicStatement
 *    filter
 *      predicate
 *        field_path: mil_view.disposition
 *        comparator: EQUALITY
 *        value: 2 // Hostile
 *    selector
 *      andOperation
 *        predicate1
 *          field_path: mil_view.disposition
 *          comparator: EQUALITY
 *          value: 4 // Assumed Friendly
 *        predicate2
 *          field_path: ontology.template
 *          comparator: EQUALITY
 *          value: 4 // Template Geo
 *    comparator
 *      IntersectionComparator
 *        WithinComparison
 *
 * @generated from message anduril.entitymanager.v1.DynamicStatement
 */
const DynamicStatement = proto3.makeMessageType(
  "anduril.entitymanager.v1.DynamicStatement",
  () => [
    { no: 1, name: "filter", kind: "message", T: Statement },
    { no: 2, name: "selector", kind: "message", T: Statement },
    { no: 3, name: "comparator", kind: "message", T: IntersectionComparator },
  ],
);

/**
 * The IntersectionComparator determines what entities and what fields to respect within a set during
 * a set intersection operation.
 *
 * @generated from message anduril.entitymanager.v1.IntersectionComparator
 */
const IntersectionComparator = proto3.makeMessageType(
  "anduril.entitymanager.v1.IntersectionComparator",
  () => [
    { no: 1, name: "within_comparison", kind: "message", T: WithinComparison, oneof: "comparison" },
  ],
);

/**
 * The WithinComparison implicitly will understand how to determine which entitites reside
 * within other geo-shaped entities. This comparison is being left empty, but as a proto, to
 * support future expansions of the within comparison (eg; within range of a static distance).
 *
 * @generated from message anduril.entitymanager.v1.WithinComparison
 */
const WithinComparison = proto3.makeMessageType(
  "anduril.entitymanager.v1.WithinComparison",
  [],
);


exports.DynamicStatement = DynamicStatement;
exports.IntersectionComparator = IntersectionComparator;
exports.WithinComparison = WithinComparison;
