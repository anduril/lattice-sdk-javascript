// @generated by protoc-gen-es v1.7.2
// @generated from file anduril/entitymanager/v1/entity.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BoolValue, DoubleValue, Int32Value, proto3, Timestamp } from "@bufbuild/protobuf";
import { Location, LocationUncertainty } from "./location.pub_pb.js";
import { GeoDetails, GeoPolygon, GeoShape } from "./geoentity.pub_pb.js";
import { Correlated } from "./correlations.pub_pb.js";
import { MilView, Ontology } from "./ontology.pub_pb.js";
import { Sensors } from "./sensors.pub_pb.js";
import { Payloads } from "./payloads.pub_pb.js";
import { PowerState } from "./power.pub_pb.js";
import { TargetPriority } from "./target_priority.pub_pb.js";
import { LineOfBearing, Signal } from "./signal.pub_pb.js";
import { TransponderCodes } from "./transponder_codes.pub_pb.js";
import { ContactDetails } from "./contact_details.pub_pb.js";
import { Classification } from "./classification.pub_pb.js";
import { TaskCatalog } from "../../tasks/v2/catalog.pub_pb.js";
import { Media } from "./media.pub_pb.js";
import { Relationships } from "./relationship.pub_pb.js";
import { PrototypeExtensions } from "./prototype.pub_pb.js";
import { Dimensions } from "./dimensions.pub_pb.js";
import { RouteDetails } from "./route_details.pub_pb.js";
import { Schedules } from "./schedule.pub_pb.js";
import { Health } from "./health_status.pub_pb.js";
import { GroupDetails } from "./group.pub_pb.js";
import { Supplies } from "./supplies.pub_pb.js";
import { AltIdType, OverrideStatus, OverrideType, Source, UInt32Range } from "./types.pub_pb.js";

/**
 * Indicates whether an entity can be deleted with the DeleteEntity API call
 *
 * @generated from enum anduril.entitymanager.v1.Deletable
 */
export const Deletable = proto3.makeEnum(
  "anduril.entitymanager.v1.Deletable",
  [
    {no: 0, name: "DELETABLE_INVALID", localName: "INVALID"},
    {no: 1, name: "DELETABLE_TRUE", localName: "TRUE"},
    {no: 2, name: "DELETABLE_FALSE", localName: "FALSE"},
    {no: 3, name: "DELETABLE_REQUEST", localName: "REQUEST"},
  ],
);

/**
 * @generated from enum anduril.entitymanager.v1.InteractivityMode
 */
export const InteractivityMode = proto3.makeEnum(
  "anduril.entitymanager.v1.InteractivityMode",
  [
    {no: 0, name: "INTERACTIVITY_MODE_INVALID", localName: "INVALID"},
    {no: 1, name: "INTERACTIVITY_MODE_DEFAULT", localName: "DEFAULT"},
    {no: 2, name: "INTERACTIVITY_MODE_DISABLED_ON_MAP", localName: "DISABLED_ON_MAP"},
  ],
);

/**
 * An entity object represents a single entity within the Lattice operational environment, and it contains
 * all data associated with that entity, such as its name, ID, and any other relevant components.
 *
 * @generated from message anduril.entitymanager.v1.Entity
 */
export const Entity = proto3.makeMessageType(
  "anduril.entitymanager.v1.Entity",
  () => [
    { no: 1, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_live", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "created_time", kind: "message", T: Timestamp },
    { no: 5, name: "expiry_time", kind: "message", T: Timestamp },
    { no: 43, name: "no_expiry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 19, name: "status", kind: "message", T: Status },
    { no: 6, name: "location", kind: "message", T: Location },
    { no: 15, name: "location_uncertainty", kind: "message", T: LocationUncertainty },
    { no: 17, name: "geopolygon", kind: "message", T: GeoPolygon },
    { no: 23, name: "geo_shape", kind: "message", T: GeoShape },
    { no: 24, name: "geo_details", kind: "message", T: GeoDetails },
    { no: 7, name: "aliases", kind: "message", T: Aliases },
    { no: 8, name: "tracked", kind: "message", T: Tracked },
    { no: 9, name: "correlated", kind: "message", T: Correlated },
    { no: 10, name: "mil_view", kind: "message", T: MilView },
    { no: 11, name: "ontology", kind: "message", T: Ontology },
    { no: 20, name: "sensors", kind: "message", T: Sensors },
    { no: 21, name: "payloads", kind: "message", T: Payloads },
    { no: 30, name: "power_state", kind: "message", T: PowerState },
    { no: 12, name: "provenance", kind: "message", T: Provenance },
    { no: 13, name: "overrides", kind: "message", T: Overrides },
    { no: 14, name: "indicators", kind: "message", T: Indicators },
    { no: 18, name: "original_data", kind: "message", T: OriginalData },
    { no: 22, name: "target_priority", kind: "message", T: TargetPriority },
    { no: 25, name: "signal", kind: "message", T: Signal },
    { no: 26, name: "transponder_codes", kind: "message", T: TransponderCodes },
    { no: 27, name: "contact", kind: "message", T: ContactDetails },
    { no: 29, name: "data_classification", kind: "message", T: Classification },
    { no: 31, name: "task_catalog", kind: "message", T: TaskCatalog },
    { no: 32, name: "media", kind: "message", T: Media },
    { no: 33, name: "relationships", kind: "message", T: Relationships },
    { no: 34, name: "visual_details", kind: "message", T: VisualDetails },
    { no: 35, name: "prototype_extensions", kind: "message", T: PrototypeExtensions },
    { no: 36, name: "dimensions", kind: "message", T: Dimensions },
    { no: 37, name: "route_details", kind: "message", T: RouteDetails },
    { no: 38, name: "schedules", kind: "message", T: Schedules },
    { no: 39, name: "health", kind: "message", T: Health },
    { no: 40, name: "group_details", kind: "message", T: GroupDetails },
    { no: 41, name: "team_status", kind: "message", T: TeamStatus },
    { no: 42, name: "supplies", kind: "message", T: Supplies },
  ],
);

/**
 * We need a proto containing a list of Entities for marshalling/unmarshalling
 *
 * @generated from message anduril.entitymanager.v1.Entities
 */
export const Entities = proto3.makeMessageType(
  "anduril.entitymanager.v1.Entities",
  () => [
    { no: 1, name: "entities", kind: "message", T: Entity, repeated: true },
  ],
);

/**
 * Contains status of entities.
 *
 * @generated from message anduril.entitymanager.v1.Status
 */
export const Status = proto3.makeMessageType(
  "anduril.entitymanager.v1.Status",
  () => [
    { no: 1, name: "platform_activity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Available for any Entities with alternate ids in other systems.
 *
 * @generated from message anduril.entitymanager.v1.Aliases
 */
export const Aliases = proto3.makeMessageType(
  "anduril.entitymanager.v1.Aliases",
  () => [
    { no: 1, name: "alternate_ids", kind: "message", T: AlternateId, repeated: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Available for Entities that are tracked.
 *
 * @generated from message anduril.entitymanager.v1.Tracked
 */
export const Tracked = proto3.makeMessageType(
  "anduril.entitymanager.v1.Tracked",
  () => [
    { no: 1, name: "track_quality", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "track_quality_wrapper", kind: "message", T: Int32Value },
    { no: 3, name: "sensor_hits", kind: "message", T: Int32Value },
    { no: 4, name: "number_of_objects", kind: "message", T: UInt32Range },
    { no: 5, name: "sensor_details", kind: "message", T: Sensors },
    { no: 6, name: "radar_cross_section", kind: "message", T: DoubleValue },
    { no: 7, name: "last_measurement_time", kind: "message", T: Timestamp },
    { no: 9, name: "line_of_bearing", kind: "message", T: LineOfBearing },
  ],
);

/**
 * Data provenance.
 *
 * @generated from message anduril.entitymanager.v1.Provenance
 */
export const Provenance = proto3.makeMessageType(
  "anduril.entitymanager.v1.Provenance",
  () => [
    { no: 5, name: "integration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "data_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "source", kind: "enum", T: proto3.getEnumType(Source) },
    { no: 3, name: "source_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_update_time", kind: "message", T: Timestamp },
    { no: 4, name: "source_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Indicators to describe entity to consumers.
 *
 * @generated from message anduril.entitymanager.v1.Indicators
 */
export const Indicators = proto3.makeMessageType(
  "anduril.entitymanager.v1.Indicators",
  () => [
    { no: 1, name: "simulated", kind: "message", T: BoolValue },
    { no: 2, name: "exercise", kind: "message", T: BoolValue },
    { no: 3, name: "emergency", kind: "message", T: BoolValue },
    { no: 4, name: "c2", kind: "message", T: BoolValue },
    { no: 5, name: "deletable", kind: "enum", T: proto3.getEnumType(Deletable) },
    { no: 6, name: "egressable", kind: "message", T: BoolValue },
    { no: 7, name: "starred", kind: "message", T: BoolValue },
  ],
);

/**
 * Metadata about entity overrides present.
 *
 * @generated from message anduril.entitymanager.v1.Overrides
 */
export const Overrides = proto3.makeMessageType(
  "anduril.entitymanager.v1.Overrides",
  () => [
    { no: 2, name: "override", kind: "message", T: Override, repeated: true },
    { no: 1, name: "provenance", kind: "message", T: OverrideProvenance, repeated: true },
  ],
);

/**
 * Details about an override. Last write wins.
 *
 * @generated from message anduril.entitymanager.v1.Override
 */
export const Override = proto3.makeMessageType(
  "anduril.entitymanager.v1.Override",
  () => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "field_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "masked_field_value", kind: "message", T: Entity },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(OverrideStatus) },
    { no: 5, name: "provenance", kind: "message", T: Provenance },
    { no: 6, name: "type", kind: "enum", T: proto3.getEnumType(OverrideType) },
    { no: 7, name: "request_timestamp", kind: "message", T: Timestamp },
  ],
);

/**
 * The provenance of a particular override within the entity.
 *
 * @generated from message anduril.entitymanager.v1.OverrideProvenance
 * @deprecated
 */
export const OverrideProvenance = proto3.makeMessageType(
  "anduril.entitymanager.v1.OverrideProvenance",
  () => [
    { no: 1, name: "field_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "provenance", kind: "message", T: Provenance },
  ],
);

/**
 * A component that references the primary original data source. For example, this would allow the original NITF file
 * data that was ingested to be retrieved.
 *
 * @generated from message anduril.entitymanager.v1.OriginalData
 */
export const OriginalData = proto3.makeMessageType(
  "anduril.entitymanager.v1.OriginalData",
  () => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tle", kind: "message", T: OriginalData_TLE },
  ],
);

/**
 * A TLE is a space industry standard for representing the characteristics of an object on orbit.
 * It is composed of two lines that are each a fixed width of 69 characters.
 *
 * @generated from message anduril.entitymanager.v1.OriginalData.TLE
 */
export const OriginalData_TLE = proto3.makeMessageType(
  "anduril.entitymanager.v1.OriginalData.TLE",
  () => [
    { no: 1, name: "line1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "OriginalData_TLE"},
);

/**
 * An alternate id for an Entity.
 *
 * @generated from message anduril.entitymanager.v1.AlternateId
 */
export const AlternateId = proto3.makeMessageType(
  "anduril.entitymanager.v1.AlternateId",
  () => [
    { no: 1, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(AltIdType) },
  ],
);

/**
 * Visual details associated with the display of an entity in the client.
 *
 * @generated from message anduril.entitymanager.v1.VisualDetails
 */
export const VisualDetails = proto3.makeMessageType(
  "anduril.entitymanager.v1.VisualDetails",
  () => [
    { no: 1, name: "range_rings", kind: "message", T: RangeRings },
    { no: 2, name: "interactivity_mode", kind: "enum", T: proto3.getEnumType(InteractivityMode) },
  ],
);

/**
 * Range rings allow visual assessment of map distance at varying zoom levels.
 *
 * @generated from message anduril.entitymanager.v1.RangeRings
 */
export const RangeRings = proto3.makeMessageType(
  "anduril.entitymanager.v1.RangeRings",
  () => [
    { no: 1, name: "min_distance_m", kind: "message", T: DoubleValue },
    { no: 2, name: "max_distance_m", kind: "message", T: DoubleValue },
    { no: 3, name: "ring_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * If present, signifies the entity can participate in collaborative autonomous teaming.
 * Any status about team membership will be reported here.
 *
 * @generated from message anduril.entitymanager.v1.TeamStatus
 */
export const TeamStatus = proto3.makeMessageType(
  "anduril.entitymanager.v1.TeamStatus",
  [],
);

