// @generated by protoc-gen-es v1.7.2
// @generated from file anduril/entitymanager/v1/relationship.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Timestamp } from "@bufbuild/protobuf";
import { Sensors } from "./sensors.pub_pb.js";

/**
 * The relationships between this entity and other entities in the battlespace.
 *
 * @generated from message anduril.entitymanager.v1.Relationships
 */
export const Relationships = proto3.makeMessageType(
  "anduril.entitymanager.v1.Relationships",
  () => [
    { no: 1, name: "relationships", kind: "message", T: Relationship, repeated: true },
  ],
);

/**
 * The relationship component indicates a relationship to another entity.
 *
 * @generated from message anduril.entitymanager.v1.Relationship
 */
export const Relationship = proto3.makeMessageType(
  "anduril.entitymanager.v1.Relationship",
  () => [
    { no: 1, name: "related_entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "relationship_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relationship_type", kind: "message", T: RelationshipType },
  ],
);

/**
 * Determines the type of relationship between this entity and another.
 *
 * @generated from message anduril.entitymanager.v1.RelationshipType
 */
export const RelationshipType = proto3.makeMessageType(
  "anduril.entitymanager.v1.RelationshipType",
  () => [
    { no: 1, name: "tether", kind: "message", T: Tether, oneof: "type" },
    { no: 2, name: "tracked_by", kind: "message", T: TrackedBy, oneof: "type" },
    { no: 3, name: "configure", kind: "message", T: Configure, oneof: "type" },
    { no: 4, name: "group_child", kind: "message", T: GroupChild, oneof: "type" },
    { no: 5, name: "group_parent", kind: "message", T: GroupParent, oneof: "type" },
    { no: 6, name: "merged_from", kind: "message", T: MergedFrom, oneof: "type" },
  ],
);

/**
 * A tether relationship indicates that this entity should take the position of the other entity.
 *
 * @generated from message anduril.entitymanager.v1.Tether
 */
export const Tether = proto3.makeMessageType(
  "anduril.entitymanager.v1.Tether",
  [],
);

/**
 * Describes the relationship between the entity being tracked ("tracked entity") and the entity that is
 * performing the tracking ("tracking entity").
 *
 * @generated from message anduril.entitymanager.v1.TrackedBy
 */
export const TrackedBy = proto3.makeMessageType(
  "anduril.entitymanager.v1.TrackedBy",
  () => [
    { no: 1, name: "actively_tracking_sensors", kind: "message", T: Sensors },
    { no: 2, name: "last_measurement_timestamp", kind: "message", T: Timestamp },
  ],
);

/**
 * A configure relationship indicates that this entity is a configuration on other entity.
 *
 * @generated from message anduril.entitymanager.v1.Configure
 */
export const Configure = proto3.makeMessageType(
  "anduril.entitymanager.v1.Configure",
  [],
);

/**
 * A GroupChild relationship is a uni-directional relationship indicating that (1) this entity
 * represents an Entity Group and (2) the related entity is a child member of this group. The presence of this
 * relationship alone determines that the type of group is an Entity Group.
 *
 * @generated from message anduril.entitymanager.v1.GroupChild
 */
export const GroupChild = proto3.makeMessageType(
  "anduril.entitymanager.v1.GroupChild",
  [],
);

/**
 * A GroupParent relationship is a uni-directional relationship indicating that this entity is a member of
 * the Entity Group represented by the related entity. The presence of this relationship alone determines that
 * the type of group that this entity is a member of is an Entity Group.
 *
 * @generated from message anduril.entitymanager.v1.GroupParent
 */
export const GroupParent = proto3.makeMessageType(
  "anduril.entitymanager.v1.GroupParent",
  [],
);

/**
 * A MergedFrom relationship is a uni-directional relationship indicating that this entity is a merged entity whose
 * data has at least partially been merged from the related entity.
 *
 * @generated from message anduril.entitymanager.v1.MergedFrom
 */
export const MergedFrom = proto3.makeMessageType(
  "anduril.entitymanager.v1.MergedFrom",
  [],
);

