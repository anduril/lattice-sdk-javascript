// @generated by protoc-gen-es v2.2.0 with parameter "import_extension=js"
// @generated from file anduril/entitymanager/v1/relationship.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Sensors } from "./sensors.pub_pb.js";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file anduril/entitymanager/v1/relationship.pub.proto.
 */
export declare const file_anduril_entitymanager_v1_relationship_pub: GenFile;

/**
 * The relationships between this entity and other entities in the common operational picture.
 *
 * @generated from message anduril.entitymanager.v1.Relationships
 */
export declare type Relationships = Message<"anduril.entitymanager.v1.Relationships"> & {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.Relationship relationships = 1;
   */
  relationships: Relationship[];
};

/**
 * Describes the message anduril.entitymanager.v1.Relationships.
 * Use `create(RelationshipsSchema)` to create a new message.
 */
export declare const RelationshipsSchema: GenMessage<Relationships>;

/**
 * The relationship component indicates a relationship to another entity.
 *
 * @generated from message anduril.entitymanager.v1.Relationship
 */
export declare type Relationship = Message<"anduril.entitymanager.v1.Relationship"> & {
  /**
   * The entity ID to which this entity is related.
   *
   * @generated from field: string related_entity_id = 1;
   */
  relatedEntityId: string;

  /**
   * A unique identifier for this relationship. Allows removing or updating relationships.
   *
   * @generated from field: string relationship_id = 2;
   */
  relationshipId: string;

  /**
   * The relationship type
   *
   * @generated from field: anduril.entitymanager.v1.RelationshipType relationship_type = 3;
   */
  relationshipType?: RelationshipType;
};

/**
 * Describes the message anduril.entitymanager.v1.Relationship.
 * Use `create(RelationshipSchema)` to create a new message.
 */
export declare const RelationshipSchema: GenMessage<Relationship>;

/**
 * Determines the type of relationship between this entity and another.
 *
 * @generated from message anduril.entitymanager.v1.RelationshipType
 */
export declare type RelationshipType = Message<"anduril.entitymanager.v1.RelationshipType"> & {
  /**
   * @generated from oneof anduril.entitymanager.v1.RelationshipType.type
   */
  type: {
    /**
     * @generated from field: anduril.entitymanager.v1.TrackedBy tracked_by = 2;
     */
    value: TrackedBy;
    case: "trackedBy";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.GroupChild group_child = 4;
     */
    value: GroupChild;
    case: "groupChild";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.GroupParent group_parent = 5;
     */
    value: GroupParent;
    case: "groupParent";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.MergedFrom merged_from = 6;
     */
    value: MergedFrom;
    case: "mergedFrom";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.ActiveTarget active_target = 7;
     */
    value: ActiveTarget;
    case: "activeTarget";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entitymanager.v1.RelationshipType.
 * Use `create(RelationshipTypeSchema)` to create a new message.
 */
export declare const RelationshipTypeSchema: GenMessage<RelationshipType>;

/**
 * Describes the relationship between the entity being tracked ("tracked entity") and the entity that is
 * performing the tracking ("tracking entity").
 *
 * @generated from message anduril.entitymanager.v1.TrackedBy
 */
export declare type TrackedBy = Message<"anduril.entitymanager.v1.TrackedBy"> & {
  /**
   * Sensor details of the tracking entity's sensors that were active and tracking the tracked entity. This may be
   * a subset of the total sensors available on the tracking entity.
   *
   * @generated from field: anduril.entitymanager.v1.Sensors actively_tracking_sensors = 1;
   */
  activelyTrackingSensors?: Sensors;

  /**
   * Latest time that any sensor in actively_tracking_sensors detected the tracked entity.
   *
   * @generated from field: google.protobuf.Timestamp last_measurement_timestamp = 2;
   */
  lastMeasurementTimestamp?: Timestamp;
};

/**
 * Describes the message anduril.entitymanager.v1.TrackedBy.
 * Use `create(TrackedBySchema)` to create a new message.
 */
export declare const TrackedBySchema: GenMessage<TrackedBy>;

/**
 * A GroupChild relationship is a uni-directional relationship indicating that (1) this entity
 * represents an Entity Group and (2) the related entity is a child member of this group. The presence of this
 * relationship alone determines that the type of group is an Entity Group.
 *
 * @generated from message anduril.entitymanager.v1.GroupChild
 */
export declare type GroupChild = Message<"anduril.entitymanager.v1.GroupChild"> & {
};

/**
 * Describes the message anduril.entitymanager.v1.GroupChild.
 * Use `create(GroupChildSchema)` to create a new message.
 */
export declare const GroupChildSchema: GenMessage<GroupChild>;

/**
 * A GroupParent relationship is a uni-directional relationship indicating that this entity is a member of
 * the Entity Group represented by the related entity. The presence of this relationship alone determines that
 * the type of group that this entity is a member of is an Entity Group.
 *
 * @generated from message anduril.entitymanager.v1.GroupParent
 */
export declare type GroupParent = Message<"anduril.entitymanager.v1.GroupParent"> & {
};

/**
 * Describes the message anduril.entitymanager.v1.GroupParent.
 * Use `create(GroupParentSchema)` to create a new message.
 */
export declare const GroupParentSchema: GenMessage<GroupParent>;

/**
 * A MergedFrom relationship is a uni-directional relationship indicating that this entity is a merged entity whose
 * data has at least partially been merged from the related entity.
 *
 * @generated from message anduril.entitymanager.v1.MergedFrom
 */
export declare type MergedFrom = Message<"anduril.entitymanager.v1.MergedFrom"> & {
};

/**
 * Describes the message anduril.entitymanager.v1.MergedFrom.
 * Use `create(MergedFromSchema)` to create a new message.
 */
export declare const MergedFromSchema: GenMessage<MergedFrom>;

/**
 * A target relationship is the inverse of TrackedBy; a one-way relation
 * from sensor to target, indicating track(s) currently prioritized by a robot.
 *
 * @generated from message anduril.entitymanager.v1.ActiveTarget
 */
export declare type ActiveTarget = Message<"anduril.entitymanager.v1.ActiveTarget"> & {
};

/**
 * Describes the message anduril.entitymanager.v1.ActiveTarget.
 * Use `create(ActiveTargetSchema)` to create a new message.
 */
export declare const ActiveTargetSchema: GenMessage<ActiveTarget>;

