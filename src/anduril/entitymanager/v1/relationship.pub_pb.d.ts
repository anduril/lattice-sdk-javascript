// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/entitymanager/v1/relationship.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Sensors } from "./sensors.pub_pb.js";

/**
 * The relationships between this entity and other entities in the battlespace.
 *
 * @generated from message anduril.entitymanager.v1.Relationships
 */
export declare class Relationships extends Message<Relationships> {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.Relationship relationships = 1;
   */
  relationships: Relationship[];

  constructor(data?: PartialMessage<Relationships>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Relationships";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Relationships;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Relationships;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Relationships;

  static equals(a: Relationships | PlainMessage<Relationships> | undefined, b: Relationships | PlainMessage<Relationships> | undefined): boolean;
}

/**
 * The relationship component indicates a relationship to another entity.
 *
 * @generated from message anduril.entitymanager.v1.Relationship
 */
export declare class Relationship extends Message<Relationship> {
  /**
   * The entity ID to which this entity is related.
   *
   * @generated from field: string related_entity_id = 1;
   */
  relatedEntityId: string;

  /**
   * A unique identifier for this relationship. Allows removing or updating relationships.
   *
   * @generated from field: string relationship_id = 2;
   */
  relationshipId: string;

  /**
   * The relationship type
   *
   * @generated from field: anduril.entitymanager.v1.RelationshipType relationship_type = 3;
   */
  relationshipType?: RelationshipType;

  constructor(data?: PartialMessage<Relationship>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Relationship";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Relationship;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Relationship;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Relationship;

  static equals(a: Relationship | PlainMessage<Relationship> | undefined, b: Relationship | PlainMessage<Relationship> | undefined): boolean;
}

/**
 * Determines the type of relationship between this entity and another.
 *
 * @generated from message anduril.entitymanager.v1.RelationshipType
 */
export declare class RelationshipType extends Message<RelationshipType> {
  /**
   * @generated from oneof anduril.entitymanager.v1.RelationshipType.type
   */
  type: {
    /**
     * @generated from field: anduril.entitymanager.v1.Tether tether = 1;
     */
    value: Tether;
    case: "tether";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.TrackedBy tracked_by = 2;
     */
    value: TrackedBy;
    case: "trackedBy";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.Configure configure = 3;
     */
    value: Configure;
    case: "configure";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.GroupChild group_child = 4;
     */
    value: GroupChild;
    case: "groupChild";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.GroupParent group_parent = 5;
     */
    value: GroupParent;
    case: "groupParent";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.MergedFrom merged_from = 6;
     */
    value: MergedFrom;
    case: "mergedFrom";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<RelationshipType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.RelationshipType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelationshipType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelationshipType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelationshipType;

  static equals(a: RelationshipType | PlainMessage<RelationshipType> | undefined, b: RelationshipType | PlainMessage<RelationshipType> | undefined): boolean;
}

/**
 * A tether relationship indicates that this entity should take the position of the other entity.
 *
 * @generated from message anduril.entitymanager.v1.Tether
 */
export declare class Tether extends Message<Tether> {
  constructor(data?: PartialMessage<Tether>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Tether";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tether;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tether;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tether;

  static equals(a: Tether | PlainMessage<Tether> | undefined, b: Tether | PlainMessage<Tether> | undefined): boolean;
}

/**
 * Describes the relationship between the entity being tracked ("tracked entity") and the entity that is
 * performing the tracking ("tracking entity").
 *
 * @generated from message anduril.entitymanager.v1.TrackedBy
 */
export declare class TrackedBy extends Message<TrackedBy> {
  /**
   * Sensor details of the tracking entity's sensors that were active and tracking the tracked entity. This may be
   * a subset of the total sensors available on the tracking entity.
   *
   * @generated from field: anduril.entitymanager.v1.Sensors actively_tracking_sensors = 1;
   */
  activelyTrackingSensors?: Sensors;

  /**
   * Latest time that any sensor in actively_tracking_sensors detected the tracked entity.
   *
   * @generated from field: google.protobuf.Timestamp last_measurement_timestamp = 2;
   */
  lastMeasurementTimestamp?: Timestamp;

  constructor(data?: PartialMessage<TrackedBy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.TrackedBy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackedBy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackedBy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackedBy;

  static equals(a: TrackedBy | PlainMessage<TrackedBy> | undefined, b: TrackedBy | PlainMessage<TrackedBy> | undefined): boolean;
}

/**
 * A configure relationship indicates that this entity is a configuration on other entity.
 *
 * @generated from message anduril.entitymanager.v1.Configure
 */
export declare class Configure extends Message<Configure> {
  constructor(data?: PartialMessage<Configure>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.Configure";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Configure;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Configure;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Configure;

  static equals(a: Configure | PlainMessage<Configure> | undefined, b: Configure | PlainMessage<Configure> | undefined): boolean;
}

/**
 * A GroupChild relationship is a uni-directional relationship indicating that (1) this entity
 * represents an Entity Group and (2) the related entity is a child member of this group. The presence of this
 * relationship alone determines that the type of group is an Entity Group.
 *
 * @generated from message anduril.entitymanager.v1.GroupChild
 */
export declare class GroupChild extends Message<GroupChild> {
  constructor(data?: PartialMessage<GroupChild>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.GroupChild";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupChild;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupChild;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupChild;

  static equals(a: GroupChild | PlainMessage<GroupChild> | undefined, b: GroupChild | PlainMessage<GroupChild> | undefined): boolean;
}

/**
 * A GroupParent relationship is a uni-directional relationship indicating that this entity is a member of
 * the Entity Group represented by the related entity. The presence of this relationship alone determines that
 * the type of group that this entity is a member of is an Entity Group.
 *
 * @generated from message anduril.entitymanager.v1.GroupParent
 */
export declare class GroupParent extends Message<GroupParent> {
  constructor(data?: PartialMessage<GroupParent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.GroupParent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupParent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupParent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupParent;

  static equals(a: GroupParent | PlainMessage<GroupParent> | undefined, b: GroupParent | PlainMessage<GroupParent> | undefined): boolean;
}

/**
 * A MergedFrom relationship is a uni-directional relationship indicating that this entity is a merged entity whose
 * data has at least partially been merged from the related entity.
 *
 * @generated from message anduril.entitymanager.v1.MergedFrom
 */
export declare class MergedFrom extends Message<MergedFrom> {
  constructor(data?: PartialMessage<MergedFrom>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.MergedFrom";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MergedFrom;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MergedFrom;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MergedFrom;

  static equals(a: MergedFrom | PlainMessage<MergedFrom> | undefined, b: MergedFrom | PlainMessage<MergedFrom> | undefined): boolean;
}

