// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/entitymanager/v1/classification.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * An enumeration of security classification levels.
 *
 * @generated from enum anduril.entitymanager.v1.ClassificationLevels
 */
export enum ClassificationLevels {
  /**
   * @generated from enum value: CLASSIFICATION_LEVELS_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: CLASSIFICATION_LEVELS_UNCLASSIFIED = 1;
   */
  UNCLASSIFIED = 1,

  /**
   * @generated from enum value: CLASSIFICATION_LEVELS_CONTROLLED_UNCLASSIFIED = 2;
   */
  CONTROLLED_UNCLASSIFIED = 2,

  /**
   * @generated from enum value: CLASSIFICATION_LEVELS_CONFIDENTIAL = 3;
   */
  CONFIDENTIAL = 3,

  /**
   * @generated from enum value: CLASSIFICATION_LEVELS_SECRET = 4;
   */
  SECRET = 4,

  /**
   * @generated from enum value: CLASSIFICATION_LEVELS_TOP_SECRET = 5;
   */
  TOP_SECRET = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ClassificationLevels)
proto3.util.setEnumType(ClassificationLevels, "anduril.entitymanager.v1.ClassificationLevels", [
  { no: 0, name: "CLASSIFICATION_LEVELS_INVALID" },
  { no: 1, name: "CLASSIFICATION_LEVELS_UNCLASSIFIED" },
  { no: 2, name: "CLASSIFICATION_LEVELS_CONTROLLED_UNCLASSIFIED" },
  { no: 3, name: "CLASSIFICATION_LEVELS_CONFIDENTIAL" },
  { no: 4, name: "CLASSIFICATION_LEVELS_SECRET" },
  { no: 5, name: "CLASSIFICATION_LEVELS_TOP_SECRET" },
]);

/**
 * A component that describes an entity's security classification levels.
 *
 * @generated from message anduril.entitymanager.v1.Classification
 */
export class Classification extends Message<Classification> {
  /**
   * @generated from field: anduril.entitymanager.v1.ClassificationLevels level = 1 [deprecated = true];
   * @deprecated
   */
  level = ClassificationLevels.INVALID;

  /**
   * The default classification information which should be assumed to apply to everything in
   * the entity unless a specific field level classification is present.
   *
   * @generated from field: anduril.entitymanager.v1.ClassificationInformation default = 2;
   */
  default?: ClassificationInformation;

  /**
   * The set of individual field classification information which should always precedence
   * over the default classification information.
   *
   * @generated from field: repeated anduril.entitymanager.v1.FieldClassificationInformation fields = 3;
   */
  fields: FieldClassificationInformation[] = [];

  constructor(data?: PartialMessage<Classification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.Classification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "enum", T: proto3.getEnumType(ClassificationLevels) },
    { no: 2, name: "default", kind: "message", T: ClassificationInformation },
    { no: 3, name: "fields", kind: "message", T: FieldClassificationInformation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Classification {
    return new Classification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Classification {
    return new Classification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Classification {
    return new Classification().fromJsonString(jsonString, options);
  }

  static equals(a: Classification | PlainMessage<Classification> | undefined, b: Classification | PlainMessage<Classification> | undefined): boolean {
    return proto3.util.equals(Classification, a, b);
  }
}

/**
 * A field specific classification information definition.
 *
 * @generated from message anduril.entitymanager.v1.FieldClassificationInformation
 */
export class FieldClassificationInformation extends Message<FieldClassificationInformation> {
  /**
   * Proto field path which is the string representation of a field.
   * > example: signal.bandwidth_hz would be bandwidth_hz in the signal component
   *
   * @generated from field: string field_path = 1;
   */
  fieldPath = "";

  /**
   * The information which makes up the field level classification marking.
   *
   * @generated from field: anduril.entitymanager.v1.ClassificationInformation classification_information = 2;
   */
  classificationInformation?: ClassificationInformation;

  constructor(data?: PartialMessage<FieldClassificationInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.FieldClassificationInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "classification_information", kind: "message", T: ClassificationInformation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FieldClassificationInformation {
    return new FieldClassificationInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FieldClassificationInformation {
    return new FieldClassificationInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FieldClassificationInformation {
    return new FieldClassificationInformation().fromJsonString(jsonString, options);
  }

  static equals(a: FieldClassificationInformation | PlainMessage<FieldClassificationInformation> | undefined, b: FieldClassificationInformation | PlainMessage<FieldClassificationInformation> | undefined): boolean {
    return proto3.util.equals(FieldClassificationInformation, a, b);
  }
}

/**
 * Represents all of the necessary information required to generate a summarized
 * classification marking.
 *
 * > example: A summarized classification marking of "TOPSECRET//NOFORN//FISA"
 *            would be defined as: { "level": 5, "caveats": [ "NOFORN, "FISA" ] }
 *
 * @generated from message anduril.entitymanager.v1.ClassificationInformation
 */
export class ClassificationInformation extends Message<ClassificationInformation> {
  /**
   * Classification level to be applied to the information in question.
   *
   * @generated from field: anduril.entitymanager.v1.ClassificationLevels level = 1;
   */
  level = ClassificationLevels.INVALID;

  /**
   * Caveats that may further restrict how the information can be disseminated.
   *
   * @generated from field: repeated string caveats = 2;
   */
  caveats: string[] = [];

  constructor(data?: PartialMessage<ClassificationInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.ClassificationInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "enum", T: proto3.getEnumType(ClassificationLevels) },
    { no: 2, name: "caveats", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClassificationInformation {
    return new ClassificationInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClassificationInformation {
    return new ClassificationInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClassificationInformation {
    return new ClassificationInformation().fromJsonString(jsonString, options);
  }

  static equals(a: ClassificationInformation | PlainMessage<ClassificationInformation> | undefined, b: ClassificationInformation | PlainMessage<ClassificationInformation> | undefined): boolean {
    return proto3.util.equals(ClassificationInformation, a, b);
  }
}

