// @generated by protoc-gen-es v1.7.2
// @generated from file anduril/entitymanager/v1/sensors.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DoubleValue, FloatValue, proto3, Timestamp } from "@bufbuild/protobuf";
import { Pose, Position } from "./location.pub_pb.js";
import { FloatRange } from "./types.pub_pb.js";
import { FrequencyRange } from "./signal.pub_pb.js";

/**
 * Describes the current operational state of a system.
 *
 * @generated from enum anduril.entitymanager.v1.OperationalState
 */
export const OperationalState = proto3.makeEnum(
  "anduril.entitymanager.v1.OperationalState",
  [
    {no: 0, name: "OPERATIONAL_STATE_INVALID", localName: "INVALID"},
    {no: 1, name: "OPERATIONAL_STATE_OFF", localName: "OFF"},
    {no: 2, name: "OPERATIONAL_STATE_NON_OPERATIONAL", localName: "NON_OPERATIONAL"},
    {no: 3, name: "OPERATIONAL_STATE_DEGRADED", localName: "DEGRADED"},
    {no: 4, name: "OPERATIONAL_STATE_OPERATIONAL", localName: "OPERATIONAL"},
    {no: 5, name: "OPERATIONAL_STATE_DENIED", localName: "DENIED"},
  ],
);

/**
 * Enumerates the possible sensor modes which were active for this sensor field of view.
 *
 * @generated from enum anduril.entitymanager.v1.SensorMode
 */
export const SensorMode = proto3.makeEnum(
  "anduril.entitymanager.v1.SensorMode",
  [
    {no: 0, name: "SENSOR_MODE_INVALID", localName: "INVALID"},
    {no: 1, name: "SENSOR_MODE_SEARCH", localName: "SEARCH"},
    {no: 2, name: "SENSOR_MODE_TRACK", localName: "TRACK"},
    {no: 3, name: "SENSOR_MODE_WEAPON_SUPPORT", localName: "WEAPON_SUPPORT"},
    {no: 4, name: "SENSOR_MODE_AUTO", localName: "AUTO"},
    {no: 5, name: "SENSOR_MODE_MUTE", localName: "MUTE"},
  ],
);

/**
 * @generated from enum anduril.entitymanager.v1.SensorType
 */
export const SensorType = proto3.makeEnum(
  "anduril.entitymanager.v1.SensorType",
  [
    {no: 0, name: "SENSOR_TYPE_INVALID", localName: "INVALID"},
    {no: 1, name: "SENSOR_TYPE_RADAR", localName: "RADAR"},
    {no: 2, name: "SENSOR_TYPE_CAMERA", localName: "CAMERA"},
    {no: 3, name: "SENSOR_TYPE_TRANSPONDER", localName: "TRANSPONDER"},
    {no: 4, name: "SENSOR_TYPE_RF", localName: "RF"},
    {no: 5, name: "SENSOR_TYPE_GPS", localName: "GPS"},
    {no: 6, name: "SENSOR_TYPE_PTU_POS", localName: "PTU_POS"},
    {no: 7, name: "SENSOR_TYPE_WISP", localName: "WISP"},
    {no: 8, name: "SENSOR_TYPE_PERIMETER", localName: "PERIMETER"},
    {no: 9, name: "SENSOR_TYPE_SONAR", localName: "SONAR"},
  ],
);

/**
 * List of sensors available for an entity.
 *
 * @generated from message anduril.entitymanager.v1.Sensors
 */
export const Sensors = proto3.makeMessageType(
  "anduril.entitymanager.v1.Sensors",
  () => [
    { no: 1, name: "sensors", kind: "message", T: Sensor, repeated: true },
  ],
);

/**
 * Individual sensor configuration.
 *
 * @generated from message anduril.entitymanager.v1.Sensor
 */
export const Sensor = proto3.makeMessageType(
  "anduril.entitymanager.v1.Sensor",
  () => [
    { no: 1, name: "sensor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operational_state", kind: "enum", T: proto3.getEnumType(OperationalState) },
    { no: 4, name: "field_of_view", kind: "message", T: FieldOfView },
    { no: 5, name: "sensor_type", kind: "enum", T: proto3.getEnumType(SensorType) },
    { no: 6, name: "sensor_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "rf_configuraton", kind: "message", T: RFConfiguration },
    { no: 8, name: "last_detection_timestamp", kind: "message", T: Timestamp },
    { no: 9, name: "fields_of_view", kind: "message", T: FieldOfView, repeated: true },
  ],
);

/**
 * Sensor Field Of View closely resembling fov.proto SensorFieldOfView.
 *
 * @generated from message anduril.entitymanager.v1.FieldOfView
 */
export const FieldOfView = proto3.makeMessageType(
  "anduril.entitymanager.v1.FieldOfView",
  () => [
    { no: 1, name: "fov_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "mount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "projected_frustum", kind: "message", T: ProjectedFrustum },
    { no: 4, name: "projected_center_ray", kind: "message", T: Position },
    { no: 5, name: "center_ray_pose", kind: "message", T: Pose },
    { no: 6, name: "horizontal_fov", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "vertical_fov", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 8, name: "range", kind: "message", T: FloatValue },
    { no: 9, name: "mode", kind: "enum", T: proto3.getEnumType(SensorMode) },
  ],
);

/**
 * Represents a frustum in which which all four corner points project onto the ground. All points in this message
 * are optional, if the projection to the ground fails then they will not be populated.
 *
 * @generated from message anduril.entitymanager.v1.ProjectedFrustum
 */
export const ProjectedFrustum = proto3.makeMessageType(
  "anduril.entitymanager.v1.ProjectedFrustum",
  () => [
    { no: 1, name: "upper_left", kind: "message", T: Position },
    { no: 2, name: "upper_right", kind: "message", T: Position },
    { no: 3, name: "bottom_right", kind: "message", T: Position },
    { no: 4, name: "bottom_left", kind: "message", T: Position },
  ],
);

/**
 * Represents RF configurations supported on this sensor.
 *
 * @generated from message anduril.entitymanager.v1.RFConfiguration
 */
export const RFConfiguration = proto3.makeMessageType(
  "anduril.entitymanager.v1.RFConfiguration",
  () => [
    { no: 1, name: "frequency_range", kind: "message", T: FloatRange, repeated: true },
    { no: 2, name: "bandwidth_range", kind: "message", T: FloatRange, repeated: true },
    { no: 3, name: "frequency_range_hz", kind: "message", T: FrequencyRange, repeated: true },
    { no: 4, name: "bandwidth_range_hz", kind: "message", T: BandwidthRange, repeated: true },
  ],
);

/**
 * A component that describes the min and max bandwidths of a sensor
 *
 * @generated from message anduril.entitymanager.v1.BandwidthRange
 */
export const BandwidthRange = proto3.makeMessageType(
  "anduril.entitymanager.v1.BandwidthRange",
  () => [
    { no: 1, name: "minimum_bandwidth", kind: "message", T: Bandwidth },
    { no: 2, name: "maximum_bandwidth", kind: "message", T: Bandwidth },
  ],
);

/**
 * Describes the bandwidth of a signal
 *
 * @generated from message anduril.entitymanager.v1.Bandwidth
 */
export const Bandwidth = proto3.makeMessageType(
  "anduril.entitymanager.v1.Bandwidth",
  () => [
    { no: 1, name: "bandwidth_hz", kind: "message", T: DoubleValue },
  ],
);

