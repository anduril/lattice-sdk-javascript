// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/entitymanager/v1/payloads.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Environment } from "../../ontology/v1/type.pub_pb.js";

/**
 * Describes the current operational state of a payload configuration.
 *
 * @generated from enum anduril.entitymanager.v1.PayloadOperationalState
 */
export enum PayloadOperationalState {
  /**
   * @generated from enum value: PAYLOAD_OPERATIONAL_STATE_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: PAYLOAD_OPERATIONAL_STATE_OFF = 1;
   */
  OFF = 1,

  /**
   * @generated from enum value: PAYLOAD_OPERATIONAL_STATE_NON_OPERATIONAL = 2;
   */
  NON_OPERATIONAL = 2,

  /**
   * @generated from enum value: PAYLOAD_OPERATIONAL_STATE_DEGRADED = 3;
   */
  DEGRADED = 3,

  /**
   * @generated from enum value: PAYLOAD_OPERATIONAL_STATE_OPERATIONAL = 4;
   */
  OPERATIONAL = 4,

  /**
   * @generated from enum value: PAYLOAD_OPERATIONAL_STATE_OUT_OF_SERVICE = 5;
   */
  OUT_OF_SERVICE = 5,

  /**
   * @generated from enum value: PAYLOAD_OPERATIONAL_STATE_UNKNOWN = 6;
   */
  UNKNOWN = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(PayloadOperationalState)
proto3.util.setEnumType(PayloadOperationalState, "anduril.entitymanager.v1.PayloadOperationalState", [
  { no: 0, name: "PAYLOAD_OPERATIONAL_STATE_INVALID" },
  { no: 1, name: "PAYLOAD_OPERATIONAL_STATE_OFF" },
  { no: 2, name: "PAYLOAD_OPERATIONAL_STATE_NON_OPERATIONAL" },
  { no: 3, name: "PAYLOAD_OPERATIONAL_STATE_DEGRADED" },
  { no: 4, name: "PAYLOAD_OPERATIONAL_STATE_OPERATIONAL" },
  { no: 5, name: "PAYLOAD_OPERATIONAL_STATE_OUT_OF_SERVICE" },
  { no: 6, name: "PAYLOAD_OPERATIONAL_STATE_UNKNOWN" },
]);

/**
 * List of payloads available for an entity. i.e a weapon.
 *
 * @generated from message anduril.entitymanager.v1.Payloads
 */
export class Payloads extends Message<Payloads> {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.Payload payload_configurations = 1;
   */
  payloadConfigurations: Payload[] = [];

  constructor(data?: PartialMessage<Payloads>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.Payloads";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "payload_configurations", kind: "message", T: Payload, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Payloads {
    return new Payloads().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Payloads {
    return new Payloads().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Payloads {
    return new Payloads().fromJsonString(jsonString, options);
  }

  static equals(a: Payloads | PlainMessage<Payloads> | undefined, b: Payloads | PlainMessage<Payloads> | undefined): boolean {
    return proto3.util.equals(Payloads, a, b);
  }
}

/**
 * Individual payload configuration.
 *
 * @generated from message anduril.entitymanager.v1.Payload
 */
export class Payload extends Message<Payload> {
  /**
   * @generated from field: anduril.entitymanager.v1.PayloadConfiguration config = 1;
   */
  config?: PayloadConfiguration;

  constructor(data?: PartialMessage<Payload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.Payload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: PayloadConfiguration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Payload {
    return new Payload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Payload {
    return new Payload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Payload {
    return new Payload().fromJsonString(jsonString, options);
  }

  static equals(a: Payload | PlainMessage<Payload> | undefined, b: Payload | PlainMessage<Payload> | undefined): boolean {
    return proto3.util.equals(Payload, a, b);
  }
}

/**
 * The configuration for this capability, published on the CAPABILITY_TOPIC_PAYLOAD_CONFIGURATION topic id.
 *
 * @generated from message anduril.entitymanager.v1.PayloadConfiguration
 */
export class PayloadConfiguration extends Message<PayloadConfiguration> {
  /**
   * Identifying ID for the capability.
   * This ID may be used multiple times to represent payloads that are the same capability but have different operational states
   *
   * @generated from field: string capability_id = 1;
   */
  capabilityId = "";

  /**
   * The number of payloads currently available in the configuration.
   *
   * @generated from field: uint32 quantity = 4;
   */
  quantity = 0;

  /**
   * The target environments the configuration is effective against.
   *
   * @generated from field: repeated anduril.ontology.v1.Environment effective_environment = 5;
   */
  effectiveEnvironment: Environment[] = [];

  /**
   * The operational state of this payload.
   *
   * @generated from field: anduril.entitymanager.v1.PayloadOperationalState payload_operational_state = 6;
   */
  payloadOperationalState = PayloadOperationalState.INVALID;

  /**
   * A human readable description of the payload
   *
   * @generated from field: string payload_description = 7;
   */
  payloadDescription = "";

  constructor(data?: PartialMessage<PayloadConfiguration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.entitymanager.v1.PayloadConfiguration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capability_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "effective_environment", kind: "enum", T: proto3.getEnumType(Environment), repeated: true },
    { no: 6, name: "payload_operational_state", kind: "enum", T: proto3.getEnumType(PayloadOperationalState) },
    { no: 7, name: "payload_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayloadConfiguration {
    return new PayloadConfiguration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayloadConfiguration {
    return new PayloadConfiguration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayloadConfiguration {
    return new PayloadConfiguration().fromJsonString(jsonString, options);
  }

  static equals(a: PayloadConfiguration | PlainMessage<PayloadConfiguration> | undefined, b: PayloadConfiguration | PlainMessage<PayloadConfiguration> | undefined): boolean {
    return proto3.util.equals(PayloadConfiguration, a, b);
  }
}

