// @generated by protoc-gen-es v2.2.0
// @generated from file anduril/entitymanager/v1/filter_dynamic.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Statement } from "./filter.pub_pb";

/**
 * Describes the file anduril/entitymanager/v1/filter_dynamic.pub.proto.
 */
export declare const file_anduril_entitymanager_v1_filter_dynamic_pub: GenFile;

/**
 * A DynamicStatement is the building block of a "runtime aware" entity filter - that is, any filter
 * which needs to perform operations against a series of entities that will need to be evaluated against
 * on demand. The DynamicStatement allows you to perform a set intersection operation across a static
 * set of entities dictated by a filter, and a dynamic set of entities dictated by a selector statement.
 *
 * For example, the expression "find me all hostile entities that reside within any assumed
 * friendly geoentity" would be represented as the following dynamic statement:
 *
 *  DynamicStatement
 *    filter
 *      predicate
 *        field_path: mil_view.disposition
 *        comparator: EQUALITY
 *        value: 2 // Hostile
 *    selector
 *      andOperation
 *        predicate1
 *          field_path: mil_view.disposition
 *          comparator: EQUALITY
 *          value: 4 // Assumed Friendly
 *        predicate2
 *          field_path: ontology.template
 *          comparator: EQUALITY
 *          value: 4 // Template Geo
 *    comparator
 *      IntersectionComparator
 *        WithinComparison
 *
 * @generated from message anduril.entitymanager.v1.DynamicStatement
 */
export declare type DynamicStatement = Message<"anduril.entitymanager.v1.DynamicStatement"> & {
  /**
   * The filter statement is used to determine which entities can be compared to the dynamic series
   * of entities aggregated by the selector statement.
   *
   * @generated from field: anduril.entitymanager.v1.Statement filter = 1;
   */
  filter?: Statement;

  /**
   * The selector statement is used to determine which entities should be a part of dynamically
   * changing set. The selector should be reevaluated as entites are created or deleted.
   *
   * @generated from field: anduril.entitymanager.v1.Statement selector = 2;
   */
  selector?: Statement;

  /**
   * The comparator specifies how the set intersection operation will be performed.
   *
   * @generated from field: anduril.entitymanager.v1.IntersectionComparator comparator = 3;
   */
  comparator?: IntersectionComparator;
};

/**
 * Describes the message anduril.entitymanager.v1.DynamicStatement.
 * Use `create(DynamicStatementSchema)` to create a new message.
 */
export declare const DynamicStatementSchema: GenMessage<DynamicStatement>;

/**
 * The IntersectionComparator determines what entities and what fields to respect within a set during
 * a set intersection operation.
 *
 * @generated from message anduril.entitymanager.v1.IntersectionComparator
 */
export declare type IntersectionComparator = Message<"anduril.entitymanager.v1.IntersectionComparator"> & {
  /**
   * @generated from oneof anduril.entitymanager.v1.IntersectionComparator.comparison
   */
  comparison: {
    /**
     * @generated from field: anduril.entitymanager.v1.WithinComparison within_comparison = 1;
     */
    value: WithinComparison;
    case: "withinComparison";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entitymanager.v1.IntersectionComparator.
 * Use `create(IntersectionComparatorSchema)` to create a new message.
 */
export declare const IntersectionComparatorSchema: GenMessage<IntersectionComparator>;

/**
 * The WithinComparison implicitly will understand how to determine which entitites reside
 * within other geo-shaped entities. This comparison is being left empty, but as a proto, to
 * support future expansions of the within comparison (eg; within range of a static distance).
 *
 * @generated from message anduril.entitymanager.v1.WithinComparison
 */
export declare type WithinComparison = Message<"anduril.entitymanager.v1.WithinComparison"> & {
};

/**
 * Describes the message anduril.entitymanager.v1.WithinComparison.
 * Use `create(WithinComparisonSchema)` to create a new message.
 */
export declare const WithinComparisonSchema: GenMessage<WithinComparison>;

