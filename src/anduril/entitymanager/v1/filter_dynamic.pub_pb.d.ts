// @generated by protoc-gen-es v1.7.2
// @generated from file anduril/entitymanager/v1/filter_dynamic.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Statement } from "./filter.pub_pb.js";

/**
 * A DynamicStatement is the building block of a "runtime aware" entity filter - that is, any filter
 * which needs to perform operations against a series of entities that will need to be evaluated against
 * on demand. The DynamicStatement allows you to perform a set intersection operation across a static
 * set of entities dictated by a filter, and a dynamic set of entities dictated by a selector statement.
 *
 * For example, the expression "find me all hostile entities that reside within any assumed
 * friendly geoentity" would be represented as the following dynamic statement:
 *
 *  DynamicStatement
 *    filter
 *      predicate
 *        field_path: mil_view.disposition
 *        comparator: EQUALITY
 *        value: 2 // Hostile
 *    selector
 *      andOperation
 *        predicate1
 *          field_path: mil_view.disposition
 *          comparator: EQUALITY
 *          value: 4 // Assumed Friendly
 *        predicate2
 *          field_path: ontology.template
 *          comparator: EQUALITY
 *          value: 4 // Template Geo
 *    comparator
 *      IntersectionComparator
 *        WithinComparison
 *
 * @generated from message anduril.entitymanager.v1.DynamicStatement
 */
export declare class DynamicStatement extends Message<DynamicStatement> {
  /**
   * The filter statement is used to determine which entities can be compared to the dynamic series
   * of entities aggregated by the selector statement.
   *
   * @generated from field: anduril.entitymanager.v1.Statement filter = 1;
   */
  filter?: Statement;

  /**
   * The selector statement is used to determine which entities should be a part of dynamically
   * changing set. The selector should be reevaluated as entites are created or deleted.
   *
   * @generated from field: anduril.entitymanager.v1.Statement selector = 2;
   */
  selector?: Statement;

  /**
   * The comparator specifies how the set intersection operation will be performed.
   *
   * @generated from field: anduril.entitymanager.v1.IntersectionComparator comparator = 3;
   */
  comparator?: IntersectionComparator;

  constructor(data?: PartialMessage<DynamicStatement>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.DynamicStatement";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DynamicStatement;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DynamicStatement;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DynamicStatement;

  static equals(a: DynamicStatement | PlainMessage<DynamicStatement> | undefined, b: DynamicStatement | PlainMessage<DynamicStatement> | undefined): boolean;
}

/**
 * The IntersectionComparator determines what entities and what fields to respect within a set during
 * a set intersection operation.
 *
 * @generated from message anduril.entitymanager.v1.IntersectionComparator
 */
export declare class IntersectionComparator extends Message<IntersectionComparator> {
  /**
   * @generated from oneof anduril.entitymanager.v1.IntersectionComparator.comparison
   */
  comparison: {
    /**
     * @generated from field: anduril.entitymanager.v1.WithinComparison within_comparison = 1;
     */
    value: WithinComparison;
    case: "withinComparison";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<IntersectionComparator>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.IntersectionComparator";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntersectionComparator;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntersectionComparator;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntersectionComparator;

  static equals(a: IntersectionComparator | PlainMessage<IntersectionComparator> | undefined, b: IntersectionComparator | PlainMessage<IntersectionComparator> | undefined): boolean;
}

/**
 * The WithinComparison implicitly will understand how to determine which entitites reside
 * within other geo-shaped entities. This comparison is being left empty, but as a proto, to
 * support future expansions of the within comparison (eg; within range of a static distance).
 *
 * @generated from message anduril.entitymanager.v1.WithinComparison
 */
export declare class WithinComparison extends Message<WithinComparison> {
  constructor(data?: PartialMessage<WithinComparison>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.entitymanager.v1.WithinComparison";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WithinComparison;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WithinComparison;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WithinComparison;

  static equals(a: WithinComparison | PlainMessage<WithinComparison> | undefined, b: WithinComparison | PlainMessage<WithinComparison> | undefined): boolean;
}

