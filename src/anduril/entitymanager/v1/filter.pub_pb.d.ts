// @generated by protoc-gen-es v2.0.0
// @generated from file anduril/entitymanager/v1/filter.pub.proto (package anduril.entitymanager.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { Position } from "./location.pub_pb";
import type { GeoPolygon } from "./geoentity.pub_pb";

/**
 * Describes the file anduril/entitymanager/v1/filter.pub.proto.
 */
export declare const file_anduril_entitymanager_v1_filter_pub: GenFile;

/**
 * A Statement is the building block of the entity filter. The outermost statement is conceptually
 * the root node of an "expression tree" which allows for the construction of complete boolean
 * logic statements. Statements are formed by grouping sets of children statement(s) or predicate(s)
 * according to the boolean operation which is to be applied.
 *
 * For example, the criteria "take an action if an entity is hostile and an air vehicle" can be
 * represented as: Statement1: { AndOperation: { Predicate1, Predicate2 } }. Where Statement1
 * is the root of the expression tree, with an AND operation that is applied to children
 * predicates. The predicates themselves encode "entity is hostile" and "entity is air vehicle."
 *
 * @generated from message anduril.entitymanager.v1.Statement
 */
export declare type Statement = Message<"anduril.entitymanager.v1.Statement"> & {
  /**
   * @generated from oneof anduril.entitymanager.v1.Statement.operation
   */
  operation: {
    /**
     * @generated from field: anduril.entitymanager.v1.AndOperation and = 1;
     */
    value: AndOperation;
    case: "and";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.OrOperation or = 2;
     */
    value: OrOperation;
    case: "or";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.NotOperation not = 3;
     */
    value: NotOperation;
    case: "not";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.ListOperation list = 4;
     */
    value: ListOperation;
    case: "list";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.Predicate predicate = 5;
     */
    value: Predicate;
    case: "predicate";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entitymanager.v1.Statement.
 * Use `create(StatementSchema)` to create a new message.
 */
export declare const StatementSchema: GenMessage<Statement>;

/**
 * The AndOperation represents the boolean AND operation, which is to be applied to the list of
 * children statement(s) or predicate(s).
 *
 * @generated from message anduril.entitymanager.v1.AndOperation
 */
export declare type AndOperation = Message<"anduril.entitymanager.v1.AndOperation"> & {
  /**
   * @generated from oneof anduril.entitymanager.v1.AndOperation.children
   */
  children: {
    /**
     * @generated from field: anduril.entitymanager.v1.PredicateSet predicate_set = 1;
     */
    value: PredicateSet;
    case: "predicateSet";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.StatementSet statement_set = 2;
     */
    value: StatementSet;
    case: "statementSet";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entitymanager.v1.AndOperation.
 * Use `create(AndOperationSchema)` to create a new message.
 */
export declare const AndOperationSchema: GenMessage<AndOperation>;

/**
 * The OrOperation represents the boolean OR operation, which is to be applied to the list of
 * children statement(s) or predicate(s).
 *
 * @generated from message anduril.entitymanager.v1.OrOperation
 */
export declare type OrOperation = Message<"anduril.entitymanager.v1.OrOperation"> & {
  /**
   * @generated from oneof anduril.entitymanager.v1.OrOperation.children
   */
  children: {
    /**
     * @generated from field: anduril.entitymanager.v1.PredicateSet predicate_set = 1;
     */
    value: PredicateSet;
    case: "predicateSet";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.StatementSet statement_set = 2;
     */
    value: StatementSet;
    case: "statementSet";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entitymanager.v1.OrOperation.
 * Use `create(OrOperationSchema)` to create a new message.
 */
export declare const OrOperationSchema: GenMessage<OrOperation>;

/**
 * The NotOperation represents the boolean NOT operation, which can only be applied to a single
 * child predicate or statement.
 *
 * @generated from message anduril.entitymanager.v1.NotOperation
 */
export declare type NotOperation = Message<"anduril.entitymanager.v1.NotOperation"> & {
  /**
   * @generated from oneof anduril.entitymanager.v1.NotOperation.child
   */
  child: {
    /**
     * @generated from field: anduril.entitymanager.v1.Predicate predicate = 1;
     */
    value: Predicate;
    case: "predicate";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.Statement statement = 2;
     */
    value: Statement;
    case: "statement";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entitymanager.v1.NotOperation.
 * Use `create(NotOperationSchema)` to create a new message.
 */
export declare const NotOperationSchema: GenMessage<NotOperation>;

/**
 * The ListOperation represents an operation against a proto list. If the list is of primitive proto
 * type (e.g. int32), paths in all child predicates should be left empty. If the list is of message
 * proto type (e.g. Sensor), paths in all child predicates should be relative to the list path.
 *
 * For example, the criteria "take an action if an entity has any sensor with sensor_id='sensor' and
 * OperationalState=STATE_OFF" would be modeled as:
 * Predicate1: { path: "sensor_id", comparator: EQUAL_TO, value: "sensor" }
 * Predicate2: { path: "operational_state", comparator: EQUAL_TO, value: STATE_OFF }
 *
 * Statement2: { AndOperation: PredicateSet: { <Predicate1>, <Predicate2> } }
 * ListOperation: { list_path: "sensors.sensors", list_comparator: ANY, statement: <Statement2> }
 * Statement1: { ListOperation: <ListOperation> }
 *
 * Note that in the above, the child predicates of the list operation have paths relative to the
 * list_path because the list is comprised of message not primitive types.
 *
 * @generated from message anduril.entitymanager.v1.ListOperation
 */
export declare type ListOperation = Message<"anduril.entitymanager.v1.ListOperation"> & {
  /**
   * The list_path specifies the repeated field on an entity to which this operation applies.
   *
   * @generated from field: string list_path = 1;
   */
  listPath: string;

  /**
   * The list_comparator specifies how to compose the boolean results from the child statement
   * for each member of the specified list.
   *
   * @generated from field: anduril.entitymanager.v1.ListComparator list_comparator = 2;
   */
  listComparator: ListComparator;

  /**
   * The statement is a new expression tree conceptually rooted at type of the list. It determines
   * how each member of the list is evaluated.
   *
   * @generated from field: anduril.entitymanager.v1.Statement statement = 3;
   */
  statement?: Statement;
};

/**
 * Describes the message anduril.entitymanager.v1.ListOperation.
 * Use `create(ListOperationSchema)` to create a new message.
 */
export declare const ListOperationSchema: GenMessage<ListOperation>;

/**
 * The PredicateSet represents a list of predicates or "leaf nodes" in the expression tree, which
 * can be directly evaluated to a boolean TRUE/FALSE result.
 *
 * @generated from message anduril.entitymanager.v1.PredicateSet
 */
export declare type PredicateSet = Message<"anduril.entitymanager.v1.PredicateSet"> & {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.Predicate predicates = 1;
   */
  predicates: Predicate[];
};

/**
 * Describes the message anduril.entitymanager.v1.PredicateSet.
 * Use `create(PredicateSetSchema)` to create a new message.
 */
export declare const PredicateSetSchema: GenMessage<PredicateSet>;

/**
 * The StatementSet represents a list of statements or "tree nodes," each of which follow the same
 * behavior as the Statement proto message.
 *
 * @generated from message anduril.entitymanager.v1.StatementSet
 */
export declare type StatementSet = Message<"anduril.entitymanager.v1.StatementSet"> & {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.Statement statements = 1;
   */
  statements: Statement[];
};

/**
 * Describes the message anduril.entitymanager.v1.StatementSet.
 * Use `create(StatementSetSchema)` to create a new message.
 */
export declare const StatementSetSchema: GenMessage<StatementSet>;

/**
 * The Predicate fully encodes the information required to make an evaluation of an entity field
 * against a given static value, resulting in a boolean TRUE/FALSE result. The structure of a
 * predicate will always follow: "{entity-value} {comparator} {fixed-value}" where the entity value
 * is determined by the field path.
 *
 * For example, a predicate would read as: "{entity.location.velocity_enu} {LESS_THAN} {500kph}"
 *
 * @generated from message anduril.entitymanager.v1.Predicate
 */
export declare type Predicate = Message<"anduril.entitymanager.v1.Predicate"> & {
  /**
   * The field_path determines which field on an entity is being referenced in this predicate. For
   * example: correlated.primary_entity_id would be primary_entity_id in correlated component.
   *
   * @generated from field: string field_path = 1;
   */
  fieldPath: string;

  /**
   * The value determines the fixed value against which the entity field is to be compared.
   * In the case of COMPARATOR_MATCH_ALL, the value contents do not matter as long as the Value is a supported
   * type.
   *
   * @generated from field: anduril.entitymanager.v1.Value value = 2;
   */
  value?: Value;

  /**
   * The comparator determines the manner in which the entity field and static value are compared.
   * Comparators may only be applied to certain values. For example, the WITHIN comparator cannot
   * be used for a boolean value comparison.
   *
   * @generated from field: anduril.entitymanager.v1.Comparator comparator = 3;
   */
  comparator: Comparator;
};

/**
 * Describes the message anduril.entitymanager.v1.Predicate.
 * Use `create(PredicateSchema)` to create a new message.
 */
export declare const PredicateSchema: GenMessage<Predicate>;

/**
 * The Value represents the information against which an entity field is evaluated. It is one of
 * a fixed set of types, each of which correspond to specific comparators. See "ComparatorType"
 * for the full list of Value <-> Comparator mappings.
 *
 * @generated from message anduril.entitymanager.v1.Value
 */
export declare type Value = Message<"anduril.entitymanager.v1.Value"> & {
  /**
   * @generated from oneof anduril.entitymanager.v1.Value.type
   */
  type: {
    /**
     * @generated from field: anduril.entitymanager.v1.BooleanType boolean_type = 1;
     */
    value: BooleanType;
    case: "booleanType";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.NumericType numeric_type = 2;
     */
    value: NumericType;
    case: "numericType";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.StringType string_type = 3;
     */
    value: StringType;
    case: "stringType";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.EnumType enum_type = 4;
     */
    value: EnumType;
    case: "enumType";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.TimestampType timestamp_type = 5;
     */
    value: TimestampType;
    case: "timestampType";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.BoundedShapeType bounded_shape_type = 6;
     */
    value: BoundedShapeType;
    case: "boundedShapeType";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.PositionType position_type = 7;
     */
    value: PositionType;
    case: "positionType";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.HeadingType heading_type = 8;
     */
    value: HeadingType;
    case: "headingType";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.ListType list_type = 9;
     */
    value: ListType;
    case: "listType";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.RangeType range_type = 10;
     */
    value: RangeType;
    case: "rangeType";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entitymanager.v1.Value.
 * Use `create(ValueSchema)` to create a new message.
 */
export declare const ValueSchema: GenMessage<Value>;

/**
 * The BooleanType represents a static boolean value.
 *
 * @generated from message anduril.entitymanager.v1.BooleanType
 */
export declare type BooleanType = Message<"anduril.entitymanager.v1.BooleanType"> & {
  /**
   * @generated from field: bool value = 1;
   */
  value: boolean;
};

/**
 * Describes the message anduril.entitymanager.v1.BooleanType.
 * Use `create(BooleanTypeSchema)` to create a new message.
 */
export declare const BooleanTypeSchema: GenMessage<BooleanType>;

/**
 * The NumericType represents static numeric values. It supports all numeric primitives supported
 * by the proto3 language specification.
 *
 * @generated from message anduril.entitymanager.v1.NumericType
 */
export declare type NumericType = Message<"anduril.entitymanager.v1.NumericType"> & {
  /**
   * @generated from oneof anduril.entitymanager.v1.NumericType.value
   */
  value: {
    /**
     * @generated from field: double double_value = 1;
     */
    value: number;
    case: "doubleValue";
  } | {
    /**
     * @generated from field: float float_value = 2;
     */
    value: number;
    case: "floatValue";
  } | {
    /**
     * @generated from field: int32 int32_value = 3;
     */
    value: number;
    case: "int32Value";
  } | {
    /**
     * @generated from field: int64 int64_value = 4;
     */
    value: bigint;
    case: "int64Value";
  } | {
    /**
     * @generated from field: uint32 uint32_value = 5;
     */
    value: number;
    case: "uint32Value";
  } | {
    /**
     * @generated from field: uint64 uint64_value = 6;
     */
    value: bigint;
    case: "uint64Value";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entitymanager.v1.NumericType.
 * Use `create(NumericTypeSchema)` to create a new message.
 */
export declare const NumericTypeSchema: GenMessage<NumericType>;

/**
 * The StringType represents static string values.
 *
 * @generated from message anduril.entitymanager.v1.StringType
 */
export declare type StringType = Message<"anduril.entitymanager.v1.StringType"> & {
  /**
   * @generated from field: string value = 1;
   */
  value: string;
};

/**
 * Describes the message anduril.entitymanager.v1.StringType.
 * Use `create(StringTypeSchema)` to create a new message.
 */
export declare const StringTypeSchema: GenMessage<StringType>;

/**
 * The EnumType represents members of well-known anduril ontologies, such as "disposition." When
 * such a value is specified, the evaluation library expects the integer representation of the enum
 * value. For example, a disposition derived from ontology.v1 such as "DISPOSITION_HOSTILE" should be
 * represented with the integer value 2.
 *
 * @generated from message anduril.entitymanager.v1.EnumType
 */
export declare type EnumType = Message<"anduril.entitymanager.v1.EnumType"> & {
  /**
   * @generated from field: int32 value = 1;
   */
  value: number;
};

/**
 * Describes the message anduril.entitymanager.v1.EnumType.
 * Use `create(EnumTypeSchema)` to create a new message.
 */
export declare const EnumTypeSchema: GenMessage<EnumType>;

/**
 * A List of Values for use with the IN comparator.
 *
 * @generated from message anduril.entitymanager.v1.ListType
 */
export declare type ListType = Message<"anduril.entitymanager.v1.ListType"> & {
  /**
   * @generated from field: repeated anduril.entitymanager.v1.Value values = 1;
   */
  values: Value[];
};

/**
 * Describes the message anduril.entitymanager.v1.ListType.
 * Use `create(ListTypeSchema)` to create a new message.
 */
export declare const ListTypeSchema: GenMessage<ListType>;

/**
 * The TimestampType represents a static timestamp value.
 *
 * @generated from message anduril.entitymanager.v1.TimestampType
 */
export declare type TimestampType = Message<"anduril.entitymanager.v1.TimestampType"> & {
  /**
   * @generated from field: google.protobuf.Timestamp value = 1;
   */
  value?: Timestamp;
};

/**
 * Describes the message anduril.entitymanager.v1.TimestampType.
 * Use `create(TimestampTypeSchema)` to create a new message.
 */
export declare const TimestampTypeSchema: GenMessage<TimestampType>;

/**
 * The PositionType represents any fixed LLA point in space.
 *
 * @generated from message anduril.entitymanager.v1.PositionType
 */
export declare type PositionType = Message<"anduril.entitymanager.v1.PositionType"> & {
  /**
   * @generated from field: anduril.entitymanager.v1.Position value = 1;
   */
  value?: Position;
};

/**
 * Describes the message anduril.entitymanager.v1.PositionType.
 * Use `create(PositionTypeSchema)` to create a new message.
 */
export declare const PositionTypeSchema: GenMessage<PositionType>;

/**
 * The BoundedShapeType represents any static fully-enclosed shape.
 *
 * @generated from message anduril.entitymanager.v1.BoundedShapeType
 */
export declare type BoundedShapeType = Message<"anduril.entitymanager.v1.BoundedShapeType"> & {
  /**
   * @generated from oneof anduril.entitymanager.v1.BoundedShapeType.value
   */
  value: {
    /**
     * @generated from field: anduril.entitymanager.v1.GeoPolygon polygon_value = 1;
     */
    value: GeoPolygon;
    case: "polygonValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entitymanager.v1.BoundedShapeType.
 * Use `create(BoundedShapeTypeSchema)` to create a new message.
 */
export declare const BoundedShapeTypeSchema: GenMessage<BoundedShapeType>;

/**
 * The HeadingType represents the heading in degrees for an entity's
 * attitudeEnu quaternion to be compared against. Defaults between a range of 0 to 360
 *
 * @generated from message anduril.entitymanager.v1.HeadingType
 */
export declare type HeadingType = Message<"anduril.entitymanager.v1.HeadingType"> & {
  /**
   * @generated from field: int32 value = 1;
   */
  value: number;
};

/**
 * Describes the message anduril.entitymanager.v1.HeadingType.
 * Use `create(HeadingTypeSchema)` to create a new message.
 */
export declare const HeadingTypeSchema: GenMessage<HeadingType>;

/**
 * The RangeType represents a numeric range.
 * Whether endpoints are included are based on the comparator used.
 * Both endpoints must be of the same numeric type.
 *
 * @generated from message anduril.entitymanager.v1.RangeType
 */
export declare type RangeType = Message<"anduril.entitymanager.v1.RangeType"> & {
  /**
   * @generated from field: anduril.entitymanager.v1.NumericType start = 1;
   */
  start?: NumericType;

  /**
   * @generated from field: anduril.entitymanager.v1.NumericType end = 2;
   */
  end?: NumericType;
};

/**
 * Describes the message anduril.entitymanager.v1.RangeType.
 * Use `create(RangeTypeSchema)` to create a new message.
 */
export declare const RangeTypeSchema: GenMessage<RangeType>;

/**
 * The Comparator specifies the set of supported comparison operations. It also provides the
 * mapping information about which comparators are supported for which values. Services that wish
 * to implement entity filters must provide validation functionality to strictly enforce these
 * mappings.
 *
 * @generated from enum anduril.entitymanager.v1.Comparator
 */
export enum Comparator {
  /**
   * @generated from enum value: COMPARATOR_INVALID = 0;
   */
  INVALID = 0,

  /**
   * Comparators for: boolean, numeric, string, enum, position, timestamp, positions, and bounded shapes.
   *
   * @generated from enum value: COMPARATOR_MATCH_ALL = 11;
   */
  MATCH_ALL = 11,

  /**
   * Comparators for: boolean, numeric, string, enum, position, and timestamp.
   *
   * @generated from enum value: COMPARATOR_EQUALITY = 1;
   */
  EQUALITY = 1,

  /**
   * @generated from enum value: COMPARATOR_IN = 9;
   */
  IN = 9,

  /**
   * Comparators for: numeric, string, and timestamp.
   *
   * @generated from enum value: COMPARATOR_LESS_THAN = 2;
   */
  LESS_THAN = 2,

  /**
   * @generated from enum value: COMPARATOR_GREATER_THAN = 3;
   */
  GREATER_THAN = 3,

  /**
   * @generated from enum value: COMPARATOR_LESS_THAN_EQUAL_TO = 4;
   */
  LESS_THAN_EQUAL_TO = 4,

  /**
   * @generated from enum value: COMPARATOR_GREATER_THAN_EQUAL_TO = 5;
   */
  GREATER_THAN_EQUAL_TO = 5,

  /**
   * Comparators for: positions and bounded shapes.
   *
   * @generated from enum value: COMPARATOR_WITHIN = 6;
   */
  WITHIN = 6,

  /**
   * Comparators for: existential checks.
   * TRUE if path to field exists (parent message is present), and either:
   *   1. the field is a primitive: all values including default pass check.
   *   2. the field is a message and set/present.
   *   3. the field is repeated or map with size > 0.
   * FALSE unless path exists and one of the above 3 conditions is met
   *
   * @generated from enum value: COMPARATOR_EXISTS = 7;
   */
  EXISTS = 7,

  /**
   * Comparator for string type only.
   *
   * @generated from enum value: COMPARATOR_CASE_INSENSITIVE_EQUALITY = 8;
   */
  CASE_INSENSITIVE_EQUALITY = 8,

  /**
   * @generated from enum value: COMPARATOR_CASE_INSENSITIVE_EQUALITY_IN = 10;
   */
  CASE_INSENSITIVE_EQUALITY_IN = 10,

  /**
   * Comparators for range types only.
   * Closed (inclusive endpoints) [a, b]
   *
   * @generated from enum value: COMPARATOR_RANGE_CLOSED = 12;
   */
  RANGE_CLOSED = 12,
}

/**
 * Describes the enum anduril.entitymanager.v1.Comparator.
 */
export declare const ComparatorSchema: GenEnum<Comparator>;

/**
 * The ListComparator determines how to compose statement evaluations for members of a list. For
 * example, if ANY_OF is specified, the ListOperation in which the ListComparator is embedded
 * will return TRUE if any of the values in the list returns true for the ListOperation's child
 * statement.
 *
 * @generated from enum anduril.entitymanager.v1.ListComparator
 */
export enum ListComparator {
  /**
   * @generated from enum value: LIST_COMPARATOR_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: LIST_COMPARATOR_ANY_OF = 1;
   */
  ANY_OF = 1,
}

/**
 * Describes the enum anduril.entitymanager.v1.ListComparator.
 */
export declare const ListComparatorSchema: GenEnum<ListComparator>;

