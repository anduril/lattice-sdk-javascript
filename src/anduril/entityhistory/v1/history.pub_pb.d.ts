// @generated by protoc-gen-es v2.0.0
// @generated from file anduril/entityhistory/v1/history.pub.proto (package anduril.entityhistory.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Entity } from "../../entitymanager/v1/entity.pub_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { EntityEvent } from "../../entitymanager/v1/entity_manager_api.pub_pb";
import type { Location, LocationUncertainty } from "../../entitymanager/v1/location.pub_pb";

/**
 * Describes the file anduril/entityhistory/v1/history.pub.proto.
 */
export declare const file_anduril_entityhistory_v1_history_pub: GenFile;

/**
 * Pages of requested history. One page is returned for each Query. If the
 * returned data can not all fit into one grpc response, a NextPageToken
 * will be returned. The page returned corresponds to the requested type
 * of history in the HistoryQuery.
 *
 * @generated from message anduril.entityhistory.v1.HistoryPage
 */
export declare type HistoryPage = Message<"anduril.entityhistory.v1.HistoryPage"> & {
  /**
   * @generated from oneof anduril.entityhistory.v1.HistoryPage.type
   */
  type: {
    /**
     * @generated from field: anduril.entityhistory.v1.TrailPage trail_page = 1;
     */
    value: TrailPage;
    case: "trailPage";
  } | {
    /**
     * @generated from field: anduril.entityhistory.v1.SnapshotPage snapshot_page = 2;
     */
    value: SnapshotPage;
    case: "snapshotPage";
  } | {
    /**
     * @generated from field: anduril.entityhistory.v1.CompositePage composite_page = 3;
     */
    value: CompositePage;
    case: "compositePage";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entityhistory.v1.HistoryPage.
 * Use `create(HistoryPageSchema)` to create a new message.
 */
export declare const HistoryPageSchema: GenMessage<HistoryPage>;

/**
 * A page of snapshots.
 *
 * @generated from message anduril.entityhistory.v1.SnapshotPage
 */
export declare type SnapshotPage = Message<"anduril.entityhistory.v1.SnapshotPage"> & {
  /**
   * @generated from field: repeated anduril.entityhistory.v1.Snapshot snapshots = 1;
   */
  snapshots: Snapshot[];
};

/**
 * Describes the message anduril.entityhistory.v1.SnapshotPage.
 * Use `create(SnapshotPageSchema)` to create a new message.
 */
export declare const SnapshotPageSchema: GenMessage<SnapshotPage>;

/**
 * A page of trails.
 *
 * @generated from message anduril.entityhistory.v1.TrailPage
 */
export declare type TrailPage = Message<"anduril.entityhistory.v1.TrailPage"> & {
  /**
   * @generated from field: repeated anduril.entityhistory.v1.Trail trails = 1;
   */
  trails: Trail[];
};

/**
 * Describes the message anduril.entityhistory.v1.TrailPage.
 * Use `create(TrailPageSchema)` to create a new message.
 */
export declare const TrailPageSchema: GenMessage<TrailPage>;

/**
 * A page of composited history.
 *
 * @generated from message anduril.entityhistory.v1.CompositePage
 */
export declare type CompositePage = Message<"anduril.entityhistory.v1.CompositePage"> & {
  /**
   * @generated from field: repeated anduril.entityhistory.v1.Snapshot snapshots = 1;
   */
  snapshots: Snapshot[];

  /**
   * @generated from field: repeated anduril.entityhistory.v1.Trail trails = 2;
   */
  trails: Trail[];
};

/**
 * Describes the message anduril.entityhistory.v1.CompositePage.
 * Use `create(CompositePageSchema)` to create a new message.
 */
export declare const CompositePageSchema: GenMessage<CompositePage>;

/**
 * A snapshot is a summarized history for a given entity. It consists of the
 * origin state for the entity, its current state, and snapshot events which
 * represent major changes to the entity over its lifespan.
 *
 * @generated from message anduril.entityhistory.v1.Snapshot
 */
export declare type Snapshot = Message<"anduril.entityhistory.v1.Snapshot"> & {
  /**
   * The latest state for a given entity.
   *
   * to be deprecated
   *
   * @generated from field: anduril.entitymanager.v1.Entity latest_state = 1;
   */
  latestState?: Entity;

  /**
   * The first observed state of the entity.
   *
   * to be deprecated
   *
   * @generated from field: anduril.entitymanager.v1.Entity original_state = 2;
   */
  originalState?: Entity;

  /**
   * A set of events corresponding to significant changes in this entity.
   *
   * @generated from field: repeated anduril.entityhistory.v1.SnapshotEvent snapshot_events = 3;
   */
  snapshotEvents: SnapshotEvent[];
};

/**
 * Describes the message anduril.entityhistory.v1.Snapshot.
 * Use `create(SnapshotSchema)` to create a new message.
 */
export declare const SnapshotSchema: GenMessage<Snapshot>;

/**
 * A snapshot event represents any significant change to the entity.
 *
 * @generated from message anduril.entityhistory.v1.SnapshotEvent
 */
export declare type SnapshotEvent = Message<"anduril.entityhistory.v1.SnapshotEvent"> & {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * Represents the type of event the occurred.
   *
   * @generated from oneof anduril.entityhistory.v1.SnapshotEvent.type
   */
  type: {
    /**
     * @generated from field: anduril.entityhistory.v1.EntityChangeEvent entity_change_event = 2;
     */
    value: EntityChangeEvent;
    case: "entityChangeEvent";
  } | {
    /**
     * @generated from field: anduril.entitymanager.v1.EntityEvent entity_state = 3;
     */
    value: EntityEvent;
    case: "entityState";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.entityhistory.v1.SnapshotEvent.
 * Use `create(SnapshotEventSchema)` to create a new message.
 */
export declare const SnapshotEventSchema: GenMessage<SnapshotEvent>;

/**
 * An entity change is encoded as a timestamp and two partial entity states
 * representing the fields that changed on the entity. For example:
 * From: Entity: { MilView: { Disposition: Neutral } }.
 * To: Entity: { MilView: { Disposition: Suspicious } }.
 *
 * Clients can determine the updated fields by examining the entity partials
 * included in from & to.
 *
 * @generated from message anduril.entityhistory.v1.EntityChangeEvent
 */
export declare type EntityChangeEvent = Message<"anduril.entityhistory.v1.EntityChangeEvent"> & {
  /**
   * A partial of an entity state containing the old field(s).
   *
   * @generated from field: anduril.entitymanager.v1.Entity from = 1;
   */
  from?: Entity;

  /**
   * A partial of an entity state containing the changed field(s).
   *
   * @generated from field: anduril.entitymanager.v1.Entity to = 2;
   */
  to?: Entity;
};

/**
 * Describes the message anduril.entityhistory.v1.EntityChangeEvent.
 * Use `create(EntityChangeEventSchema)` to create a new message.
 */
export declare const EntityChangeEventSchema: GenMessage<EntityChangeEvent>;

/**
 * A trail represents the historical positions of a given entity.
 *
 * @generated from message anduril.entityhistory.v1.Trail
 */
export declare type Trail = Message<"anduril.entityhistory.v1.Trail"> & {
  /**
   * The GUID of the trail's parent entity.
   *
   * @generated from field: string entity_id = 1;
   */
  entityId: string;

  /**
   * @generated from field: repeated anduril.entityhistory.v1.TrailPoint trail_points = 2;
   */
  trailPoints: TrailPoint[];
};

/**
 * Describes the message anduril.entityhistory.v1.Trail.
 * Use `create(TrailSchema)` to create a new message.
 */
export declare const TrailSchema: GenMessage<Trail>;

/**
 * A trail point consists of a timestamp, location, and uncertainty.
 * The above information preserves kinematics, precise position, and
 * uncertainty for all reported points.
 *
 * @generated from message anduril.entityhistory.v1.TrailPoint
 */
export declare type TrailPoint = Message<"anduril.entityhistory.v1.TrailPoint"> & {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: anduril.entitymanager.v1.Location location = 2;
   */
  location?: Location;

  /**
   * @generated from field: anduril.entitymanager.v1.LocationUncertainty location_uncertainty = 3;
   */
  locationUncertainty?: LocationUncertainty;
};

/**
 * Describes the message anduril.entityhistory.v1.TrailPoint.
 * Use `create(TrailPointSchema)` to create a new message.
 */
export declare const TrailPointSchema: GenMessage<TrailPoint>;

/**
 * Query page token key used for EntityHistory and enables paginated query responses. Clients should not modify values and
 * only provide the key back to the server if is_complete is false.
 *
 * @generated from message anduril.entityhistory.v1.HistoryPageToken
 */
export declare type HistoryPageToken = Message<"anduril.entityhistory.v1.HistoryPageToken"> & {
  /**
   * @generated from field: string query_id = 1;
   */
  queryId: string;

  /**
   * @generated from field: int32 page_num = 2;
   */
  pageNum: number;

  /**
   * @generated from field: string entity_id = 3;
   */
  entityId: string;

  /**
   * @generated from field: anduril.entityhistory.v1.StorageSystem storage_system = 4;
   */
  storageSystem: StorageSystem;

  /**
   * Query start time for the current entity in ISO-8601 format.
   *
   * @generated from field: string start_time = 5;
   */
  startTime: string;

  /**
   * True if the query is complete, false if another request beginning with this key should be sent to consume more
   * data.
   *
   * @generated from field: bool is_complete = 6;
   */
  isComplete: boolean;
};

/**
 * Describes the message anduril.entityhistory.v1.HistoryPageToken.
 * Use `create(HistoryPageTokenSchema)` to create a new message.
 */
export declare const HistoryPageTokenSchema: GenMessage<HistoryPageToken>;

/**
 * @generated from enum anduril.entityhistory.v1.HistoryType
 */
export enum HistoryType {
  /**
   * @generated from enum value: HISTORY_TYPE_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: HISTORY_TYPE_TRAIL = 1;
   */
  TRAIL = 1,

  /**
   * @generated from enum value: HISTORY_TYPE_SNAPSHOT = 2;
   */
  SNAPSHOT = 2,

  /**
   * @generated from enum value: HISTORY_TYPE_COMPOSITE = 3;
   */
  COMPOSITE = 3,
}

/**
 * Describes the enum anduril.entityhistory.v1.HistoryType.
 */
export declare const HistoryTypeSchema: GenEnum<HistoryType>;

/**
 * @generated from enum anduril.entityhistory.v1.StorageSystem
 */
export enum StorageSystem {
  /**
   * @generated from enum value: STORAGE_SYSTEM_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: STORAGE_SYSTEM_PERSISTENT = 1;
   */
  PERSISTENT = 1,

  /**
   * @generated from enum value: STORAGE_SYSTEM_EPHEMERAL = 2;
   */
  EPHEMERAL = 2,
}

/**
 * Describes the enum anduril.entityhistory.v1.StorageSystem.
 */
export declare const StorageSystemSchema: GenEnum<StorageSystem>;

