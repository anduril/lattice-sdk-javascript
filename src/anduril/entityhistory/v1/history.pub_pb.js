// @generated by protoc-gen-es v1.7.2
// @generated from file anduril/entityhistory/v1/history.pub.proto (package anduril.entityhistory.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Timestamp } from "@bufbuild/protobuf";
import { Entity } from "../../entitymanager/v1/entity.pub_pb.js";
import { EntityEvent } from "../../entitymanager/v1/entity_manager_api.pub_pb.js";
import { Location, LocationUncertainty } from "../../entitymanager/v1/location.pub_pb.js";

/**
 * @generated from enum anduril.entityhistory.v1.HistoryType
 */
export const HistoryType = proto3.makeEnum(
  "anduril.entityhistory.v1.HistoryType",
  [
    {no: 0, name: "HISTORY_TYPE_INVALID", localName: "INVALID"},
    {no: 1, name: "HISTORY_TYPE_TRAIL", localName: "TRAIL"},
    {no: 2, name: "HISTORY_TYPE_SNAPSHOT", localName: "SNAPSHOT"},
    {no: 3, name: "HISTORY_TYPE_COMPOSITE", localName: "COMPOSITE"},
  ],
);

/**
 * @generated from enum anduril.entityhistory.v1.StorageSystem
 */
export const StorageSystem = proto3.makeEnum(
  "anduril.entityhistory.v1.StorageSystem",
  [
    {no: 0, name: "STORAGE_SYSTEM_INVALID", localName: "INVALID"},
    {no: 1, name: "STORAGE_SYSTEM_PERSISTENT", localName: "PERSISTENT"},
    {no: 2, name: "STORAGE_SYSTEM_EPHEMERAL", localName: "EPHEMERAL"},
  ],
);

/**
 * Pages of requested history. One page is returned for each Query. If the
 * returned data can not all fit into one grpc response, a NextPageToken
 * will be returned. The page returned corresponds to the requested type
 * of history in the HistoryQuery.
 *
 * @generated from message anduril.entityhistory.v1.HistoryPage
 */
export const HistoryPage = proto3.makeMessageType(
  "anduril.entityhistory.v1.HistoryPage",
  () => [
    { no: 1, name: "trail_page", kind: "message", T: TrailPage, oneof: "type" },
    { no: 2, name: "snapshot_page", kind: "message", T: SnapshotPage, oneof: "type" },
    { no: 3, name: "composite_page", kind: "message", T: CompositePage, oneof: "type" },
  ],
);

/**
 * A page of snapshots.
 *
 * @generated from message anduril.entityhistory.v1.SnapshotPage
 */
export const SnapshotPage = proto3.makeMessageType(
  "anduril.entityhistory.v1.SnapshotPage",
  () => [
    { no: 1, name: "snapshots", kind: "message", T: Snapshot, repeated: true },
  ],
);

/**
 * A page of trails.
 *
 * @generated from message anduril.entityhistory.v1.TrailPage
 */
export const TrailPage = proto3.makeMessageType(
  "anduril.entityhistory.v1.TrailPage",
  () => [
    { no: 1, name: "trails", kind: "message", T: Trail, repeated: true },
  ],
);

/**
 * A page of composited history.
 *
 * @generated from message anduril.entityhistory.v1.CompositePage
 */
export const CompositePage = proto3.makeMessageType(
  "anduril.entityhistory.v1.CompositePage",
  () => [
    { no: 1, name: "snapshots", kind: "message", T: Snapshot, repeated: true },
    { no: 2, name: "trails", kind: "message", T: Trail, repeated: true },
  ],
);

/**
 * A snapshot is a summarized history for a given entity. It consists of the
 * origin state for the entity, its current state, and snapshot events which
 * represent major changes to the entity over its lifespan.
 *
 * @generated from message anduril.entityhistory.v1.Snapshot
 */
export const Snapshot = proto3.makeMessageType(
  "anduril.entityhistory.v1.Snapshot",
  () => [
    { no: 1, name: "latest_state", kind: "message", T: Entity },
    { no: 2, name: "original_state", kind: "message", T: Entity },
    { no: 3, name: "snapshot_events", kind: "message", T: SnapshotEvent, repeated: true },
  ],
);

/**
 * A snapshot event represents any significant change to the entity.
 *
 * @generated from message anduril.entityhistory.v1.SnapshotEvent
 */
export const SnapshotEvent = proto3.makeMessageType(
  "anduril.entityhistory.v1.SnapshotEvent",
  () => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "entity_change_event", kind: "message", T: EntityChangeEvent, oneof: "type" },
    { no: 3, name: "entity_state", kind: "message", T: EntityEvent, oneof: "type" },
  ],
);

/**
 * An entity change is encoded as a timestamp and two partial entity states
 * representing the fields that changed on the entity. For example:
 * From: Entity: { MilView: { Disposition: Neutral } }.
 * To: Entity: { MilView: { Disposition: Suspicious } }.
 *
 * Clients can determine the updated fields by examining the entity partials
 * included in from & to.
 *
 * @generated from message anduril.entityhistory.v1.EntityChangeEvent
 */
export const EntityChangeEvent = proto3.makeMessageType(
  "anduril.entityhistory.v1.EntityChangeEvent",
  () => [
    { no: 1, name: "from", kind: "message", T: Entity },
    { no: 2, name: "to", kind: "message", T: Entity },
  ],
);

/**
 * A trail represents the historical positions of a given entity.
 *
 * @generated from message anduril.entityhistory.v1.Trail
 */
export const Trail = proto3.makeMessageType(
  "anduril.entityhistory.v1.Trail",
  () => [
    { no: 1, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "trail_points", kind: "message", T: TrailPoint, repeated: true },
  ],
);

/**
 * A trail point consists of a timestamp, location, and uncertainty.
 * The above information preserves kinematics, precise position, and
 * uncertainty for all reported points.
 *
 * @generated from message anduril.entityhistory.v1.TrailPoint
 */
export const TrailPoint = proto3.makeMessageType(
  "anduril.entityhistory.v1.TrailPoint",
  () => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "location", kind: "message", T: Location },
    { no: 3, name: "location_uncertainty", kind: "message", T: LocationUncertainty },
  ],
);

/**
 * Query page token key used for EntityHistory and enables paginated query responses. Clients should not modify values and
 * only provide the key back to the server if is_complete is false.
 *
 * @generated from message anduril.entityhistory.v1.HistoryPageToken
 */
export const HistoryPageToken = proto3.makeMessageType(
  "anduril.entityhistory.v1.HistoryPageToken",
  () => [
    { no: 1, name: "query_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_num", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "storage_system", kind: "enum", T: proto3.getEnumType(StorageSystem) },
    { no: 5, name: "start_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "is_complete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

