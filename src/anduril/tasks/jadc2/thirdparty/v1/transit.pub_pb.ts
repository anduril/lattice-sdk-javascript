// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/tasks/jadc2/thirdparty/v1/transit.pub.proto (package anduril.tasks.jadc2.thirdparty.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { DoubleValue, Message, proto3 } from "@bufbuild/protobuf";
import { LLA } from "../../../../type/coords.pub_pb.js";

/**
 * Transit represents moving a vehicle on a path through one or more points.
 *
 * @generated from message anduril.tasks.jadc2.thirdparty.v1.Transit
 */
export class Transit extends Message<Transit> {
  /**
   * The path consisting of all segments to be taken for this transit task.
   *
   * @generated from field: repeated anduril.tasks.jadc2.thirdparty.v1.PathSegment path = 1;
   */
  path: PathSegment[] = [];

  /**
   * Speed in which the vehicle will move through each of the path segments.
   *
   * @generated from field: google.protobuf.DoubleValue surface_speed_ms = 2;
   */
  surfaceSpeedMs?: number;

  constructor(data?: PartialMessage<Transit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.tasks.jadc2.thirdparty.v1.Transit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "message", T: PathSegment, repeated: true },
    { no: 2, name: "surface_speed_ms", kind: "message", T: DoubleValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transit {
    return new Transit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transit {
    return new Transit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transit {
    return new Transit().fromJsonString(jsonString, options);
  }

  static equals(a: Transit | PlainMessage<Transit> | undefined, b: Transit | PlainMessage<Transit> | undefined): boolean {
    return proto3.util.equals(Transit, a, b);
  }
}

/**
 * @generated from message anduril.tasks.jadc2.thirdparty.v1.PathSegment
 */
export class PathSegment extends Message<PathSegment> {
  /**
   * Describes the end of the path segment, the starting point is the end of the previous segment or the
   * current position if first. Note that the Altitude reference for a given waypoint dictates the height
   *  mode used when traversing TO that waypoint.
   *
   * @generated from field: anduril.type.LLA endpoint = 1;
   */
  endpoint?: LLA;

  constructor(data?: PartialMessage<PathSegment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.tasks.jadc2.thirdparty.v1.PathSegment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "message", T: LLA },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PathSegment {
    return new PathSegment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PathSegment {
    return new PathSegment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PathSegment {
    return new PathSegment().fromJsonString(jsonString, options);
  }

  static equals(a: PathSegment | PlainMessage<PathSegment> | undefined, b: PathSegment | PlainMessage<PathSegment> | undefined): boolean {
    return proto3.util.equals(PathSegment, a, b);
  }
}

/**
 * TeamTransit represents moving a team of vehicles into a zone.
 * The specifics of how each vehicle in the team behaves is determined by the specific autonomy logic.
 *
 * @generated from message anduril.tasks.jadc2.thirdparty.v1.TeamTransit
 */
export class TeamTransit extends Message<TeamTransit> {
  /**
   * Reference to GeoPolygon GeoEntity representing the transit zone area.
   *
   * @generated from field: string transit_zone_entity_id = 1;
   */
  transitZoneEntityId = "";

  /**
   * Speed in which the vehicles will move to the zone.
   *
   * @generated from field: google.protobuf.DoubleValue surface_speed_ms = 2;
   */
  surfaceSpeedMs?: number;

  constructor(data?: PartialMessage<TeamTransit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.tasks.jadc2.thirdparty.v1.TeamTransit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transit_zone_entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "surface_speed_ms", kind: "message", T: DoubleValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TeamTransit {
    return new TeamTransit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TeamTransit {
    return new TeamTransit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TeamTransit {
    return new TeamTransit().fromJsonString(jsonString, options);
  }

  static equals(a: TeamTransit | PlainMessage<TeamTransit> | undefined, b: TeamTransit | PlainMessage<TeamTransit> | undefined): boolean {
    return proto3.util.equals(TeamTransit, a, b);
  }
}

