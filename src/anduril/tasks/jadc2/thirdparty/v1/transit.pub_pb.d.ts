// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/tasks/jadc2/thirdparty/v1/transit.pub.proto (package anduril.tasks.jadc2.thirdparty.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { LLA } from "../../../../type/coords.pub_pb.js";

/**
 * Transit represents moving a vehicle on a path through one or more points.
 *
 * @generated from message anduril.tasks.jadc2.thirdparty.v1.Transit
 */
export declare class Transit extends Message<Transit> {
  /**
   * The path consisting of all segments to be taken for this transit task.
   *
   * @generated from field: repeated anduril.tasks.jadc2.thirdparty.v1.PathSegment path = 1;
   */
  path: PathSegment[];

  /**
   * Speed in which the vehicle will move through each of the path segments.
   *
   * @generated from field: google.protobuf.DoubleValue surface_speed_ms = 2;
   */
  surfaceSpeedMs?: number;

  constructor(data?: PartialMessage<Transit>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.tasks.jadc2.thirdparty.v1.Transit";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transit;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transit;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transit;

  static equals(a: Transit | PlainMessage<Transit> | undefined, b: Transit | PlainMessage<Transit> | undefined): boolean;
}

/**
 * @generated from message anduril.tasks.jadc2.thirdparty.v1.PathSegment
 */
export declare class PathSegment extends Message<PathSegment> {
  /**
   * Describes the end of the path segment, the starting point is the end of the previous segment or the
   * current position if first. Note that the Altitude reference for a given waypoint dictates the height
   *  mode used when traversing TO that waypoint.
   *
   * @generated from field: anduril.type.LLA endpoint = 1;
   */
  endpoint?: LLA;

  constructor(data?: PartialMessage<PathSegment>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.tasks.jadc2.thirdparty.v1.PathSegment";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PathSegment;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PathSegment;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PathSegment;

  static equals(a: PathSegment | PlainMessage<PathSegment> | undefined, b: PathSegment | PlainMessage<PathSegment> | undefined): boolean;
}

/**
 * TeamTransit represents moving a team of vehicles into a zone.
 * The specifics of how each vehicle in the team behaves is determined by the specific autonomy logic.
 *
 * @generated from message anduril.tasks.jadc2.thirdparty.v1.TeamTransit
 */
export declare class TeamTransit extends Message<TeamTransit> {
  /**
   * Reference to GeoPolygon GeoEntity representing the transit zone area.
   *
   * @generated from field: string transit_zone_entity_id = 1;
   */
  transitZoneEntityId: string;

  /**
   * Speed in which the vehicles will move to the zone.
   *
   * @generated from field: google.protobuf.DoubleValue surface_speed_ms = 2;
   */
  surfaceSpeedMs?: number;

  constructor(data?: PartialMessage<TeamTransit>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.tasks.jadc2.thirdparty.v1.TeamTransit";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TeamTransit;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TeamTransit;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TeamTransit;

  static equals(a: TeamTransit | PlainMessage<TeamTransit> | undefined, b: TeamTransit | PlainMessage<TeamTransit> | undefined): boolean;
}

