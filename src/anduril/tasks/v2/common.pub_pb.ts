// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/tasks/v2/common.pub.proto (package anduril.tasks.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum anduril.tasks.v2.ControlAreaType
 */
export enum ControlAreaType {
  /**
   * @generated from enum value: CONTROL_AREA_TYPE_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: CONTROL_AREA_TYPE_KEEP_IN_ZONE = 1;
   */
  KEEP_IN_ZONE = 1,

  /**
   * @generated from enum value: CONTROL_AREA_TYPE_KEEP_OUT_ZONE = 2;
   */
  KEEP_OUT_ZONE = 2,

  /**
   * Zone for an autonomous asset to nose-dive into
   * when its assignment has been concluded
   *
   * @generated from enum value: CONTROL_AREA_TYPE_DITCH_ZONE = 3;
   */
  DITCH_ZONE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ControlAreaType)
proto3.util.setEnumType(ControlAreaType, "anduril.tasks.v2.ControlAreaType", [
  { no: 0, name: "CONTROL_AREA_TYPE_INVALID" },
  { no: 1, name: "CONTROL_AREA_TYPE_KEEP_IN_ZONE" },
  { no: 2, name: "CONTROL_AREA_TYPE_KEEP_OUT_ZONE" },
  { no: 3, name: "CONTROL_AREA_TYPE_DITCH_ZONE" },
]);

/**
 * Maps to the UCI DurationRangeType.
 *
 * @generated from message anduril.tasks.v2.DurationRange
 */
export class DurationRange extends Message<DurationRange> {
  /**
   * @generated from field: google.protobuf.Duration min = 1;
   */
  min?: Duration;

  /**
   * @generated from field: google.protobuf.Duration max = 2;
   */
  max?: Duration;

  constructor(data?: PartialMessage<DurationRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.tasks.v2.DurationRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "message", T: Duration },
    { no: 2, name: "max", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DurationRange {
    return new DurationRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DurationRange {
    return new DurationRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DurationRange {
    return new DurationRange().fromJsonString(jsonString, options);
  }

  static equals(a: DurationRange | PlainMessage<DurationRange> | undefined, b: DurationRange | PlainMessage<DurationRange> | undefined): boolean {
    return proto3.util.equals(DurationRange, a, b);
  }
}

/**
 * Maps to the UCI AnglePair.
 *
 * @generated from message anduril.tasks.v2.AnglePair
 */
export class AnglePair extends Message<AnglePair> {
  /**
   * Angle lower bound in radians.
   *
   * @generated from field: double min = 1;
   */
  min = 0;

  /**
   * Angle lower bound in radians.
   *
   * @generated from field: double max = 2;
   */
  max = 0;

  constructor(data?: PartialMessage<AnglePair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.tasks.v2.AnglePair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "max", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnglePair {
    return new AnglePair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnglePair {
    return new AnglePair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnglePair {
    return new AnglePair().fromJsonString(jsonString, options);
  }

  static equals(a: AnglePair | PlainMessage<AnglePair> | undefined, b: AnglePair | PlainMessage<AnglePair> | undefined): boolean {
    return proto3.util.equals(AnglePair, a, b);
  }
}

/**
 * Maps to UCI AreaConstraints.
 *
 * @generated from message anduril.tasks.v2.AreaConstraints
 */
export class AreaConstraints extends Message<AreaConstraints> {
  /**
   * @generated from field: anduril.tasks.v2.AltitudeConstraint altitude_constraint = 1;
   */
  altitudeConstraint?: AltitudeConstraint;

  constructor(data?: PartialMessage<AreaConstraints>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.tasks.v2.AreaConstraints";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "altitude_constraint", kind: "message", T: AltitudeConstraint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AreaConstraints {
    return new AreaConstraints().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AreaConstraints {
    return new AreaConstraints().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AreaConstraints {
    return new AreaConstraints().fromJsonString(jsonString, options);
  }

  static equals(a: AreaConstraints | PlainMessage<AreaConstraints> | undefined, b: AreaConstraints | PlainMessage<AreaConstraints> | undefined): boolean {
    return proto3.util.equals(AreaConstraints, a, b);
  }
}

/**
 * @generated from message anduril.tasks.v2.AltitudeConstraint
 */
export class AltitudeConstraint extends Message<AltitudeConstraint> {
  /**
   * Minimum altitude (AGL) in meters.
   *
   * @generated from field: double min = 1;
   */
  min = 0;

  /**
   * Maximum altitude (AGL) in meters.
   *
   * @generated from field: double max = 2;
   */
  max = 0;

  constructor(data?: PartialMessage<AltitudeConstraint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.tasks.v2.AltitudeConstraint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "max", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AltitudeConstraint {
    return new AltitudeConstraint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AltitudeConstraint {
    return new AltitudeConstraint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AltitudeConstraint {
    return new AltitudeConstraint().fromJsonString(jsonString, options);
  }

  static equals(a: AltitudeConstraint | PlainMessage<AltitudeConstraint> | undefined, b: AltitudeConstraint | PlainMessage<AltitudeConstraint> | undefined): boolean {
    return proto3.util.equals(AltitudeConstraint, a, b);
  }
}

/**
 * Includes information about an Agent.
 *
 * @generated from message anduril.tasks.v2.Agent
 */
export class Agent extends Message<Agent> {
  /**
   * @generated from field: string asset_id = 1;
   */
  assetId = "";

  /**
   * @generated from field: string entity_id = 2;
   */
  entityId = "";

  constructor(data?: PartialMessage<Agent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.tasks.v2.Agent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Agent {
    return new Agent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Agent {
    return new Agent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Agent {
    return new Agent().fromJsonString(jsonString, options);
  }

  static equals(a: Agent | PlainMessage<Agent> | undefined, b: Agent | PlainMessage<Agent> | undefined): boolean {
    return proto3.util.equals(Agent, a, b);
  }
}

/**
 * Models a Control Area within which Agents must operate.
 *
 * @generated from message anduril.tasks.v2.ControlArea
 */
export class ControlArea extends Message<ControlArea> {
  /**
   * Reference to GeoPolygon GeoEntity representing the ControlArea.
   *
   * @generated from field: string entity_id = 1;
   */
  entityId = "";

  /**
   * Type of ControlArea.
   *
   * @generated from field: anduril.tasks.v2.ControlAreaType control_area_type = 2;
   */
  controlAreaType = ControlAreaType.INVALID;

  constructor(data?: PartialMessage<ControlArea>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.tasks.v2.ControlArea";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "control_area_type", kind: "enum", T: proto3.getEnumType(ControlAreaType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ControlArea {
    return new ControlArea().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ControlArea {
    return new ControlArea().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ControlArea {
    return new ControlArea().fromJsonString(jsonString, options);
  }

  static equals(a: ControlArea | PlainMessage<ControlArea> | undefined, b: ControlArea | PlainMessage<ControlArea> | undefined): boolean {
    return proto3.util.equals(ControlArea, a, b);
  }
}

