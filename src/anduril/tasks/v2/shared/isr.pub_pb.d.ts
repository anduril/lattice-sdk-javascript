// @generated by protoc-gen-es v2.0.0
// @generated from file anduril/tasks/v2/shared/isr.pub.proto (package anduril.tasks.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Objective, Point } from "../objective.pub_pb";
import type { Agent, ControlArea, DurationRange } from "../common.pub_pb";
import type { DoubleValue, FloatValue, Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file anduril/tasks/v2/shared/isr.pub.proto.
 */
export declare const file_anduril_tasks_v2_shared_isr_pub: GenFile;

/**
 * Maps to BREVITY code INVESTIGATE.
 *
 * @generated from message anduril.tasks.v2.Investigate
 */
export declare type Investigate = Message<"anduril.tasks.v2.Investigate"> & {
  /**
   * Indicates where to investigate.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Optional common ISR parameters.
   *
   * @generated from field: anduril.tasks.v2.ISRParameters parameters = 2;
   */
  parameters?: ISRParameters;
};

/**
 * Describes the message anduril.tasks.v2.Investigate.
 * Use `create(InvestigateSchema)` to create a new message.
 */
export declare const InvestigateSchema: GenMessage<Investigate>;

/**
 * Maps to BREVITY code ID with type Visual.
 *
 * @generated from message anduril.tasks.v2.VisualId
 */
export declare type VisualId = Message<"anduril.tasks.v2.VisualId"> & {
  /**
   * Indicates what to identify.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Optional common ISR parameters.
   *
   * @generated from field: anduril.tasks.v2.ISRParameters parameters = 2;
   */
  parameters?: ISRParameters;
};

/**
 * Describes the message anduril.tasks.v2.VisualId.
 * Use `create(VisualIdSchema)` to create a new message.
 */
export declare const VisualIdSchema: GenMessage<VisualId>;

/**
 * Maps to BREVITY code MAP.
 *
 * @generated from message anduril.tasks.v2.Map
 */
export declare type Map = Message<"anduril.tasks.v2.Map"> & {
  /**
   * Indicates where to perform the SAR.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Optional common ISR parameters.
   *
   * @generated from field: anduril.tasks.v2.ISRParameters parameters = 2;
   */
  parameters?: ISRParameters;

  /**
   * minimum desired NIIRS (National Image Interpretability Rating Scales) see https://irp.fas.org/imint/niirs.htm
   *
   * @generated from field: google.protobuf.UInt32Value min_niirs = 3;
   */
  minNiirs?: number;
};

/**
 * Describes the message anduril.tasks.v2.Map.
 * Use `create(MapSchema)` to create a new message.
 */
export declare const MapSchema: GenMessage<Map>;

/**
 * Maps to the Loiter behavior within the FlightTask type within UCI v2.
 *
 * @generated from message anduril.tasks.v2.Loiter
 */
export declare type Loiter = Message<"anduril.tasks.v2.Loiter"> & {
  /**
   * Indicates where to perform the loiter.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Specifies the details of the loiter.
   *
   * @generated from field: anduril.tasks.v2.LoiterType loiter_type = 2;
   */
  loiterType?: LoiterType;

  /**
   * Optional common ISR parameters.
   * The loiter radius and bearing should be inferred from the standoff_distance and standoff_angle respectively.
   *
   * @generated from field: anduril.tasks.v2.ISRParameters parameters = 3;
   */
  parameters?: ISRParameters;
};

/**
 * Describes the message anduril.tasks.v2.Loiter.
 * Use `create(LoiterSchema)` to create a new message.
 */
export declare const LoiterSchema: GenMessage<Loiter>;

/**
 * Represents intent to search an area. Maps to the Area Search Team Task within the Mission Autonomy Task Model.
 *
 * @generated from message anduril.tasks.v2.AreaSearch
 */
export declare type AreaSearch = Message<"anduril.tasks.v2.AreaSearch"> & {
  /**
   * Indicates where to perform the area search.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Priors that can be used to inform this AreaSearch.
   *
   * @generated from field: repeated anduril.tasks.v2.Prior priors = 2;
   */
  priors: Prior[];

  /**
   * Agents participating in this AreaSearch.
   *
   * @generated from field: repeated anduril.tasks.v2.Agent participants = 3;
   */
  participants: Agent[];

  /**
   * Control Area for this AreaSearch.
   *
   * TODO: populate remaining fields here as we iterate on the AreaSearch integration.
   *
   * @generated from field: repeated anduril.tasks.v2.ControlArea control_areas = 4;
   */
  controlAreas: ControlArea[];
};

/**
 * Describes the message anduril.tasks.v2.AreaSearch.
 * Use `create(AreaSearchSchema)` to create a new message.
 */
export declare const AreaSearchSchema: GenMessage<AreaSearch>;

/**
 * Represents intent to search a volume. Maps to the Volume Search Team Task within the Mission Autonomy Task Model.
 *
 * @generated from message anduril.tasks.v2.VolumeSearch
 */
export declare type VolumeSearch = Message<"anduril.tasks.v2.VolumeSearch"> & {
  /**
   * Indicates where to perform the volume search.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Priors that can be used to inform this VolumeSearch.
   *
   * @generated from field: repeated anduril.tasks.v2.Prior priors = 2;
   */
  priors: Prior[];

  /**
   * Agents participating in this VolumeSearch.
   *
   * @generated from field: repeated anduril.tasks.v2.Agent participants = 3;
   */
  participants: Agent[];

  /**
   * Control Area for this VolumeSearch.
   *
   * TODO: populate remaining fields here as we iterate on the VolumeSearch integration.
   *
   * @generated from field: repeated anduril.tasks.v2.ControlArea control_areas = 4;
   */
  controlAreas: ControlArea[];
};

/**
 * Describes the message anduril.tasks.v2.VolumeSearch.
 * Use `create(VolumeSearchSchema)` to create a new message.
 */
export declare const VolumeSearchSchema: GenMessage<VolumeSearch>;

/**
 * Task to improve the quality of a track. Maps to the Improve Track Task within the Mission Autonomy Task Model.
 *
 * @generated from message anduril.tasks.v2.ImproveTrackQuality
 */
export declare type ImproveTrackQuality = Message<"anduril.tasks.v2.ImproveTrackQuality"> & {
  /**
   * Indicates the target track that is having its quality improved.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Task will complete when the requested track reaches a TQ >= the termination_track_quality.
   *
   * @generated from field: uint32 termination_track_quality = 2;
   */
  terminationTrackQuality: number;
};

/**
 * Describes the message anduril.tasks.v2.ImproveTrackQuality.
 * Use `create(ImproveTrackQualitySchema)` to create a new message.
 */
export declare const ImproveTrackQualitySchema: GenMessage<ImproveTrackQuality>;

/**
 * Indicates intent to follow an Objective. Maps to Brevity code SHADOW.
 *
 * @generated from message anduril.tasks.v2.Shadow
 */
export declare type Shadow = Message<"anduril.tasks.v2.Shadow"> & {
  /**
   * Indicates what to follow.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Optional common ISR parameters.
   *
   * @generated from field: anduril.tasks.v2.ISRParameters parameters = 2;
   */
  parameters?: ISRParameters;
};

/**
 * Describes the message anduril.tasks.v2.Shadow.
 * Use `create(ShadowSchema)` to create a new message.
 */
export declare const ShadowSchema: GenMessage<Shadow>;

/**
 * Maps to UCI v2 LoiterType.
 *
 * @generated from message anduril.tasks.v2.LoiterType
 */
export declare type LoiterType = Message<"anduril.tasks.v2.LoiterType"> & {
  /**
   * @generated from oneof anduril.tasks.v2.LoiterType.loiter_type
   */
  loiterType: {
    /**
     * @generated from field: anduril.tasks.v2.OrbitType orbit_type = 1;
     */
    value: OrbitType;
    case: "orbitType";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.tasks.v2.LoiterType.
 * Use `create(LoiterTypeSchema)` to create a new message.
 */
export declare const LoiterTypeSchema: GenMessage<LoiterType>;

/**
 * @generated from message anduril.tasks.v2.OrbitType
 */
export declare type OrbitType = Message<"anduril.tasks.v2.OrbitType"> & {
  /**
   * Indicates the direction in which to perform the loiter.
   *
   * @generated from field: anduril.tasks.v2.OrbitDirection direction = 1;
   */
  direction: OrbitDirection;

  /**
   * Indicates the loiter pattern to perform.
   *
   * @generated from field: anduril.tasks.v2.OrbitPattern pattern = 2;
   */
  pattern: OrbitPattern;

  /**
   * Indicates the amount of time to be spent in loiter.
   *
   * @generated from field: anduril.tasks.v2.OrbitDuration duration = 3;
   */
  duration?: OrbitDuration;
};

/**
 * Describes the message anduril.tasks.v2.OrbitType.
 * Use `create(OrbitTypeSchema)` to create a new message.
 */
export declare const OrbitTypeSchema: GenMessage<OrbitType>;

/**
 * @generated from message anduril.tasks.v2.OrbitDuration
 */
export declare type OrbitDuration = Message<"anduril.tasks.v2.OrbitDuration"> & {
  /**
   * @generated from oneof anduril.tasks.v2.OrbitDuration.duration
   */
  duration: {
    /**
     * @generated from field: anduril.tasks.v2.DurationRange duration_range = 1;
     */
    value: DurationRange;
    case: "durationRange";
  } | {
    /**
     * @generated from field: uint64 num_of_orbits = 2;
     */
    value: bigint;
    case: "numOfOrbits";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.tasks.v2.OrbitDuration.
 * Use `create(OrbitDurationSchema)` to create a new message.
 */
export declare const OrbitDurationSchema: GenMessage<OrbitDuration>;

/**
 * A Prior that can be used to inform an ISR Task.
 *
 * @generated from message anduril.tasks.v2.Prior
 */
export declare type Prior = Message<"anduril.tasks.v2.Prior"> & {
  /**
   * @generated from oneof anduril.tasks.v2.Prior.prior
   */
  prior: {
    /**
     * Prefer Entity priors whenever the prior is in fact an entity. In other words, don't take position/point
     * out of an entity and pass it as a simple point.
     *
     * @generated from field: string entity_id = 1;
     */
    value: string;
    case: "entityId";
  } | {
    /**
     * Point priors for simple reference points that are not geo entities.
     *
     * @generated from field: anduril.tasks.v2.Point point = 5;
     */
    value: Point;
    case: "point";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.tasks.v2.Prior.
 * Use `create(PriorSchema)` to create a new message.
 */
export declare const PriorSchema: GenMessage<Prior>;

/**
 * Common parameters for ISR Tasks.
 *
 * @generated from message anduril.tasks.v2.ISRParameters
 */
export declare type ISRParameters = Message<"anduril.tasks.v2.ISRParameters"> & {
  /**
   * Indicates the target speed of the asset. DEPRECATION NOTE: deprecated in favor
   * of speed_ms since we might have legacy integrations not conforming to the meters per second units.
   *
   * @generated from field: google.protobuf.FloatValue speed = 1 [deprecated = true];
   * @deprecated
   */
  speed?: number;

  /**
   * Indicates the target speed of the asset. Units are meters per second.
   *
   * @generated from field: google.protobuf.FloatValue speed_m_s = 2;
   */
  speedMS?: number;

  /**
   * Indicates the standoff distance from the objective. The units are in meters.
   *
   * @generated from field: google.protobuf.FloatValue standoff_distance_m = 3;
   */
  standoffDistanceM?: number;

  /**
   * Indicates the standoff distance from the objective. DEPRECATION NOTE: deprecated in favor of standoff_distance_m
   *  since we might have legacy integrations not conforming to the meters unit.
   *
   * @generated from field: google.protobuf.FloatValue standoff_distance = 4 [deprecated = true];
   * @deprecated
   */
  standoffDistance?: number;

  /**
   * Indicates the standoff angle relative to the objective's bearing orientation (defaults to north).
   * In particular, the asset should approach target from this angle. Units in degrees.
   *
   * @generated from field: google.protobuf.FloatValue standoff_angle = 5;
   */
  standoffAngle?: number;

  /**
   * Indicates the amount of time in milliseconds to execute an ISR task before expiring. 0 value indicates no
   * expiration.
   *
   * @generated from field: google.protobuf.UInt64Value expiration_time_ms = 6;
   */
  expirationTimeMs?: bigint;
};

/**
 * Describes the message anduril.tasks.v2.ISRParameters.
 * Use `create(ISRParametersSchema)` to create a new message.
 */
export declare const ISRParametersSchema: GenMessage<ISRParameters>;

/**
 * Gimbal pointing command.
 *
 * @generated from message anduril.tasks.v2.GimbalPoint
 */
export declare type GimbalPoint = Message<"anduril.tasks.v2.GimbalPoint"> & {
  /**
   * @generated from oneof anduril.tasks.v2.GimbalPoint.point_type
   */
  pointType: {
    /**
     * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
     *
     * @generated from field: anduril.tasks.v2.Objective look_at = 1;
     */
    value: Objective;
    case: "lookAt";
  } | {
    /**
     * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
     *
     * @generated from field: anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2;
     */
    value: AzimuthElevationPoint;
    case: "celestialLocation";
  } | {
    /**
     * Point gimbal to an [x, y] location in the video feed.
     *
     * @generated from field: anduril.tasks.v2.FramePoint frame_location = 4;
     */
    value: FramePoint;
    case: "frameLocation";
  } | { case: undefined; value?: undefined };

  /**
   * Optional common ISR parameters.
   *
   * @generated from field: anduril.tasks.v2.ISRParameters parameters = 3;
   */
  parameters?: ISRParameters;
};

/**
 * Describes the message anduril.tasks.v2.GimbalPoint.
 * Use `create(GimbalPointSchema)` to create a new message.
 */
export declare const GimbalPointSchema: GenMessage<GimbalPoint>;

/**
 * Celestial location with respect to a platform frame.
 *
 * @generated from message anduril.tasks.v2.AzimuthElevationPoint
 */
export declare type AzimuthElevationPoint = Message<"anduril.tasks.v2.AzimuthElevationPoint"> & {
  /**
   * @generated from field: double azimuth = 1;
   */
  azimuth: number;

  /**
   * @generated from field: double elevation = 2;
   */
  elevation: number;
};

/**
 * Describes the message anduril.tasks.v2.AzimuthElevationPoint.
 * Use `create(AzimuthElevationPointSchema)` to create a new message.
 */
export declare const AzimuthElevationPointSchema: GenMessage<AzimuthElevationPoint>;

/**
 * Point clicked in the frame of the video feed.
 *
 * @generated from message anduril.tasks.v2.FramePoint
 */
export declare type FramePoint = Message<"anduril.tasks.v2.FramePoint"> & {
  /**
   * Frame-normalized location in frame on the x-axis, range (0, 1).
   * For example, x = 0.3 implies a pixel location of 0.3 * image_width.
   *
   * @generated from field: float x = 1;
   */
  x: number;

  /**
   * Frame-normalized location in frame on the y-axis, range (0, 1).
   * For example, y = 0.3 implies a pixel location of 0.3 * image_height.
   *
   * @generated from field: float y = 2;
   */
  y: number;

  /**
   * Timestamp of frame
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;
};

/**
 * Describes the message anduril.tasks.v2.FramePoint.
 * Use `create(FramePointSchema)` to create a new message.
 */
export declare const FramePointSchema: GenMessage<FramePoint>;

/**
 * Command for setting gimbal zoom levels.
 *
 * @generated from message anduril.tasks.v2.GimbalZoom
 */
export declare type GimbalZoom = Message<"anduril.tasks.v2.GimbalZoom"> & {
  /**
   * @generated from oneof anduril.tasks.v2.GimbalZoom.mode
   */
  mode: {
    /**
     * Set the zoom level to the provided horizontal field of view in degrees.
     *
     * @generated from field: google.protobuf.DoubleValue set_horizontal_fov = 1;
     */
    value: DoubleValue;
    case: "setHorizontalFov";
  } | {
    /**
     * Set the zoom level to the provided zoom level.
     *
     * @generated from field: google.protobuf.FloatValue set_magnification = 2;
     */
    value: FloatValue;
    case: "setMagnification";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.tasks.v2.GimbalZoom.
 * Use `create(GimbalZoomSchema)` to create a new message.
 */
export declare const GimbalZoomSchema: GenMessage<GimbalZoom>;

/**
 * Maps to BREVITY code ID with type MONITOR. To task assets to maintain sensor awareness
 * on a given objective.
 *
 * @generated from message anduril.tasks.v2.Monitor
 */
export declare type Monitor = Message<"anduril.tasks.v2.Monitor"> & {
  /**
   * Indicates objective to monitor.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Identifies track to monitor.
   *
   * @generated from field: string track_id = 2;
   */
  trackId: string;

  /**
   * AssetId2 of asset that produced track.
   *
   * @generated from field: string track_producer = 3;
   */
  trackProducer: string;
};

/**
 * Describes the message anduril.tasks.v2.Monitor.
 * Use `create(MonitorSchema)` to create a new message.
 */
export declare const MonitorSchema: GenMessage<Monitor>;

/**
 * Maps to BREVITY code ID with type SCAN. To task assets to find and report any tracks in a geographic area.
 *
 * @generated from message anduril.tasks.v2.Scan
 */
export declare type Scan = Message<"anduril.tasks.v2.Scan"> & {
  /**
   * Indicates where to scan.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Optional common ISR parameters.
   *
   * @generated from field: anduril.tasks.v2.ISRParameters parameters = 2;
   */
  parameters?: ISRParameters;
};

/**
 * Describes the message anduril.tasks.v2.Scan.
 * Use `create(ScanSchema)` to create a new message.
 */
export declare const ScanSchema: GenMessage<Scan>;

/**
 * Performs a Battle Damage Assessment (BDA). Does not map to any Task in either UCI or BREVITY.
 *
 * @generated from message anduril.tasks.v2.BattleDamageAssessment
 */
export declare type BattleDamageAssessment = Message<"anduril.tasks.v2.BattleDamageAssessment"> & {
  /**
   * Objective to perform BDA on.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Optional common ISR parameters.
   *
   * @generated from field: anduril.tasks.v2.ISRParameters parameters = 2;
   */
  parameters?: ISRParameters;
};

/**
 * Describes the message anduril.tasks.v2.BattleDamageAssessment.
 * Use `create(BattleDamageAssessmentSchema)` to create a new message.
 */
export declare const BattleDamageAssessmentSchema: GenMessage<BattleDamageAssessment>;

/**
 * Direction of the loiter relative to the front of the vehicle.
 *
 * @generated from enum anduril.tasks.v2.OrbitDirection
 */
export enum OrbitDirection {
  /**
   * @generated from enum value: ORBIT_DIRECTION_DIRECTION_INVALID = 0;
   */
  DIRECTION_INVALID = 0,

  /**
   * @generated from enum value: ORBIT_DIRECTION_RIGHT = 1;
   */
  RIGHT = 1,

  /**
   * @generated from enum value: ORBIT_DIRECTION_LEFT = 2;
   */
  LEFT = 2,
}

/**
 * Describes the enum anduril.tasks.v2.OrbitDirection.
 */
export declare const OrbitDirectionSchema: GenEnum<OrbitDirection>;

/**
 * @generated from enum anduril.tasks.v2.OrbitPattern
 */
export enum OrbitPattern {
  /**
   * @generated from enum value: ORBIT_PATTERN_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: ORBIT_PATTERN_CIRCLE = 1;
   */
  CIRCLE = 1,

  /**
   * @generated from enum value: ORBIT_PATTERN_RACETRACK = 2;
   */
  RACETRACK = 2,

  /**
   * @generated from enum value: ORBIT_PATTERN_FIGURE_EIGHT = 3;
   */
  FIGURE_EIGHT = 3,
}

/**
 * Describes the enum anduril.tasks.v2.OrbitPattern.
 */
export declare const OrbitPatternSchema: GenEnum<OrbitPattern>;

