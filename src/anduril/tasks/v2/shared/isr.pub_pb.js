// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/tasks/v2/shared/isr.pub.proto (package anduril.tasks.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const { DoubleValue, FloatValue, proto3, Timestamp, UInt32Value, UInt64Value } = require("@bufbuild/protobuf");
const { Objective, Point } = require("../objective.pub_pb.js");
const { Agent, ControlArea, DurationRange } = require("../common.pub_pb.js");

/**
 * Direction of the loiter relative to the front of the vehicle.
 *
 * @generated from enum anduril.tasks.v2.OrbitDirection
 */
const OrbitDirection = proto3.makeEnum(
  "anduril.tasks.v2.OrbitDirection",
  [
    {no: 0, name: "ORBIT_DIRECTION_DIRECTION_INVALID", localName: "DIRECTION_INVALID"},
    {no: 1, name: "ORBIT_DIRECTION_RIGHT", localName: "RIGHT"},
    {no: 2, name: "ORBIT_DIRECTION_LEFT", localName: "LEFT"},
  ],
);

/**
 * @generated from enum anduril.tasks.v2.OrbitPattern
 */
const OrbitPattern = proto3.makeEnum(
  "anduril.tasks.v2.OrbitPattern",
  [
    {no: 0, name: "ORBIT_PATTERN_INVALID", localName: "INVALID"},
    {no: 1, name: "ORBIT_PATTERN_CIRCLE", localName: "CIRCLE"},
    {no: 2, name: "ORBIT_PATTERN_RACETRACK", localName: "RACETRACK"},
    {no: 3, name: "ORBIT_PATTERN_FIGURE_EIGHT", localName: "FIGURE_EIGHT"},
  ],
);

/**
 * Maps to BREVITY code INVESTIGATE.
 *
 * @generated from message anduril.tasks.v2.Investigate
 */
const Investigate = proto3.makeMessageType(
  "anduril.tasks.v2.Investigate",
  () => [
    { no: 1, name: "objective", kind: "message", T: Objective },
    { no: 2, name: "parameters", kind: "message", T: ISRParameters },
  ],
);

/**
 * Maps to BREVITY code ID with type Visual.
 *
 * @generated from message anduril.tasks.v2.VisualId
 */
const VisualId = proto3.makeMessageType(
  "anduril.tasks.v2.VisualId",
  () => [
    { no: 1, name: "objective", kind: "message", T: Objective },
    { no: 2, name: "parameters", kind: "message", T: ISRParameters },
  ],
);

/**
 * Maps to BREVITY code MAP.
 *
 * @generated from message anduril.tasks.v2.Map
 */
const Map = proto3.makeMessageType(
  "anduril.tasks.v2.Map",
  () => [
    { no: 1, name: "objective", kind: "message", T: Objective },
    { no: 2, name: "parameters", kind: "message", T: ISRParameters },
    { no: 3, name: "min_niirs", kind: "message", T: UInt32Value },
  ],
);

/**
 * Maps to the Loiter behavior within the FlightTask type within UCI v2.
 *
 * @generated from message anduril.tasks.v2.Loiter
 */
const Loiter = proto3.makeMessageType(
  "anduril.tasks.v2.Loiter",
  () => [
    { no: 1, name: "objective", kind: "message", T: Objective },
    { no: 2, name: "loiter_type", kind: "message", T: LoiterType },
    { no: 3, name: "parameters", kind: "message", T: ISRParameters },
  ],
);

/**
 * Represents intent to search an area. Maps to the Area Search Team Task within the Mission Autonomy Task Model.
 *
 * @generated from message anduril.tasks.v2.AreaSearch
 */
const AreaSearch = proto3.makeMessageType(
  "anduril.tasks.v2.AreaSearch",
  () => [
    { no: 1, name: "objective", kind: "message", T: Objective },
    { no: 2, name: "priors", kind: "message", T: Prior, repeated: true },
    { no: 3, name: "participants", kind: "message", T: Agent, repeated: true },
    { no: 4, name: "control_areas", kind: "message", T: ControlArea, repeated: true },
  ],
);

/**
 * Represents intent to search a volume. Maps to the Volume Search Team Task within the Mission Autonomy Task Model.
 *
 * @generated from message anduril.tasks.v2.VolumeSearch
 */
const VolumeSearch = proto3.makeMessageType(
  "anduril.tasks.v2.VolumeSearch",
  () => [
    { no: 1, name: "objective", kind: "message", T: Objective },
    { no: 2, name: "priors", kind: "message", T: Prior, repeated: true },
    { no: 3, name: "participants", kind: "message", T: Agent, repeated: true },
    { no: 4, name: "control_areas", kind: "message", T: ControlArea, repeated: true },
  ],
);

/**
 * Task to improve the quality of a track. Maps to the Improve Track Task within the Mission Autonomy Task Model.
 *
 * @generated from message anduril.tasks.v2.ImproveTrackQuality
 */
const ImproveTrackQuality = proto3.makeMessageType(
  "anduril.tasks.v2.ImproveTrackQuality",
  () => [
    { no: 1, name: "objective", kind: "message", T: Objective },
    { no: 2, name: "termination_track_quality", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * Indicates intent to follow an Objective. Maps to Brevity code SHADOW.
 *
 * @generated from message anduril.tasks.v2.Shadow
 */
const Shadow = proto3.makeMessageType(
  "anduril.tasks.v2.Shadow",
  () => [
    { no: 1, name: "objective", kind: "message", T: Objective },
    { no: 2, name: "parameters", kind: "message", T: ISRParameters },
  ],
);

/**
 * Maps to UCI v2 LoiterType.
 *
 * @generated from message anduril.tasks.v2.LoiterType
 */
const LoiterType = proto3.makeMessageType(
  "anduril.tasks.v2.LoiterType",
  () => [
    { no: 1, name: "orbit_type", kind: "message", T: OrbitType, oneof: "loiter_type" },
  ],
);

/**
 * @generated from message anduril.tasks.v2.OrbitType
 */
const OrbitType = proto3.makeMessageType(
  "anduril.tasks.v2.OrbitType",
  () => [
    { no: 1, name: "direction", kind: "enum", T: proto3.getEnumType(OrbitDirection) },
    { no: 2, name: "pattern", kind: "enum", T: proto3.getEnumType(OrbitPattern) },
    { no: 3, name: "duration", kind: "message", T: OrbitDuration },
  ],
);

/**
 * @generated from message anduril.tasks.v2.OrbitDuration
 */
const OrbitDuration = proto3.makeMessageType(
  "anduril.tasks.v2.OrbitDuration",
  () => [
    { no: 1, name: "duration_range", kind: "message", T: DurationRange, oneof: "duration" },
    { no: 2, name: "num_of_orbits", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "duration" },
  ],
);

/**
 * A Prior that can be used to inform an ISR Task.
 *
 * @generated from message anduril.tasks.v2.Prior
 */
const Prior = proto3.makeMessageType(
  "anduril.tasks.v2.Prior",
  () => [
    { no: 1, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "prior" },
    { no: 5, name: "point", kind: "message", T: Point, oneof: "prior" },
  ],
);

/**
 * Common parameters for ISR Tasks.
 *
 * @generated from message anduril.tasks.v2.ISRParameters
 */
const ISRParameters = proto3.makeMessageType(
  "anduril.tasks.v2.ISRParameters",
  () => [
    { no: 1, name: "speed", kind: "message", T: FloatValue },
    { no: 2, name: "speed_m_s", kind: "message", T: FloatValue },
    { no: 3, name: "standoff_distance_m", kind: "message", T: FloatValue },
    { no: 4, name: "standoff_distance", kind: "message", T: FloatValue },
    { no: 5, name: "standoff_angle", kind: "message", T: FloatValue },
    { no: 6, name: "expiration_time_ms", kind: "message", T: UInt64Value },
  ],
);

/**
 * Gimbal pointing command.
 *
 * @generated from message anduril.tasks.v2.GimbalPoint
 */
const GimbalPoint = proto3.makeMessageType(
  "anduril.tasks.v2.GimbalPoint",
  () => [
    { no: 1, name: "look_at", kind: "message", T: Objective, oneof: "point_type" },
    { no: 2, name: "celestial_location", kind: "message", T: AzimuthElevationPoint, oneof: "point_type" },
    { no: 4, name: "frame_location", kind: "message", T: FramePoint, oneof: "point_type" },
    { no: 3, name: "parameters", kind: "message", T: ISRParameters },
  ],
);

/**
 * Celestial location with respect to a platform frame.
 *
 * @generated from message anduril.tasks.v2.AzimuthElevationPoint
 */
const AzimuthElevationPoint = proto3.makeMessageType(
  "anduril.tasks.v2.AzimuthElevationPoint",
  () => [
    { no: 1, name: "azimuth", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "elevation", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

/**
 * Point clicked in the frame of the video feed.
 *
 * @generated from message anduril.tasks.v2.FramePoint
 */
const FramePoint = proto3.makeMessageType(
  "anduril.tasks.v2.FramePoint",
  () => [
    { no: 1, name: "x", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "y", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
  ],
);

/**
 * Command for setting gimbal zoom levels.
 *
 * @generated from message anduril.tasks.v2.GimbalZoom
 */
const GimbalZoom = proto3.makeMessageType(
  "anduril.tasks.v2.GimbalZoom",
  () => [
    { no: 1, name: "set_horizontal_fov", kind: "message", T: DoubleValue, oneof: "mode" },
    { no: 2, name: "set_magnification", kind: "message", T: FloatValue, oneof: "mode" },
  ],
);

/**
 * Maps to BREVITY code ID with type MONITOR. To task assets to maintain sensor awareness
 * on a given objective.
 *
 * @generated from message anduril.tasks.v2.Monitor
 */
const Monitor = proto3.makeMessageType(
  "anduril.tasks.v2.Monitor",
  () => [
    { no: 1, name: "objective", kind: "message", T: Objective },
  ],
);

/**
 * Maps to BREVITY code ID with type SCAN. To task assets to find and report any tracks in a geographic area.
 *
 * @generated from message anduril.tasks.v2.Scan
 */
const Scan = proto3.makeMessageType(
  "anduril.tasks.v2.Scan",
  () => [
    { no: 1, name: "objective", kind: "message", T: Objective },
    { no: 2, name: "parameters", kind: "message", T: ISRParameters },
  ],
);

/**
 * Performs a Battle Damage Assessment (BDA). Does not map to any Task in either UCI or BREVITY.
 *
 * @generated from message anduril.tasks.v2.BattleDamageAssessment
 */
const BattleDamageAssessment = proto3.makeMessageType(
  "anduril.tasks.v2.BattleDamageAssessment",
  () => [
    { no: 1, name: "objective", kind: "message", T: Objective },
    { no: 2, name: "parameters", kind: "message", T: ISRParameters },
  ],
);


exports.OrbitDirection = OrbitDirection;
exports.OrbitPattern = OrbitPattern;
exports.Investigate = Investigate;
exports.VisualId = VisualId;
exports.Map = Map;
exports.Loiter = Loiter;
exports.AreaSearch = AreaSearch;
exports.VolumeSearch = VolumeSearch;
exports.ImproveTrackQuality = ImproveTrackQuality;
exports.Shadow = Shadow;
exports.LoiterType = LoiterType;
exports.OrbitType = OrbitType;
exports.OrbitDuration = OrbitDuration;
exports.Prior = Prior;
exports.ISRParameters = ISRParameters;
exports.GimbalPoint = GimbalPoint;
exports.AzimuthElevationPoint = AzimuthElevationPoint;
exports.FramePoint = FramePoint;
exports.GimbalZoom = GimbalZoom;
exports.Monitor = Monitor;
exports.Scan = Scan;
exports.BattleDamageAssessment = BattleDamageAssessment;
