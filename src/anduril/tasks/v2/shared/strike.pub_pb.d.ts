// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/tasks/v2/shared/strike.pub.proto (package anduril.tasks.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, Empty, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Objective } from "../objective.pub_pb.js";
import type { AnglePair, AreaConstraints } from "../common.pub_pb.js";

/**
 * Maps to BREVITY code SMACK.
 *
 * @generated from message anduril.tasks.v2.Smack
 */
export declare class Smack extends Message<Smack> {
  /**
   * Objective to SMACK.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Optional parameters associated with Strike Tasks.
   *
   * @generated from field: anduril.tasks.v2.StrikeParameters parameters = 2;
   */
  parameters?: StrikeParameters;

  constructor(data?: PartialMessage<Smack>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.tasks.v2.Smack";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Smack;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Smack;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Smack;

  static equals(a: Smack | PlainMessage<Smack> | undefined, b: Smack | PlainMessage<Smack> | undefined): boolean;
}

/**
 * Maps to UCI StrikeTask.
 *
 * @generated from message anduril.tasks.v2.Strike
 */
export declare class Strike extends Message<Strike> {
  /**
   * Objective to Strike.
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 1;
   */
  objective?: Objective;

  /**
   * Angle range within which to ingress.
   *
   * @generated from field: anduril.tasks.v2.AnglePair ingress_angle = 2;
   */
  ingressAngle?: AnglePair;

  /**
   * Distance at which to yield flight control to the onboard flight computer rather than
   * higher level autonomy.
   *
   * @generated from field: anduril.tasks.v2.StrikeReleaseConstraint strike_release_constraint = 3;
   */
  strikeReleaseConstraint?: StrikeReleaseConstraint;

  /**
   * Optional parameters associated with the Strike task.
   *
   * @generated from field: anduril.tasks.v2.StrikeParameters parameters = 4;
   */
  parameters?: StrikeParameters;

  constructor(data?: PartialMessage<Strike>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.tasks.v2.Strike";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Strike;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Strike;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Strike;

  static equals(a: Strike | PlainMessage<Strike> | undefined, b: Strike | PlainMessage<Strike> | undefined): boolean;
}

/**
 * Maps to UCI StrikeTaskReleaseConstraintsType.
 *
 * @generated from message anduril.tasks.v2.StrikeReleaseConstraint
 */
export declare class StrikeReleaseConstraint extends Message<StrikeReleaseConstraint> {
  /**
   * @generated from oneof anduril.tasks.v2.StrikeReleaseConstraint.strike_release_constraint
   */
  strikeReleaseConstraint: {
    /**
     * @generated from field: anduril.tasks.v2.AreaConstraints release_area = 1;
     */
    value: AreaConstraints;
    case: "releaseArea";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<StrikeReleaseConstraint>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.tasks.v2.StrikeReleaseConstraint";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StrikeReleaseConstraint;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StrikeReleaseConstraint;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StrikeReleaseConstraint;

  static equals(a: StrikeReleaseConstraint | PlainMessage<StrikeReleaseConstraint> | undefined, b: StrikeReleaseConstraint | PlainMessage<StrikeReleaseConstraint> | undefined): boolean;
}

/**
 * @generated from message anduril.tasks.v2.StrikeParameters
 */
export declare class StrikeParameters extends Message<StrikeParameters> {
  /**
   * @generated from field: repeated anduril.tasks.v2.PayloadConfiguration payloads_to_employ = 1;
   */
  payloadsToEmploy: PayloadConfiguration[];

  /**
   * GPS time at which the strike should be performed.
   *
   * @generated from field: google.protobuf.Duration desired_impact_time = 2;
   */
  desiredImpactTime?: Duration;

  /**
   * Bearing at which to perform the run in for a strike.
   *
   * @generated from field: double run_in_bearing = 3;
   */
  runInBearing: number;

  /**
   * Angle which to glide into the run in for a strike.
   *
   * @generated from field: double glide_slope_angle = 4;
   */
  glideSlopeAngle: number;

  constructor(data?: PartialMessage<StrikeParameters>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.tasks.v2.StrikeParameters";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StrikeParameters;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StrikeParameters;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StrikeParameters;

  static equals(a: StrikeParameters | PlainMessage<StrikeParameters> | undefined, b: StrikeParameters | PlainMessage<StrikeParameters> | undefined): boolean;
}

/**
 * Individual payload configuration, can represent a munition such as a missile, a gun, or a non-kinetic effect.
 *
 * @generated from message anduril.tasks.v2.PayloadConfiguration
 */
export declare class PayloadConfiguration extends Message<PayloadConfiguration> {
  /**
   * Unique ID or descriptor for the capability.
   *
   * @generated from field: string capability_id = 1;
   */
  capabilityId: string;

  /**
   * @generated from field: uint32 quantity = 2;
   */
  quantity: number;

  constructor(data?: PartialMessage<PayloadConfiguration>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.tasks.v2.PayloadConfiguration";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayloadConfiguration;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayloadConfiguration;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayloadConfiguration;

  static equals(a: PayloadConfiguration | PlainMessage<PayloadConfiguration> | undefined, b: PayloadConfiguration | PlainMessage<PayloadConfiguration> | undefined): boolean;
}

/**
 * Releases a payload from the vehicle
 *
 * @generated from message anduril.tasks.v2.ReleasePayload
 */
export declare class ReleasePayload extends Message<ReleasePayload> {
  /**
   * The payload(s) that will be released
   *
   * @generated from field: repeated anduril.tasks.v2.PayloadConfiguration payloads = 1;
   */
  payloads: PayloadConfiguration[];

  /**
   * Optional objective, of where the payload should be dropped. If omitted the payload will drop the current location
   *
   * @generated from field: anduril.tasks.v2.Objective objective = 2;
   */
  objective?: Objective;

  /**
   * @generated from oneof anduril.tasks.v2.ReleasePayload.release_method
   */
  releaseMethod: {
    /**
     * Attempt to place the payload delicately from a standstill
     *
     * @generated from field: google.protobuf.Empty precision_release = 3;
     */
    value: Empty;
    case: "precisionRelease";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ReleasePayload>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.tasks.v2.ReleasePayload";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReleasePayload;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReleasePayload;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReleasePayload;

  static equals(a: ReleasePayload | PlainMessage<ReleasePayload> | undefined, b: ReleasePayload | PlainMessage<ReleasePayload> | undefined): boolean;
}

