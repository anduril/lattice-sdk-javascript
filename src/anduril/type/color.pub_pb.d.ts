// @generated by protoc-gen-es v2.2.0 with parameter "import_extension=js"
// @generated from file anduril/type/color.pub.proto (package anduril.type, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file anduril/type/color.pub.proto.
 */
export declare const file_anduril_type_color_pub: GenFile;

/**
 * @generated from message anduril.type.Color
 */
export declare type Color = Message<"anduril.type.Color"> & {
  /**
   * The amount of red in the color as a value in the interval [0, 1].
   *
   * @generated from field: float red = 1;
   */
  red: number;

  /**
   * The amount of green in the color as a value in the interval [0, 1].
   *
   * @generated from field: float green = 2;
   */
  green: number;

  /**
   * The amount of blue in the color as a value in the interval [0, 1].
   *
   * @generated from field: float blue = 3;
   */
  blue: number;

  /**
   * The fraction of this color that should be applied to the pixel. That is,
   * the final pixel color is defined by the equation:
   *
   * `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
   *
   * This means that a value of 1.0 corresponds to a solid color, whereas
   * a value of 0.0 corresponds to a completely transparent color. This
   * uses a wrapper message rather than a simple float scalar so that it is
   * possible to distinguish between a default value and the value being unset.
   * If omitted, this color object is rendered as a solid color
   * (as if the alpha value had been explicitly given a value of 1.0).
   *
   * @generated from field: google.protobuf.FloatValue alpha = 4;
   */
  alpha?: number;
};

/**
 * Describes the message anduril.type.Color.
 * Use `create(ColorSchema)` to create a new message.
 */
export declare const ColorSchema: GenMessage<Color>;

