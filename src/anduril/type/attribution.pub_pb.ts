// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/type/attribution.pub.proto (package anduril.type, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message anduril.type.Attribution
 */
export class Attribution extends Message<Attribution> {
  /**
   * The timestamp at which the event occurred, in UTC epoch microseconds.
   *
   * @generated from field: int64 timestamp = 1;
   */
  timestamp = protoInt64.zero;

  /**
   * The user ID that initiated the event.
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<Attribution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.type.Attribution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attribution {
    return new Attribution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attribution {
    return new Attribution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attribution {
    return new Attribution().fromJsonString(jsonString, options);
  }

  static equals(a: Attribution | PlainMessage<Attribution> | undefined, b: Attribution | PlainMessage<Attribution> | undefined): boolean {
    return proto3.util.equals(Attribution, a, b);
  }
}

