// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/type/geometry.pub.proto (package anduril.type, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { LLA } from "./coords.pub_pb.js";

/**
 * A 2d grid with binary values for each grid cell.
 *
 * @generated from message anduril.type.Grid
 */
export class Grid extends Message<Grid> {
  /**
   * The bottom left extent of the 2d grid. This represents the
   * farthest corner on the grid cell, not the center of the
   * grid cell.
   *
   * @generated from field: anduril.type.LLA bottom_left_pos = 1;
   */
  bottomLeftPos?: LLA;

  /**
   * The top right extent of the 2d grid. This represents the
   * farthest corner on the grid cell, not the center of the
   * grid cell.
   *
   * @generated from field: anduril.type.LLA top_right_pos = 2;
   */
  topRightPos?: LLA;

  /**
   * The width of the grid in number of cells.
   *
   * @generated from field: uint32 grid_width = 3;
   */
  gridWidth = 0;

  /**
   * The height of the grid in number of cells.
   *
   * @generated from field: uint32 grid_height = 4;
   */
  gridHeight = 0;

  /**
   * Stores the cell values. Each byte contains 8 bits representing
   * binary values of cells. Cells are unravelled in row-major order,
   * with the first cell located at the top-left corner of the grid.
   * In a single byte, the smallest bit represents the left most cell.
   *
   * @generated from field: bytes cell_values = 5;
   */
  cellValues = new Uint8Array(0);

  constructor(data?: PartialMessage<Grid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.type.Grid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bottom_left_pos", kind: "message", T: LLA },
    { no: 2, name: "top_right_pos", kind: "message", T: LLA },
    { no: 3, name: "grid_width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "grid_height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "cell_values", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Grid {
    return new Grid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Grid {
    return new Grid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Grid {
    return new Grid().fromJsonString(jsonString, options);
  }

  static equals(a: Grid | PlainMessage<Grid> | undefined, b: Grid | PlainMessage<Grid> | undefined): boolean {
    return proto3.util.equals(Grid, a, b);
  }
}

