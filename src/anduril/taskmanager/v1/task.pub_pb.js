// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/taskmanager/v1/task.pub.proto (package anduril.taskmanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const { Any, proto3, Timestamp } = require("@bufbuild/protobuf");
const { Entity } = require("../../entitymanager/v1/entity.pub_pb.js");

/**
 * The Status of a Task definition through its lifecycle. Each Definition Version can have its own Status.
 * For example, Definition v1 could go CREATED -> SENT -> WILCO -> REPLACED, with v2 then potentially in sent Status.
 *
 * @generated from enum anduril.taskmanager.v1.Status
 */
const Status = proto3.makeEnum(
  "anduril.taskmanager.v1.Status",
  [
    {no: 0, name: "STATUS_INVALID", localName: "INVALID"},
    {no: 1, name: "STATUS_CREATED", localName: "CREATED"},
    {no: 2, name: "STATUS_SCHEDULED_IN_MANAGER", localName: "SCHEDULED_IN_MANAGER"},
    {no: 3, name: "STATUS_SENT", localName: "SENT"},
    {no: 4, name: "STATUS_MACHINE_RECEIPT", localName: "MACHINE_RECEIPT"},
    {no: 5, name: "STATUS_ACK", localName: "ACK"},
    {no: 6, name: "STATUS_WILCO", localName: "WILCO"},
    {no: 7, name: "STATUS_EXECUTING", localName: "EXECUTING"},
    {no: 8, name: "STATUS_WAITING_FOR_UPDATE", localName: "WAITING_FOR_UPDATE"},
    {no: 9, name: "STATUS_DONE_OK", localName: "DONE_OK"},
    {no: 10, name: "STATUS_DONE_NOT_OK", localName: "DONE_NOT_OK"},
    {no: 11, name: "STATUS_REPLACED", localName: "REPLACED"},
    {no: 12, name: "STATUS_CANCEL_REQUESTED", localName: "CANCEL_REQUESTED"},
    {no: 13, name: "STATUS_COMPLETE_REQUESTED", localName: "COMPLETE_REQUESTED"},
    {no: 14, name: "STATUS_VERSION_REJECTED", localName: "VERSION_REJECTED"},
  ],
);

/**
 * Error code associated with a Task error.
 *
 * @generated from enum anduril.taskmanager.v1.ErrorCode
 */
const ErrorCode = proto3.makeEnum(
  "anduril.taskmanager.v1.ErrorCode",
  [
    {no: 0, name: "ERROR_CODE_INVALID", localName: "INVALID"},
    {no: 1, name: "ERROR_CODE_CANCELLED", localName: "CANCELLED"},
    {no: 2, name: "ERROR_CODE_REJECTED", localName: "REJECTED"},
    {no: 3, name: "ERROR_CODE_TIMEOUT", localName: "TIMEOUT"},
    {no: 4, name: "ERROR_CODE_FAILED", localName: "FAILED"},
  ],
);

/**
 * The type of Task event.
 *
 * @generated from enum anduril.taskmanager.v1.EventType
 */
const EventType = proto3.makeEnum(
  "anduril.taskmanager.v1.EventType",
  [
    {no: 0, name: "EVENT_TYPE_INVALID", localName: "INVALID"},
    {no: 1, name: "EVENT_TYPE_CREATED", localName: "CREATED"},
    {no: 2, name: "EVENT_TYPE_UPDATE", localName: "UPDATE"},
    {no: 3, name: "EVENT_TYPE_PREEXISTING", localName: "PREEXISTING"},
  ],
);

/**
 * View of a Task through its lifecycle.
 * For example, a definition v1 of a task may be running on an agent, indicated by TASK_VIEW_AGENT,
 * while the definition v2 may not have been received yet, indicated by TASK_VIEW_MANAGER.
 *
 * @generated from enum anduril.taskmanager.v1.TaskView
 */
const TaskView = proto3.makeEnum(
  "anduril.taskmanager.v1.TaskView",
  [
    {no: 0, name: "TASK_VIEW_INVALID", localName: "INVALID"},
    {no: 1, name: "TASK_VIEW_MANAGER", localName: "MANAGER"},
    {no: 2, name: "TASK_VIEW_AGENT", localName: "AGENT"},
  ],
);

/**
 * A Task is something an agent can be asked to do within a battle space, typically against a given objective.
 *
 * @generated from message anduril.taskmanager.v1.Task
 */
const Task = proto3.makeMessageType(
  "anduril.taskmanager.v1.Task",
  () => [
    { no: 1, name: "version", kind: "message", T: TaskVersion },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "specification", kind: "message", T: Any },
    { no: 16, name: "created_by", kind: "message", T: Principal },
    { no: 4, name: "last_updated_by", kind: "message", T: Principal },
    { no: 9, name: "last_update_time", kind: "message", T: Timestamp },
    { no: 5, name: "status", kind: "message", T: TaskStatus },
    { no: 6, name: "scheduled_time", kind: "message", T: Timestamp },
    { no: 8, name: "relations", kind: "message", T: Relations },
    { no: 10, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "is_executed_elsewhere", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "create_time", kind: "message", T: Timestamp },
    { no: 14, name: "replication", kind: "message", T: Replication },
    { no: 15, name: "initial_entities", kind: "message", T: TaskEntity, repeated: true },
    { no: 12, name: "owner", kind: "message", T: Owner },
  ],
);

/**
 * TaskStatus is contains information regarding the status of a Task at any given time. Can include related information
 *  such as any progress towards Task completion, or any associated results if Task completed.
 *
 * @generated from message anduril.taskmanager.v1.TaskStatus
 */
const TaskStatus = proto3.makeMessageType(
  "anduril.taskmanager.v1.TaskStatus",
  () => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
    { no: 2, name: "task_error", kind: "message", T: TaskError },
    { no: 4, name: "progress", kind: "message", T: Any },
    { no: 5, name: "result", kind: "message", T: Any },
    { no: 6, name: "start_time", kind: "message", T: Timestamp },
    { no: 7, name: "estimate", kind: "message", T: Any },
    { no: 8, name: "allocation", kind: "message", T: Allocation },
  ],
);

/**
 * TaskError contains an error code and message typically associated to a Task.
 *
 * @generated from message anduril.taskmanager.v1.TaskError
 */
const TaskError = proto3.makeMessageType(
  "anduril.taskmanager.v1.TaskError",
  () => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(ErrorCode) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error_details", kind: "message", T: Any },
  ],
);

/**
 * A Principal is an entity that has authority over this Task.
 *
 * @generated from message anduril.taskmanager.v1.Principal
 */
const Principal = proto3.makeMessageType(
  "anduril.taskmanager.v1.Principal",
  () => [
    { no: 1, name: "system", kind: "message", T: System, oneof: "agent" },
    { no: 2, name: "user", kind: "message", T: User, oneof: "agent" },
    { no: 4, name: "team", kind: "message", T: Team, oneof: "agent" },
    { no: 3, name: "on_behalf_of", kind: "message", T: Principal },
  ],
);

/**
 * System Principal representing some autonomous system.
 *
 * @generated from message anduril.taskmanager.v1.System
 */
const System = proto3.makeMessageType(
  "anduril.taskmanager.v1.System",
  () => [
    { no: 1, name: "service_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "manages_own_scheduling", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * A User Principal representing a human.
 *
 * @generated from message anduril.taskmanager.v1.User
 */
const User = proto3.makeMessageType(
  "anduril.taskmanager.v1.User",
  () => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Relations describes the relationships of this Task, such as assignment, or if the Task has any parents.
 *
 * @generated from message anduril.taskmanager.v1.Relations
 */
const Relations = proto3.makeMessageType(
  "anduril.taskmanager.v1.Relations",
  () => [
    { no: 1, name: "assignee", kind: "message", T: Principal },
    { no: 2, name: "parent_task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Holds Tasks and its associated Events, e.g. CREATED.
 *
 * @generated from message anduril.taskmanager.v1.TaskEvent
 */
const TaskEvent = proto3.makeMessageType(
  "anduril.taskmanager.v1.TaskEvent",
  () => [
    { no: 1, name: "event_type", kind: "enum", T: proto3.getEnumType(EventType) },
    { no: 2, name: "task", kind: "message", T: Task },
    { no: 3, name: "task_view", kind: "enum", T: proto3.getEnumType(TaskView) },
    { no: 4, name: "time", kind: "message", T: Timestamp },
  ],
);

/**
 * Version of a Task.
 *
 * @generated from message anduril.taskmanager.v1.TaskVersion
 */
const TaskVersion = proto3.makeMessageType(
  "anduril.taskmanager.v1.TaskVersion",
  () => [
    { no: 1, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "definition_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "status_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * a Task status update
 *
 * @generated from message anduril.taskmanager.v1.StatusUpdate
 */
const StatusUpdate = proto3.makeMessageType(
  "anduril.taskmanager.v1.StatusUpdate",
  () => [
    { no: 1, name: "version", kind: "message", T: TaskVersion },
    { no: 2, name: "status", kind: "message", T: TaskStatus },
    { no: 3, name: "author", kind: "message", T: Principal },
    { no: 4, name: "scheduled_time", kind: "message", T: Timestamp },
  ],
);

/**
 * Message representing a Task create or update.
 *
 * @generated from message anduril.taskmanager.v1.DefinitionUpdate
 */
const DefinitionUpdate = proto3.makeMessageType(
  "anduril.taskmanager.v1.DefinitionUpdate",
  () => [
    { no: 1, name: "task", kind: "message", T: Task },
  ],
);

/**
 * Owner designates the entity responsible for writes of Task data.
 *
 * @generated from message anduril.taskmanager.v1.Owner
 */
const Owner = proto3.makeMessageType(
  "anduril.taskmanager.v1.Owner",
  () => [
    { no: 2, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Any metadata associated with the replication of a Task.
 *
 * @generated from message anduril.taskmanager.v1.Replication
 */
const Replication = proto3.makeMessageType(
  "anduril.taskmanager.v1.Replication",
  () => [
    { no: 1, name: "stale_time", kind: "message", T: Timestamp },
  ],
);

/**
 * Allocation contains a list of agents allocated to a Task.
 *
 * @generated from message anduril.taskmanager.v1.Allocation
 */
const Allocation = proto3.makeMessageType(
  "anduril.taskmanager.v1.Allocation",
  () => [
    { no: 1, name: "active_agents", kind: "message", T: Agent, repeated: true },
  ],
);

/**
 * Represents a team of agents
 *
 * @generated from message anduril.taskmanager.v1.Team
 */
const Team = proto3.makeMessageType(
  "anduril.taskmanager.v1.Team",
  () => [
    { no: 1, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "members", kind: "message", T: Agent, repeated: true },
  ],
);

/**
 * Represents an Agent on the Battlespace.
 *
 * @generated from message anduril.taskmanager.v1.Agent
 */
const Agent = proto3.makeMessageType(
  "anduril.taskmanager.v1.Agent",
  () => [
    { no: 2, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Wrapper of an entity passed in Tasking, used to hold an additional information, and as a future extension point.
 *
 * @generated from message anduril.taskmanager.v1.TaskEntity
 */
const TaskEntity = proto3.makeMessageType(
  "anduril.taskmanager.v1.TaskEntity",
  () => [
    { no: 1, name: "entity", kind: "message", T: Entity },
    { no: 2, name: "snapshot", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);


exports.Status = Status;
exports.ErrorCode = ErrorCode;
exports.EventType = EventType;
exports.TaskView = TaskView;
exports.Task = Task;
exports.TaskStatus = TaskStatus;
exports.TaskError = TaskError;
exports.Principal = Principal;
exports.System = System;
exports.User = User;
exports.Relations = Relations;
exports.TaskEvent = TaskEvent;
exports.TaskVersion = TaskVersion;
exports.StatusUpdate = StatusUpdate;
exports.DefinitionUpdate = DefinitionUpdate;
exports.Owner = Owner;
exports.Replication = Replication;
exports.Allocation = Allocation;
exports.Team = Team;
exports.Agent = Agent;
exports.TaskEntity = TaskEntity;
