// @generated by protoc-gen-connect-es v1.4.0 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/taskmanager/v1/task_manager_api.pub.proto (package anduril.taskmanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const { CreateTaskRequest, CreateTaskResponse, GetTaskRequest, GetTaskResponse, StreamTasksRequest, StreamTasksResponse, UpdateStatusRequest, UpdateStatusResponse, UpdateTaskRequest, UpdateTaskResponse } = require("./task_manager_api.pub_pb.js");
const { MethodKind } = require("@bufbuild/protobuf");

/**
 * Task Manager is a service that performs state management associated with Tasks, and also the execution of Tasks
 *  on their designated agents.
 *
 * @generated from service anduril.taskmanager.v1.TaskManagerAPI
 */
const TaskManagerAPI = {
  typeName: "anduril.taskmanager.v1.TaskManagerAPI",
  methods: {
    /**
     * Create a new Task.
     *
     * @generated from rpc anduril.taskmanager.v1.TaskManagerAPI.CreateTask
     */
    createTask: {
      name: "CreateTask",
      I: CreateTaskRequest,
      O: CreateTaskResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get an existing Task.
     *
     * @generated from rpc anduril.taskmanager.v1.TaskManagerAPI.GetTask
     */
    getTask: {
      name: "GetTask",
      I: GetTaskRequest,
      O: GetTaskResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update definition of a Task, only works on Tasks that are not DONE or CANCEL_REQUESTED. Notes:
     *  * send the current task_version in Task, API will increment definition_version, and reset status_version to 1.
     *  * previous definition_version will have status set to REPLACED.
     *  * depending on assignee, replacing the definition will either update if capable on backend,
     *     or cancel previous and issue new.
     *
     * @generated from rpc anduril.taskmanager.v1.TaskManagerAPI.UpdateTask
     */
    updateTask: {
      name: "UpdateTask",
      I: UpdateTaskRequest,
      O: UpdateTaskResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update the status of a Task.
     *
     * @generated from rpc anduril.taskmanager.v1.TaskManagerAPI.UpdateStatus
     */
    updateStatus: {
      name: "UpdateStatus",
      I: UpdateStatusRequest,
      O: UpdateStatusResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Stream all existing live (not yet done) Tasks and any new updates.
     *
     * @generated from rpc anduril.taskmanager.v1.TaskManagerAPI.StreamTasks
     */
    streamTasks: {
      name: "StreamTasks",
      I: StreamTasksRequest,
      O: StreamTasksResponse,
      kind: MethodKind.ServerStreaming,
    },
  }
};


exports.TaskManagerAPI = TaskManagerAPI;
