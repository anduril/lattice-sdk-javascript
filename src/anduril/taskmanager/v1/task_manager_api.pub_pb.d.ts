// @generated by protoc-gen-es v2.0.0
// @generated from file anduril/taskmanager/v1/task_manager_api.pub.proto (package anduril.taskmanager.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Any, Timestamp } from "@bufbuild/protobuf/wkt";
import type { Principal, Relations, StatusUpdate, Task, TaskEntity, TaskEvent, TaskView } from "./task.pub_pb";

/**
 * Describes the file anduril/taskmanager/v1/task_manager_api.pub.proto.
 */
export declare const file_anduril_taskmanager_v1_task_manager_api_pub: GenFile;

/**
 * Request to create a Task.
 *
 * @generated from message anduril.taskmanager.v1.CreateTaskRequest
 */
export declare type CreateTaskRequest = Message<"anduril.taskmanager.v1.CreateTaskRequest"> & {
  /**
   * Human readable display name for this Task, should be short (<100 chars).
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * Full task parameterization, must be a message under anduril/tasks/v*\/.
   *
   * @generated from field: google.protobuf.Any specification = 2;
   */
  specification?: Any;

  /**
   * Who or what is creating this Task. For example, if a user created this Task via a UI, it would
   *  contain the "user" Principal type with the user ID of that user. Or if a service is calling the
   *  CreateTask endpoint, then a "service" Principal type is to be provided.
   *
   * @generated from field: anduril.taskmanager.v1.Principal author = 3;
   */
  author?: Principal;

  /**
   * Any relationships associated with this Task, such as a parent Task or an assignee this Task is designated to
   *  for execution.
   *
   * @generated from field: anduril.taskmanager.v1.Relations relations = 5;
   */
  relations?: Relations;

  /**
   * Longer, free form human readable description of this Task.
   *
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * If set, then task-manager will not trigger execution of this task on an agent. Useful for when ingesting
   * tasks from an external system that is triggering execution of tasks on agents.
   *
   * @generated from field: bool is_executed_elsewhere = 7;
   */
  isExecutedElsewhere: boolean;

  /**
   * If non-empty, will set the requested Task ID, otherwise will generate a new random GUID.
   *  Will reject if supplied Task ID does not match `[A-Za-z0-9_-.]{5,36}`.
   *
   * @generated from field: string task_id = 8;
   */
  taskId: string;

  /**
   * Indicates an initial set of entities that can be used to execute an entity aware task.
   * For example, an entity Objective, an entity Keep In Zone, etc.
   *
   * @generated from field: repeated anduril.taskmanager.v1.TaskEntity initial_entities = 9;
   */
  initialEntities: TaskEntity[];
};

/**
 * Describes the message anduril.taskmanager.v1.CreateTaskRequest.
 * Use `create(CreateTaskRequestSchema)` to create a new message.
 */
export declare const CreateTaskRequestSchema: GenMessage<CreateTaskRequest>;

/**
 * Response to a Create Task request.
 *
 * @generated from message anduril.taskmanager.v1.CreateTaskResponse
 */
export declare type CreateTaskResponse = Message<"anduril.taskmanager.v1.CreateTaskResponse"> & {
  /**
   * Task that was created.
   *
   * @generated from field: anduril.taskmanager.v1.Task task = 1;
   */
  task?: Task;
};

/**
 * Describes the message anduril.taskmanager.v1.CreateTaskResponse.
 * Use `create(CreateTaskResponseSchema)` to create a new message.
 */
export declare const CreateTaskResponseSchema: GenMessage<CreateTaskResponse>;

/**
 * Request to get a Task.
 *
 * @generated from message anduril.taskmanager.v1.GetTaskRequest
 */
export declare type GetTaskRequest = Message<"anduril.taskmanager.v1.GetTaskRequest"> & {
  /**
   * ID of Task to get.
   *
   * @generated from field: string task_id = 1;
   */
  taskId: string;

  /**
   * Optional - if > 0, will get specific definition_version, otherwise latest (highest) definition_version is used.
   *
   * @generated from field: uint32 definition_version = 2;
   */
  definitionVersion: number;

  /**
   * Optional - select which view of the task to fetch. If not set, defaults to TASK_VIEW_MANAGER.
   *
   * @generated from field: anduril.taskmanager.v1.TaskView task_view = 3;
   */
  taskView: TaskView;
};

/**
 * Describes the message anduril.taskmanager.v1.GetTaskRequest.
 * Use `create(GetTaskRequestSchema)` to create a new message.
 */
export declare const GetTaskRequestSchema: GenMessage<GetTaskRequest>;

/**
 * Response to a Get Task request.
 *
 * @generated from message anduril.taskmanager.v1.GetTaskResponse
 */
export declare type GetTaskResponse = Message<"anduril.taskmanager.v1.GetTaskResponse"> & {
  /**
   * Task that received.
   *
   * @generated from field: anduril.taskmanager.v1.Task task = 1;
   */
  task?: Task;
};

/**
 * Describes the message anduril.taskmanager.v1.GetTaskResponse.
 * Use `create(GetTaskResponseSchema)` to create a new message.
 */
export declare const GetTaskResponseSchema: GenMessage<GetTaskResponse>;

/**
 * Request to update a Task.
 *
 * @generated from message anduril.taskmanager.v1.UpdateTaskRequest
 */
export declare type UpdateTaskRequest = Message<"anduril.taskmanager.v1.UpdateTaskRequest"> & {
  /**
   * New Task definition.
   *
   * @generated from field: anduril.taskmanager.v1.Task task = 1;
   */
  task?: Task;

  /**
   * If set, execution of this Task is managed elsewhere, not by task-manager.
   * In other words, Task Manager will not attempt to update the assigned agent with execution instructions.
   * We note that this will also override the existing is_executed_elsewhere value in the Task
   * object provided in this request.
   *
   * @generated from field: bool is_executed_elsewhere = 7;
   */
  isExecutedElsewhere: boolean;
};

/**
 * Describes the message anduril.taskmanager.v1.UpdateTaskRequest.
 * Use `create(UpdateTaskRequestSchema)` to create a new message.
 */
export declare const UpdateTaskRequestSchema: GenMessage<UpdateTaskRequest>;

/**
 * Response to an Update Task request.
 *
 * @generated from message anduril.taskmanager.v1.UpdateTaskResponse
 */
export declare type UpdateTaskResponse = Message<"anduril.taskmanager.v1.UpdateTaskResponse"> & {
  /**
   * the updated task
   *
   * @generated from field: anduril.taskmanager.v1.Task task = 1;
   */
  task?: Task;
};

/**
 * Describes the message anduril.taskmanager.v1.UpdateTaskResponse.
 * Use `create(UpdateTaskResponseSchema)` to create a new message.
 */
export declare const UpdateTaskResponseSchema: GenMessage<UpdateTaskResponse>;

/**
 * Request to update a Task's status.
 *
 * @generated from message anduril.taskmanager.v1.UpdateStatusRequest
 */
export declare type UpdateStatusRequest = Message<"anduril.taskmanager.v1.UpdateStatusRequest"> & {
  /**
   * The updated status.
   *
   * @generated from field: anduril.taskmanager.v1.StatusUpdate status_update = 1;
   */
  statusUpdate?: StatusUpdate;
};

/**
 * Describes the message anduril.taskmanager.v1.UpdateStatusRequest.
 * Use `create(UpdateStatusRequestSchema)` to create a new message.
 */
export declare const UpdateStatusRequestSchema: GenMessage<UpdateStatusRequest>;

/**
 * Response to an Update Status request.
 *
 * @generated from message anduril.taskmanager.v1.UpdateStatusResponse
 */
export declare type UpdateStatusResponse = Message<"anduril.taskmanager.v1.UpdateStatusResponse"> & {
  /**
   * The updated Task.
   *
   * @generated from field: anduril.taskmanager.v1.Task task = 1;
   */
  task?: Task;
};

/**
 * Describes the message anduril.taskmanager.v1.UpdateStatusResponse.
 * Use `create(UpdateStatusResponseSchema)` to create a new message.
 */
export declare const UpdateStatusResponseSchema: GenMessage<UpdateStatusResponse>;

/**
 * Request to Stream Tasks. Returns all live Tasks (aka all not-DONE Tasks).
 *
 * @generated from message anduril.taskmanager.v1.StreamTasksRequest
 */
export declare type StreamTasksRequest = Message<"anduril.taskmanager.v1.StreamTasksRequest"> & {
  /**
   * Optional rate limiting on StreamTasksResponses.
   *
   * @generated from field: anduril.taskmanager.v1.RateLimit rate_limit = 1;
   */
  rateLimit?: RateLimit;

  /**
   * Optional additional views of a Task.
   * If not set, defaults to TASK_VIEW_MANAGER.
   *
   * @generated from field: repeated anduril.taskmanager.v1.TaskView views = 2;
   */
  views: TaskView[];

  /**
   * Optional period (in milliseconds) at which a Heartbeat message will be sent on the
   * message stream. If this field is unset then no Heartbeat messages are sent.
   *
   * @generated from field: uint32 heartbeat_period_millis = 3;
   */
  heartbeatPeriodMillis: number;
};

/**
 * Describes the message anduril.taskmanager.v1.StreamTasksRequest.
 * Use `create(StreamTasksRequestSchema)` to create a new message.
 */
export declare const StreamTasksRequestSchema: GenMessage<StreamTasksRequest>;

/**
 * Response stream will be fed all matching pre-existing live Tasks, plus any new events ongoing.
 *
 * @generated from message anduril.taskmanager.v1.StreamTasksResponse
 */
export declare type StreamTasksResponse = Message<"anduril.taskmanager.v1.StreamTasksResponse"> & {
  /**
   * Task event associated with the streaming request.
   *
   * @generated from field: anduril.taskmanager.v1.TaskEvent task_event = 1;
   */
  taskEvent?: TaskEvent;

  /**
   * Heartbeat message signaling liveliness of the stream.
   *
   * @generated from field: anduril.taskmanager.v1.Heartbeat heartbeat = 2;
   */
  heartbeat?: Heartbeat;
};

/**
 * Describes the message anduril.taskmanager.v1.StreamTasksResponse.
 * Use `create(StreamTasksResponseSchema)` to create a new message.
 */
export declare const StreamTasksResponseSchema: GenMessage<StreamTasksResponse>;

/**
 * Rate limiting / down-sampling parameters.
 *
 * @generated from message anduril.taskmanager.v1.RateLimit
 */
export declare type RateLimit = Message<"anduril.taskmanager.v1.RateLimit"> & {
  /**
   * Specifies a minimum duration in milliseconds after an update for a given task before another one
   * will be sent for the same task.
   * A value of 0 is treated as unset. If set, value must be >= 250.
   * Example: if set to 1000, and 4 events occur (ms since start) at T0, T500, T900, T2100, then
   * event from T0 will be sent at T0, T500 will be dropped, T900 will be sent at minimum of T1000,
   * and T2100 will be sent on time (2100)
   * This will only limit updates, other events will be sent immediately, with a delete clearing anything held
   *
   * @generated from field: uint32 update_per_task_limit_ms = 1;
   */
  updatePerTaskLimitMs: number;
};

/**
 * Describes the message anduril.taskmanager.v1.RateLimit.
 * Use `create(RateLimitSchema)` to create a new message.
 */
export declare const RateLimitSchema: GenMessage<RateLimit>;

/**
 * @generated from message anduril.taskmanager.v1.Heartbeat
 */
export declare type Heartbeat = Message<"anduril.taskmanager.v1.Heartbeat"> & {
  /**
   * The time at which the Heartbeat was sent.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;
};

/**
 * Describes the message anduril.taskmanager.v1.Heartbeat.
 * Use `create(HeartbeatSchema)` to create a new message.
 */
export declare const HeartbeatSchema: GenMessage<Heartbeat>;

/**
 * Task Manager is a service that performs state management associated with Tasks, and also the execution of Tasks
 *  on their designated agents.
 *
 * @generated from service anduril.taskmanager.v1.TaskManagerAPI
 */
export declare const TaskManagerAPI: GenService<{
  /**
   * Create a new Task.
   *
   * @generated from rpc anduril.taskmanager.v1.TaskManagerAPI.CreateTask
   */
  createTask: {
    methodKind: "unary";
    input: typeof CreateTaskRequestSchema;
    output: typeof CreateTaskResponseSchema;
  },
  /**
   * Get an existing Task.
   *
   * @generated from rpc anduril.taskmanager.v1.TaskManagerAPI.GetTask
   */
  getTask: {
    methodKind: "unary";
    input: typeof GetTaskRequestSchema;
    output: typeof GetTaskResponseSchema;
  },
  /**
   * Update definition of a Task, only works on Tasks that are not DONE or CANCEL_REQUESTED. Notes:
   *  * send the current task_version in Task, API will increment definition_version, and reset status_version to 1.
   *  * previous definition_version will have status set to REPLACED.
   *  * depending on assignee, replacing the definition will either update if capable on backend,
   *     or cancel previous and issue new.
   *
   * @generated from rpc anduril.taskmanager.v1.TaskManagerAPI.UpdateTask
   */
  updateTask: {
    methodKind: "unary";
    input: typeof UpdateTaskRequestSchema;
    output: typeof UpdateTaskResponseSchema;
  },
  /**
   * Update the status of a Task.
   *
   * @generated from rpc anduril.taskmanager.v1.TaskManagerAPI.UpdateStatus
   */
  updateStatus: {
    methodKind: "unary";
    input: typeof UpdateStatusRequestSchema;
    output: typeof UpdateStatusResponseSchema;
  },
  /**
   * Stream all existing live (not yet done) Tasks and any new updates.
   *
   * @generated from rpc anduril.taskmanager.v1.TaskManagerAPI.StreamTasks
   */
  streamTasks: {
    methodKind: "server_streaming";
    input: typeof StreamTasksRequestSchema;
    output: typeof StreamTasksResponseSchema;
  },
}>;

