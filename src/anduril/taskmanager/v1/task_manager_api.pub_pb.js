// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/taskmanager/v1/task_manager_api.pub.proto (package anduril.taskmanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const { Any, proto3, Timestamp } = require("@bufbuild/protobuf");
const { Principal, Relations, StatusUpdate, Task, TaskEntity, TaskEvent, TaskView } = require("./task.pub_pb.js");
const { CancelRequest, CompleteRequest, ExecuteRequest } = require("./task_api.pub_pb.js");

/**
 * Request to create a Task.
 *
 * @generated from message anduril.taskmanager.v1.CreateTaskRequest
 */
const CreateTaskRequest = proto3.makeMessageType(
  "anduril.taskmanager.v1.CreateTaskRequest",
  () => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "specification", kind: "message", T: Any },
    { no: 3, name: "author", kind: "message", T: Principal },
    { no: 5, name: "relations", kind: "message", T: Relations },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "is_executed_elsewhere", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "initial_entities", kind: "message", T: TaskEntity, repeated: true },
  ],
);

/**
 * Response to a Create Task request.
 *
 * @generated from message anduril.taskmanager.v1.CreateTaskResponse
 */
const CreateTaskResponse = proto3.makeMessageType(
  "anduril.taskmanager.v1.CreateTaskResponse",
  () => [
    { no: 1, name: "task", kind: "message", T: Task },
  ],
);

/**
 * Request to get a Task.
 *
 * @generated from message anduril.taskmanager.v1.GetTaskRequest
 */
const GetTaskRequest = proto3.makeMessageType(
  "anduril.taskmanager.v1.GetTaskRequest",
  () => [
    { no: 1, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "definition_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "task_view", kind: "enum", T: proto3.getEnumType(TaskView) },
  ],
);

/**
 * Response to a Get Task request.
 *
 * @generated from message anduril.taskmanager.v1.GetTaskResponse
 */
const GetTaskResponse = proto3.makeMessageType(
  "anduril.taskmanager.v1.GetTaskResponse",
  () => [
    { no: 1, name: "task", kind: "message", T: Task },
  ],
);

/**
 * Request to update a Task.
 *
 * @generated from message anduril.taskmanager.v1.UpdateTaskRequest
 */
const UpdateTaskRequest = proto3.makeMessageType(
  "anduril.taskmanager.v1.UpdateTaskRequest",
  () => [
    { no: 1, name: "task", kind: "message", T: Task },
    { no: 7, name: "is_executed_elsewhere", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Response to an Update Task request.
 *
 * @generated from message anduril.taskmanager.v1.UpdateTaskResponse
 */
const UpdateTaskResponse = proto3.makeMessageType(
  "anduril.taskmanager.v1.UpdateTaskResponse",
  () => [
    { no: 1, name: "task", kind: "message", T: Task },
  ],
);

/**
 * Request to update a Task's status.
 *
 * @generated from message anduril.taskmanager.v1.UpdateStatusRequest
 */
const UpdateStatusRequest = proto3.makeMessageType(
  "anduril.taskmanager.v1.UpdateStatusRequest",
  () => [
    { no: 1, name: "status_update", kind: "message", T: StatusUpdate },
  ],
);

/**
 * Response to an Update Status request.
 *
 * @generated from message anduril.taskmanager.v1.UpdateStatusResponse
 */
const UpdateStatusResponse = proto3.makeMessageType(
  "anduril.taskmanager.v1.UpdateStatusResponse",
  () => [
    { no: 1, name: "task", kind: "message", T: Task },
  ],
);

/**
 * Request to Stream Tasks. Returns all live Tasks (aka all not-DONE Tasks).
 *
 * @generated from message anduril.taskmanager.v1.StreamTasksRequest
 */
const StreamTasksRequest = proto3.makeMessageType(
  "anduril.taskmanager.v1.StreamTasksRequest",
  () => [
    { no: 1, name: "rate_limit", kind: "message", T: RateLimit },
    { no: 2, name: "views", kind: "enum", T: proto3.getEnumType(TaskView), repeated: true },
    { no: 3, name: "heartbeat_period_millis", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "exclude_preexisting_tasks", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * Response stream will be fed all matching pre-existing live Tasks, plus any new events ongoing.
 *
 * @generated from message anduril.taskmanager.v1.StreamTasksResponse
 */
const StreamTasksResponse = proto3.makeMessageType(
  "anduril.taskmanager.v1.StreamTasksResponse",
  () => [
    { no: 1, name: "task_event", kind: "message", T: TaskEvent },
    { no: 2, name: "heartbeat", kind: "message", T: Heartbeat },
  ],
);

/**
 * Request for streaming Tasks ready for agent execution.
 *
 * @generated from message anduril.taskmanager.v1.ListenAsAgentRequest
 */
const ListenAsAgentRequest = proto3.makeMessageType(
  "anduril.taskmanager.v1.ListenAsAgentRequest",
  () => [
    { no: 1, name: "entity_ids", kind: "message", T: EntityIds, oneof: "agent_selector" },
  ],
);

/**
 * Response for streaming Tasks ready for agent execution.
 *
 * @generated from message anduril.taskmanager.v1.ListenAsAgentResponse
 */
const ListenAsAgentResponse = proto3.makeMessageType(
  "anduril.taskmanager.v1.ListenAsAgentResponse",
  () => [
    { no: 1, name: "execute_request", kind: "message", T: ExecuteRequest, oneof: "request" },
    { no: 2, name: "cancel_request", kind: "message", T: CancelRequest, oneof: "request" },
    { no: 3, name: "complete_request", kind: "message", T: CompleteRequest, oneof: "request" },
  ],
);

/**
 * Rate limiting / down-sampling parameters.
 *
 * @generated from message anduril.taskmanager.v1.RateLimit
 */
const RateLimit = proto3.makeMessageType(
  "anduril.taskmanager.v1.RateLimit",
  () => [
    { no: 1, name: "update_per_task_limit_ms", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * @generated from message anduril.taskmanager.v1.Heartbeat
 */
const Heartbeat = proto3.makeMessageType(
  "anduril.taskmanager.v1.Heartbeat",
  () => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
  ],
);

/**
 * Entity IDs wrapper.
 *
 * @generated from message anduril.taskmanager.v1.EntityIds
 */
const EntityIds = proto3.makeMessageType(
  "anduril.taskmanager.v1.EntityIds",
  () => [
    { no: 1, name: "entity_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);


exports.CreateTaskRequest = CreateTaskRequest;
exports.CreateTaskResponse = CreateTaskResponse;
exports.GetTaskRequest = GetTaskRequest;
exports.GetTaskResponse = GetTaskResponse;
exports.UpdateTaskRequest = UpdateTaskRequest;
exports.UpdateTaskResponse = UpdateTaskResponse;
exports.UpdateStatusRequest = UpdateStatusRequest;
exports.UpdateStatusResponse = UpdateStatusResponse;
exports.StreamTasksRequest = StreamTasksRequest;
exports.StreamTasksResponse = StreamTasksResponse;
exports.ListenAsAgentRequest = ListenAsAgentRequest;
exports.ListenAsAgentResponse = ListenAsAgentResponse;
exports.RateLimit = RateLimit;
exports.Heartbeat = Heartbeat;
exports.EntityIds = EntityIds;
