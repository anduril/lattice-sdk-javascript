// @generated by protoc-gen-es v2.0.0
// @generated from file anduril/communicationsmanager/v1/integration.pub.proto (package anduril.communicationsmanager.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { EntityIntegrationDetails } from "./entity.pub_pb";
import type { BlobsIntegrationDetails } from "./blobs.pub_pb";
import type { EventType } from "./common.pub_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file anduril/communicationsmanager/v1/integration.pub.proto.
 */
export declare const file_anduril_communicationsmanager_v1_integration_pub: GenFile;

/**
 * @generated from message anduril.communicationsmanager.v1.RegisterIntegrationRequest
 */
export declare type RegisterIntegrationRequest = Message<"anduril.communicationsmanager.v1.RegisterIntegrationRequest"> & {
  /**
   * Identifying name for the integration. This must be unique on the local node.
   *
   * @generated from field: string integration_name = 1;
   */
  integrationName: string;

  /**
   * Specifies the registered data_types and health for the integration.
   *
   * @generated from field: anduril.communicationsmanager.v1.IntegrationDetails details = 2;
   */
  details?: IntegrationDetails;
};

/**
 * Describes the message anduril.communicationsmanager.v1.RegisterIntegrationRequest.
 * Use `create(RegisterIntegrationRequestSchema)` to create a new message.
 */
export declare const RegisterIntegrationRequestSchema: GenMessage<RegisterIntegrationRequest>;

/**
 * @generated from message anduril.communicationsmanager.v1.RegisteredIntegration
 */
export declare type RegisteredIntegration = Message<"anduril.communicationsmanager.v1.RegisteredIntegration"> & {
  /**
   * Identifies the integration. Must be unique for the node, meaning integration_name + node_id is globally unique.
   *
   * @generated from field: string integration_name = 1;
   */
  integrationName: string;

  /**
   * The id of the node that owns this integration.
   *
   * @generated from field: string node_id = 2;
   */
  nodeId: string;

  /**
   * The version of this registered integration. Set internally by CM, not to be used externally.
   *
   * @generated from field: int64 version_num = 4;
   */
  versionNum: bigint;

  /**
   * Specifies the registered data_types and health for the integration.
   *
   * @generated from field: anduril.communicationsmanager.v1.IntegrationDetails integration_details = 3;
   */
  integrationDetails?: IntegrationDetails;

  /**
   * Health of this integration
   *
   * @generated from field: anduril.communicationsmanager.v1.IntegrationHealthState health_state = 5;
   */
  healthState?: IntegrationHealthState;
};

/**
 * Describes the message anduril.communicationsmanager.v1.RegisteredIntegration.
 * Use `create(RegisteredIntegrationSchema)` to create a new message.
 */
export declare const RegisteredIntegrationSchema: GenMessage<RegisteredIntegration>;

/**
 * @generated from message anduril.communicationsmanager.v1.IntegrationDetails
 */
export declare type IntegrationDetails = Message<"anduril.communicationsmanager.v1.IntegrationDetails"> & {
  /**
   * @generated from field: anduril.communicationsmanager.v1.EntityIntegrationDetails entity_details = 1;
   */
  entityDetails?: EntityIntegrationDetails;

  /**
   * @generated from field: anduril.communicationsmanager.v1.BlobsIntegrationDetails blob_details = 2;
   */
  blobDetails?: BlobsIntegrationDetails;
};

/**
 * Describes the message anduril.communicationsmanager.v1.IntegrationDetails.
 * Use `create(IntegrationDetailsSchema)` to create a new message.
 */
export declare const IntegrationDetailsSchema: GenMessage<IntegrationDetails>;

/**
 * @generated from message anduril.communicationsmanager.v1.DeregisterIntegrationRequest
 */
export declare type DeregisterIntegrationRequest = Message<"anduril.communicationsmanager.v1.DeregisterIntegrationRequest"> & {
  /**
   * Identifier for the integration. The integration_name + node_id is globally unique.
   *
   * @generated from field: string integration_name = 1;
   */
  integrationName: string;

  /**
   * Unique identifier for the node that the integration is registered under.
   *
   * @generated from field: string node_id = 2;
   */
  nodeId: string;
};

/**
 * Describes the message anduril.communicationsmanager.v1.DeregisterIntegrationRequest.
 * Use `create(DeregisterIntegrationRequestSchema)` to create a new message.
 */
export declare const DeregisterIntegrationRequestSchema: GenMessage<DeregisterIntegrationRequest>;

/**
 * @generated from message anduril.communicationsmanager.v1.DeregisterIntegrationResponse
 */
export declare type DeregisterIntegrationResponse = Message<"anduril.communicationsmanager.v1.DeregisterIntegrationResponse"> & {
};

/**
 * Describes the message anduril.communicationsmanager.v1.DeregisterIntegrationResponse.
 * Use `create(DeregisterIntegrationResponseSchema)` to create a new message.
 */
export declare const DeregisterIntegrationResponseSchema: GenMessage<DeregisterIntegrationResponse>;

/**
 * @generated from message anduril.communicationsmanager.v1.GetIntegrationsRequest
 */
export declare type GetIntegrationsRequest = Message<"anduril.communicationsmanager.v1.GetIntegrationsRequest"> & {
  /**
   * String of node ids. If no nodes are specified, integrations for all nodes are returned.
   *
   * @generated from field: repeated string nodes = 1;
   */
  nodes: string[];
};

/**
 * Describes the message anduril.communicationsmanager.v1.GetIntegrationsRequest.
 * Use `create(GetIntegrationsRequestSchema)` to create a new message.
 */
export declare const GetIntegrationsRequestSchema: GenMessage<GetIntegrationsRequest>;

/**
 * @generated from message anduril.communicationsmanager.v1.GetIntegrationsResponse
 */
export declare type GetIntegrationsResponse = Message<"anduril.communicationsmanager.v1.GetIntegrationsResponse"> & {
  /**
   * Contains the registered integration data
   *
   * @generated from field: repeated anduril.communicationsmanager.v1.RegisteredIntegration integration = 1;
   */
  integration: RegisteredIntegration[];
};

/**
 * Describes the message anduril.communicationsmanager.v1.GetIntegrationsResponse.
 * Use `create(GetIntegrationsResponseSchema)` to create a new message.
 */
export declare const GetIntegrationsResponseSchema: GenMessage<GetIntegrationsResponse>;

/**
 * Return all integrations registered with the system, regardless of which node they
 * are registered with.
 *
 * @generated from message anduril.communicationsmanager.v1.AllNodes
 */
export declare type AllNodes = Message<"anduril.communicationsmanager.v1.AllNodes"> & {
};

/**
 * Describes the message anduril.communicationsmanager.v1.AllNodes.
 * Use `create(AllNodesSchema)` to create a new message.
 */
export declare const AllNodesSchema: GenMessage<AllNodes>;

/**
 * Return all integrations registered to the local communications-manager instance.
 *
 * @generated from message anduril.communicationsmanager.v1.LocalNode
 */
export declare type LocalNode = Message<"anduril.communicationsmanager.v1.LocalNode"> & {
};

/**
 * Describes the message anduril.communicationsmanager.v1.LocalNode.
 * Use `create(LocalNodeSchema)` to create a new message.
 */
export declare const LocalNodeSchema: GenMessage<LocalNode>;

/**
 * @generated from message anduril.communicationsmanager.v1.StreamIntegrationsRequest
 */
export declare type StreamIntegrationsRequest = Message<"anduril.communicationsmanager.v1.StreamIntegrationsRequest"> & {
  /**
   * Determines which integrations to stream according to their owner and the
   * requested specification.
   *
   * @generated from oneof anduril.communicationsmanager.v1.StreamIntegrationsRequest.owner_filter
   */
  ownerFilter: {
    /**
     * @generated from field: anduril.communicationsmanager.v1.AllNodes all_nodes = 1;
     */
    value: AllNodes;
    case: "allNodes";
  } | {
    /**
     * @generated from field: anduril.communicationsmanager.v1.LocalNode local_node = 2;
     */
    value: LocalNode;
    case: "localNode";
  } | { case: undefined; value?: undefined };

  /**
   * Close the stream after sending all currently existing integrations. Set this
   * to false to have a long-lived stream.
   *
   * @generated from field: bool preexisting_only = 3;
   */
  preexistingOnly: boolean;
};

/**
 * Describes the message anduril.communicationsmanager.v1.StreamIntegrationsRequest.
 * Use `create(StreamIntegrationsRequestSchema)` to create a new message.
 */
export declare const StreamIntegrationsRequestSchema: GenMessage<StreamIntegrationsRequest>;

/**
 * @generated from message anduril.communicationsmanager.v1.IntegrationEvent
 */
export declare type IntegrationEvent = Message<"anduril.communicationsmanager.v1.IntegrationEvent"> & {
  /**
   * @generated from field: anduril.communicationsmanager.v1.EventType event_type = 1;
   */
  eventType: EventType;

  /**
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  /**
   * @generated from field: anduril.communicationsmanager.v1.RegisteredIntegration integration = 3;
   */
  integration?: RegisteredIntegration;
};

/**
 * Describes the message anduril.communicationsmanager.v1.IntegrationEvent.
 * Use `create(IntegrationEventSchema)` to create a new message.
 */
export declare const IntegrationEventSchema: GenMessage<IntegrationEvent>;

/**
 * @generated from message anduril.communicationsmanager.v1.StreamIntegrationsResponse
 */
export declare type StreamIntegrationsResponse = Message<"anduril.communicationsmanager.v1.StreamIntegrationsResponse"> & {
  /**
   * @generated from field: anduril.communicationsmanager.v1.IntegrationEvent integration_event = 1;
   */
  integrationEvent?: IntegrationEvent;
};

/**
 * Describes the message anduril.communicationsmanager.v1.StreamIntegrationsResponse.
 * Use `create(StreamIntegrationsResponseSchema)` to create a new message.
 */
export declare const StreamIntegrationsResponseSchema: GenMessage<StreamIntegrationsResponse>;

/**
 * IntegrationHealth
 *
 * @generated from message anduril.communicationsmanager.v1.IntegrationHealthUpdateRequest
 */
export declare type IntegrationHealthUpdateRequest = Message<"anduril.communicationsmanager.v1.IntegrationHealthUpdateRequest"> & {
  /**
   * name of the integration reporting its health
   *
   * @generated from field: string integration_name = 1;
   */
  integrationName: string;

  /**
   * the health of the integration
   *
   * @generated from field: anduril.communicationsmanager.v1.IntegrationHealthState health_state = 2;
   */
  healthState?: IntegrationHealthState;
};

/**
 * Describes the message anduril.communicationsmanager.v1.IntegrationHealthUpdateRequest.
 * Use `create(IntegrationHealthUpdateRequestSchema)` to create a new message.
 */
export declare const IntegrationHealthUpdateRequestSchema: GenMessage<IntegrationHealthUpdateRequest>;

/**
 * @generated from message anduril.communicationsmanager.v1.IntegrationHealthUpdateResponse
 */
export declare type IntegrationHealthUpdateResponse = Message<"anduril.communicationsmanager.v1.IntegrationHealthUpdateResponse"> & {
};

/**
 * Describes the message anduril.communicationsmanager.v1.IntegrationHealthUpdateResponse.
 * Use `create(IntegrationHealthUpdateResponseSchema)` to create a new message.
 */
export declare const IntegrationHealthUpdateResponseSchema: GenMessage<IntegrationHealthUpdateResponse>;

/**
 * @generated from message anduril.communicationsmanager.v1.IntegrationHealthState
 */
export declare type IntegrationHealthState = Message<"anduril.communicationsmanager.v1.IntegrationHealthState"> & {
  /**
   * @generated from field: anduril.communicationsmanager.v1.IntegrationHealthStatus health_status = 1;
   */
  healthStatus: IntegrationHealthStatus;

  /**
   * @generated from field: string description = 2;
   */
  description: string;
};

/**
 * Describes the message anduril.communicationsmanager.v1.IntegrationHealthState.
 * Use `create(IntegrationHealthStateSchema)` to create a new message.
 */
export declare const IntegrationHealthStateSchema: GenMessage<IntegrationHealthState>;

/**
 * @generated from enum anduril.communicationsmanager.v1.IntegrationHealthStatus
 */
export enum IntegrationHealthStatus {
  /**
   * @generated from enum value: INTEGRATION_HEALTH_STATUS_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: INTEGRATION_HEALTH_STATUS_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * @generated from enum value: INTEGRATION_HEALTH_STATUS_HEALTHY = 2;
   */
  HEALTHY = 2,

  /**
   * @generated from enum value: INTEGRATION_HEALTH_STATUS_UNHEALTHY = 3;
   */
  UNHEALTHY = 3,
}

/**
 * Describes the enum anduril.communicationsmanager.v1.IntegrationHealthStatus.
 */
export declare const IntegrationHealthStatusSchema: GenEnum<IntegrationHealthStatus>;

