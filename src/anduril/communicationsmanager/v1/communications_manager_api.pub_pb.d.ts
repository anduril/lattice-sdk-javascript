// @generated by protoc-gen-es v2.0.0
// @generated from file anduril/communicationsmanager/v1/communications_manager_api.pub.proto (package anduril.communicationsmanager.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { CommunicationsManagerError, DistributionRule, DistributionRuleEvent, Rule, RuleEvent } from "./common.pub_pb";
import type { GetIntegrationsRequestSchema, GetIntegrationsResponseSchema, IntegrationHealthUpdateRequestSchema, IntegrationHealthUpdateResponseSchema, StreamIntegrationsRequestSchema, StreamIntegrationsResponseSchema } from "./integration.pub_pb";

/**
 * Describes the file anduril/communicationsmanager/v1/communications_manager_api.pub.proto.
 */
export declare const file_anduril_communicationsmanager_v1_communications_manager_api_pub: GenFile;

/**
 * A request to put a rule on this distribution manager.
 *
 * @generated from message anduril.communicationsmanager.v1.PutRuleRequest
 */
export declare type PutRuleRequest = Message<"anduril.communicationsmanager.v1.PutRuleRequest"> & {
  /**
   * @generated from field: anduril.communicationsmanager.v1.Rule rule = 2;
   */
  rule?: Rule;

  /**
   * To be DEPRECATED. Use `Rule`
   *
   * @generated from field: anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1;
   */
  distributionRule?: DistributionRule;
};

/**
 * Describes the message anduril.communicationsmanager.v1.PutRuleRequest.
 * Use `create(PutRuleRequestSchema)` to create a new message.
 */
export declare const PutRuleRequestSchema: GenMessage<PutRuleRequest>;

/**
 * A response indicating success or failure of the PutRuleRequest.
 *
 * @generated from message anduril.communicationsmanager.v1.PutRuleResponse
 */
export declare type PutRuleResponse = Message<"anduril.communicationsmanager.v1.PutRuleResponse"> & {
  /**
   * The current version of the rule after attempting to Put a rule. On success, version_num is incremented by 1.
   * On conflict the current, nonupdated version is returned and containing the current version_num.
   *
   * @generated from field: anduril.communicationsmanager.v1.Rule rule = 3;
   */
  rule?: Rule;

  /**
   * Error message returned in the event of an error such as a Proto-KV conflict.
   *
   * @generated from field: anduril.communicationsmanager.v1.CommunicationsManagerError error = 2;
   */
  error?: CommunicationsManagerError;

  /**
   * To be DEPRECATED. Use `Rule`
   *
   * @generated from field: anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1;
   */
  distributionRule?: DistributionRule;
};

/**
 * Describes the message anduril.communicationsmanager.v1.PutRuleResponse.
 * Use `create(PutRuleResponseSchema)` to create a new message.
 */
export declare const PutRuleResponseSchema: GenMessage<PutRuleResponse>;

/**
 * A request to stream rules from this node's distribution manager.
 *
 * @generated from message anduril.communicationsmanager.v1.StreamRulesRequest
 */
export declare type StreamRulesRequest = Message<"anduril.communicationsmanager.v1.StreamRulesRequest"> & {
  /**
   * @generated from field: repeated anduril.communicationsmanager.v1.RuleType rule_type = 1;
   */
  ruleType: RuleType[];

  /**
   * Stream preexisting rules only and close the stream once all preexisting rules have been provided.
   *
   * @generated from field: bool preexisting_only = 2;
   */
  preexistingOnly: boolean;
};

/**
 * Describes the message anduril.communicationsmanager.v1.StreamRulesRequest.
 * Use `create(StreamRulesRequestSchema)` to create a new message.
 */
export declare const StreamRulesRequestSchema: GenMessage<StreamRulesRequest>;

/**
 * A response stream will be fed all matching pre-existing rules first, then
 * receive any ongoing events.
 *
 * @generated from message anduril.communicationsmanager.v1.StreamRulesResponse
 */
export declare type StreamRulesResponse = Message<"anduril.communicationsmanager.v1.StreamRulesResponse"> & {
  /**
   * @generated from field: anduril.communicationsmanager.v1.RuleEvent rule_event = 2;
   */
  ruleEvent?: RuleEvent;

  /**
   * To be DEPRECATED. Use `RuleEvent`
   *
   * @generated from field: anduril.communicationsmanager.v1.DistributionRuleEvent distribution_rule_event = 1;
   */
  distributionRuleEvent?: DistributionRuleEvent;
};

/**
 * Describes the message anduril.communicationsmanager.v1.StreamRulesResponse.
 * Use `create(StreamRulesResponseSchema)` to create a new message.
 */
export declare const StreamRulesResponseSchema: GenMessage<StreamRulesResponse>;

/**
 * A request to delete a rule on this distribution manager.
 *
 * @generated from message anduril.communicationsmanager.v1.DeleteRuleRequest
 */
export declare type DeleteRuleRequest = Message<"anduril.communicationsmanager.v1.DeleteRuleRequest"> & {
  /**
   * @generated from field: anduril.communicationsmanager.v1.Rule rule = 2;
   */
  rule?: Rule;

  /**
   * To be DEPRECATED. Use `Rule`
   *
   * @generated from field: anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1;
   */
  distributionRule?: DistributionRule;
};

/**
 * Describes the message anduril.communicationsmanager.v1.DeleteRuleRequest.
 * Use `create(DeleteRuleRequestSchema)` to create a new message.
 */
export declare const DeleteRuleRequestSchema: GenMessage<DeleteRuleRequest>;

/**
 * A response indicating success or failure of the DeleteRuleRequest.
 *
 * @generated from message anduril.communicationsmanager.v1.DeleteRuleResponse
 */
export declare type DeleteRuleResponse = Message<"anduril.communicationsmanager.v1.DeleteRuleResponse"> & {
  /**
   * The current version of the rule after attempting to delete a rule. On success, distribution_rule is null.
   * On failure, the rule returned is the conflicted version.
   *
   * @generated from field: anduril.communicationsmanager.v1.Rule rule = 3;
   */
  rule?: Rule;

  /**
   * Error message returned in the event of an error such as a Proto-KV conflict.
   *
   * @generated from field: anduril.communicationsmanager.v1.CommunicationsManagerError error = 2;
   */
  error?: CommunicationsManagerError;

  /**
   * To be DEPRECATED. Use `Rule`
   *
   * @generated from field: anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1;
   */
  distributionRule?: DistributionRule;
};

/**
 * Describes the message anduril.communicationsmanager.v1.DeleteRuleResponse.
 * Use `create(DeleteRuleResponseSchema)` to create a new message.
 */
export declare const DeleteRuleResponseSchema: GenMessage<DeleteRuleResponse>;

/**
 * @generated from enum anduril.communicationsmanager.v1.RuleType
 */
export enum RuleType {
  /**
   * @generated from enum value: RULE_TYPE_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: RULE_TYPE_ENTITY = 1;
   */
  ENTITY = 1,

  /**
   * @generated from enum value: RULE_TYPE_BLOB = 2;
   */
  BLOB = 2,

  /**
   * @generated from enum value: RULE_TYPE_INTEGRATION = 3;
   */
  INTEGRATION = 3,
}

/**
 * Describes the enum anduril.communicationsmanager.v1.RuleType.
 */
export declare const RuleTypeSchema: GenEnum<RuleType>;

/**
 * Manages the policies for distribution of data via application of filters & priorities.
 *
 * @generated from service anduril.communicationsmanager.v1.CommunicationsManagerAPI
 */
export declare const CommunicationsManagerAPI: GenService<{
  /**
   * Puts a rule. Rules are distributed to all nodes in the mesh.
   *
   * @generated from rpc anduril.communicationsmanager.v1.CommunicationsManagerAPI.PutRule
   */
  putRule: {
    methodKind: "unary";
    input: typeof PutRuleRequestSchema;
    output: typeof PutRuleResponseSchema;
  },
  /**
   * Streams all rules available to this distribution manager.
   *
   * @generated from rpc anduril.communicationsmanager.v1.CommunicationsManagerAPI.StreamRules
   */
  streamRules: {
    methodKind: "server_streaming";
    input: typeof StreamRulesRequestSchema;
    output: typeof StreamRulesResponseSchema;
  },
  /**
   * @generated from rpc anduril.communicationsmanager.v1.CommunicationsManagerAPI.DeleteRule
   */
  deleteRule: {
    methodKind: "unary";
    input: typeof DeleteRuleRequestSchema;
    output: typeof DeleteRuleResponseSchema;
  },
  /**
   * Stream a list of integrations registered with the system. Supports various
   * filters to constrain to specific nodes.
   *
   * @generated from rpc anduril.communicationsmanager.v1.CommunicationsManagerAPI.StreamIntegrations
   */
  streamIntegrations: {
    methodKind: "server_streaming";
    input: typeof StreamIntegrationsRequestSchema;
    output: typeof StreamIntegrationsResponseSchema;
  },
  /**
   * Deprecated: Use ListIntegrations instead.
   *
   * @generated from rpc anduril.communicationsmanager.v1.CommunicationsManagerAPI.GetIntegrations
   */
  getIntegrations: {
    methodKind: "unary";
    input: typeof GetIntegrationsRequestSchema;
    output: typeof GetIntegrationsResponseSchema;
  },
  /**
   * @generated from rpc anduril.communicationsmanager.v1.CommunicationsManagerAPI.IntegrationHealthUpdate
   */
  integrationHealthUpdate: {
    methodKind: "unary";
    input: typeof IntegrationHealthUpdateRequestSchema;
    output: typeof IntegrationHealthUpdateResponseSchema;
  },
}>;

