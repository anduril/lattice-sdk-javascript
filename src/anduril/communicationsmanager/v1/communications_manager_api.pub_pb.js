// @generated by protoc-gen-es v1.7.2
// @generated from file anduril/communicationsmanager/v1/communications_manager_api.pub.proto (package anduril.communicationsmanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { CommunicationsManagerError, DistributionRule, DistributionRuleEvent, Rule, RuleEvent } from "./common.pub_pb.js";

/**
 * @generated from enum anduril.communicationsmanager.v1.RuleType
 */
export const RuleType = proto3.makeEnum(
  "anduril.communicationsmanager.v1.RuleType",
  [
    {no: 0, name: "RULE_TYPE_INVALID", localName: "INVALID"},
    {no: 1, name: "RULE_TYPE_ENTITY", localName: "ENTITY"},
    {no: 2, name: "RULE_TYPE_BLOB", localName: "BLOB"},
    {no: 3, name: "RULE_TYPE_INTEGRATION", localName: "INTEGRATION"},
  ],
);

/**
 * A request to put a rule on this distribution manager.
 *
 * @generated from message anduril.communicationsmanager.v1.PutRuleRequest
 */
export const PutRuleRequest = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.PutRuleRequest",
  () => [
    { no: 2, name: "rule", kind: "message", T: Rule },
    { no: 1, name: "distribution_rule", kind: "message", T: DistributionRule },
  ],
);

/**
 * A response indicating success or failure of the PutRuleRequest.
 *
 * @generated from message anduril.communicationsmanager.v1.PutRuleResponse
 */
export const PutRuleResponse = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.PutRuleResponse",
  () => [
    { no: 3, name: "rule", kind: "message", T: Rule },
    { no: 2, name: "error", kind: "message", T: CommunicationsManagerError },
    { no: 1, name: "distribution_rule", kind: "message", T: DistributionRule },
  ],
);

/**
 * A request to stream rules from this node's distribution manager.
 *
 * @generated from message anduril.communicationsmanager.v1.StreamRulesRequest
 */
export const StreamRulesRequest = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.StreamRulesRequest",
  () => [
    { no: 1, name: "rule_type", kind: "enum", T: proto3.getEnumType(RuleType), repeated: true },
    { no: 2, name: "preexisting_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * A response stream will be fed all matching pre-existing rules first, then
 * receive any ongoing events.
 *
 * @generated from message anduril.communicationsmanager.v1.StreamRulesResponse
 */
export const StreamRulesResponse = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.StreamRulesResponse",
  () => [
    { no: 2, name: "rule_event", kind: "message", T: RuleEvent },
    { no: 1, name: "distribution_rule_event", kind: "message", T: DistributionRuleEvent },
  ],
);

/**
 * A request to delete a rule on this distribution manager.
 *
 * @generated from message anduril.communicationsmanager.v1.DeleteRuleRequest
 */
export const DeleteRuleRequest = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.DeleteRuleRequest",
  () => [
    { no: 2, name: "rule", kind: "message", T: Rule },
    { no: 1, name: "distribution_rule", kind: "message", T: DistributionRule },
  ],
);

/**
 * A response indicating success or failure of the DeleteRuleRequest.
 *
 * @generated from message anduril.communicationsmanager.v1.DeleteRuleResponse
 */
export const DeleteRuleResponse = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.DeleteRuleResponse",
  () => [
    { no: 3, name: "rule", kind: "message", T: Rule },
    { no: 2, name: "error", kind: "message", T: CommunicationsManagerError },
    { no: 1, name: "distribution_rule", kind: "message", T: DistributionRule },
  ],
);

