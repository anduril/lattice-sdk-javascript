// @generated by protoc-gen-es v1.7.2
// @generated from file anduril/communicationsmanager/v1/integration.pub.proto (package anduril.communicationsmanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Timestamp } from "@bufbuild/protobuf";
import { EntityIntegrationDetails } from "./entity.pub_pb.js";
import { BlobsIntegrationDetails } from "./blobs.pub_pb.js";
import { EventType } from "./common.pub_pb.js";

/**
 * @generated from enum anduril.communicationsmanager.v1.IntegrationHealthStatus
 */
export const IntegrationHealthStatus = proto3.makeEnum(
  "anduril.communicationsmanager.v1.IntegrationHealthStatus",
  [
    {no: 0, name: "INTEGRATION_HEALTH_STATUS_INVALID", localName: "INVALID"},
    {no: 1, name: "INTEGRATION_HEALTH_STATUS_UNKNOWN", localName: "UNKNOWN"},
    {no: 2, name: "INTEGRATION_HEALTH_STATUS_HEALTHY", localName: "HEALTHY"},
    {no: 3, name: "INTEGRATION_HEALTH_STATUS_UNHEALTHY", localName: "UNHEALTHY"},
  ],
);

/**
 * @generated from message anduril.communicationsmanager.v1.RegisterIntegrationRequest
 */
export const RegisterIntegrationRequest = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.RegisterIntegrationRequest",
  () => [
    { no: 1, name: "integration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "details", kind: "message", T: IntegrationDetails },
  ],
);

/**
 * @generated from message anduril.communicationsmanager.v1.RegisteredIntegration
 */
export const RegisteredIntegration = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.RegisteredIntegration",
  () => [
    { no: 1, name: "integration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version_num", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "integration_details", kind: "message", T: IntegrationDetails },
    { no: 5, name: "health_state", kind: "message", T: IntegrationHealthState },
  ],
);

/**
 * @generated from message anduril.communicationsmanager.v1.IntegrationDetails
 */
export const IntegrationDetails = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.IntegrationDetails",
  () => [
    { no: 1, name: "entity_details", kind: "message", T: EntityIntegrationDetails },
    { no: 2, name: "blob_details", kind: "message", T: BlobsIntegrationDetails },
  ],
);

/**
 * @generated from message anduril.communicationsmanager.v1.DeregisterIntegrationRequest
 */
export const DeregisterIntegrationRequest = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.DeregisterIntegrationRequest",
  () => [
    { no: 1, name: "integration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message anduril.communicationsmanager.v1.DeregisterIntegrationResponse
 */
export const DeregisterIntegrationResponse = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.DeregisterIntegrationResponse",
  [],
);

/**
 * @generated from message anduril.communicationsmanager.v1.GetIntegrationsRequest
 */
export const GetIntegrationsRequest = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.GetIntegrationsRequest",
  () => [
    { no: 1, name: "nodes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message anduril.communicationsmanager.v1.GetIntegrationsResponse
 */
export const GetIntegrationsResponse = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.GetIntegrationsResponse",
  () => [
    { no: 1, name: "integration", kind: "message", T: RegisteredIntegration, repeated: true },
  ],
);

/**
 * Return all integrations registered with the system, regardless of which node they
 * are registered with.
 *
 * @generated from message anduril.communicationsmanager.v1.AllNodes
 */
export const AllNodes = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.AllNodes",
  [],
);

/**
 * Return all integrations registered to the local communications-manager instance.
 *
 * @generated from message anduril.communicationsmanager.v1.LocalNode
 */
export const LocalNode = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.LocalNode",
  [],
);

/**
 * @generated from message anduril.communicationsmanager.v1.StreamIntegrationsRequest
 */
export const StreamIntegrationsRequest = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.StreamIntegrationsRequest",
  () => [
    { no: 1, name: "all_nodes", kind: "message", T: AllNodes, oneof: "owner_filter" },
    { no: 2, name: "local_node", kind: "message", T: LocalNode, oneof: "owner_filter" },
    { no: 3, name: "preexisting_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message anduril.communicationsmanager.v1.IntegrationEvent
 */
export const IntegrationEvent = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.IntegrationEvent",
  () => [
    { no: 1, name: "event_type", kind: "enum", T: proto3.getEnumType(EventType) },
    { no: 2, name: "time", kind: "message", T: Timestamp },
    { no: 3, name: "integration", kind: "message", T: RegisteredIntegration },
  ],
);

/**
 * @generated from message anduril.communicationsmanager.v1.StreamIntegrationsResponse
 */
export const StreamIntegrationsResponse = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.StreamIntegrationsResponse",
  () => [
    { no: 1, name: "integration_event", kind: "message", T: IntegrationEvent },
  ],
);

/**
 * IntegrationHealth
 *
 * @generated from message anduril.communicationsmanager.v1.IntegrationHealthUpdateRequest
 */
export const IntegrationHealthUpdateRequest = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.IntegrationHealthUpdateRequest",
  () => [
    { no: 1, name: "integration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "health_state", kind: "message", T: IntegrationHealthState },
  ],
);

/**
 * @generated from message anduril.communicationsmanager.v1.IntegrationHealthUpdateResponse
 */
export const IntegrationHealthUpdateResponse = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.IntegrationHealthUpdateResponse",
  [],
);

/**
 * @generated from message anduril.communicationsmanager.v1.IntegrationHealthState
 */
export const IntegrationHealthState = proto3.makeMessageType(
  "anduril.communicationsmanager.v1.IntegrationHealthState",
  () => [
    { no: 1, name: "health_status", kind: "enum", T: proto3.getEnumType(IntegrationHealthStatus) },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

