// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/communicationsmanager/v1/communications_manager_api.pub.proto (package anduril.communicationsmanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CommunicationsManagerError, DistributionRule, DistributionRuleEvent, Rule, RuleEvent } from "./common.pub_pb.js";

/**
 * @generated from enum anduril.communicationsmanager.v1.RuleType
 */
export enum RuleType {
  /**
   * @generated from enum value: RULE_TYPE_INVALID = 0;
   */
  INVALID = 0,

  /**
   * @generated from enum value: RULE_TYPE_ENTITY = 1;
   */
  ENTITY = 1,

  /**
   * @generated from enum value: RULE_TYPE_BLOB = 2;
   */
  BLOB = 2,

  /**
   * @generated from enum value: RULE_TYPE_INTEGRATION = 3;
   */
  INTEGRATION = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(RuleType)
proto3.util.setEnumType(RuleType, "anduril.communicationsmanager.v1.RuleType", [
  { no: 0, name: "RULE_TYPE_INVALID" },
  { no: 1, name: "RULE_TYPE_ENTITY" },
  { no: 2, name: "RULE_TYPE_BLOB" },
  { no: 3, name: "RULE_TYPE_INTEGRATION" },
]);

/**
 * A request to put a rule on this distribution manager.
 *
 * @generated from message anduril.communicationsmanager.v1.PutRuleRequest
 */
export class PutRuleRequest extends Message<PutRuleRequest> {
  /**
   * @generated from field: anduril.communicationsmanager.v1.Rule rule = 2;
   */
  rule?: Rule;

  /**
   * To be DEPRECATED. Use `Rule`
   *
   * @generated from field: anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1;
   */
  distributionRule?: DistributionRule;

  constructor(data?: PartialMessage<PutRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.communicationsmanager.v1.PutRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "rule", kind: "message", T: Rule },
    { no: 1, name: "distribution_rule", kind: "message", T: DistributionRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutRuleRequest {
    return new PutRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutRuleRequest {
    return new PutRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutRuleRequest {
    return new PutRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutRuleRequest | PlainMessage<PutRuleRequest> | undefined, b: PutRuleRequest | PlainMessage<PutRuleRequest> | undefined): boolean {
    return proto3.util.equals(PutRuleRequest, a, b);
  }
}

/**
 * A response indicating success or failure of the PutRuleRequest.
 *
 * @generated from message anduril.communicationsmanager.v1.PutRuleResponse
 */
export class PutRuleResponse extends Message<PutRuleResponse> {
  /**
   * The current version of the rule after attempting to Put a rule. On success, version_num is incremented by 1.
   * On conflict the current, nonupdated version is returned and containing the current version_num.
   *
   * @generated from field: anduril.communicationsmanager.v1.Rule rule = 3;
   */
  rule?: Rule;

  /**
   * Error message returned in the event of an error such as a Proto-KV conflict.
   *
   * @generated from field: anduril.communicationsmanager.v1.CommunicationsManagerError error = 2;
   */
  error?: CommunicationsManagerError;

  /**
   * To be DEPRECATED. Use `Rule`
   *
   * @generated from field: anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1;
   */
  distributionRule?: DistributionRule;

  constructor(data?: PartialMessage<PutRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.communicationsmanager.v1.PutRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "rule", kind: "message", T: Rule },
    { no: 2, name: "error", kind: "message", T: CommunicationsManagerError },
    { no: 1, name: "distribution_rule", kind: "message", T: DistributionRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutRuleResponse {
    return new PutRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutRuleResponse {
    return new PutRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutRuleResponse {
    return new PutRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PutRuleResponse | PlainMessage<PutRuleResponse> | undefined, b: PutRuleResponse | PlainMessage<PutRuleResponse> | undefined): boolean {
    return proto3.util.equals(PutRuleResponse, a, b);
  }
}

/**
 * A request to stream rules from this node's distribution manager.
 *
 * @generated from message anduril.communicationsmanager.v1.StreamRulesRequest
 */
export class StreamRulesRequest extends Message<StreamRulesRequest> {
  /**
   * @generated from field: repeated anduril.communicationsmanager.v1.RuleType rule_type = 1;
   */
  ruleType: RuleType[] = [];

  /**
   * Stream preexisting rules only and close the stream once all preexisting rules have been provided.
   *
   * @generated from field: bool preexisting_only = 2;
   */
  preexistingOnly = false;

  constructor(data?: PartialMessage<StreamRulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.communicationsmanager.v1.StreamRulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rule_type", kind: "enum", T: proto3.getEnumType(RuleType), repeated: true },
    { no: 2, name: "preexisting_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamRulesRequest {
    return new StreamRulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamRulesRequest {
    return new StreamRulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamRulesRequest {
    return new StreamRulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamRulesRequest | PlainMessage<StreamRulesRequest> | undefined, b: StreamRulesRequest | PlainMessage<StreamRulesRequest> | undefined): boolean {
    return proto3.util.equals(StreamRulesRequest, a, b);
  }
}

/**
 * A response stream will be fed all matching pre-existing rules first, then
 * receive any ongoing events.
 *
 * @generated from message anduril.communicationsmanager.v1.StreamRulesResponse
 */
export class StreamRulesResponse extends Message<StreamRulesResponse> {
  /**
   * @generated from field: anduril.communicationsmanager.v1.RuleEvent rule_event = 2;
   */
  ruleEvent?: RuleEvent;

  /**
   * To be DEPRECATED. Use `RuleEvent`
   *
   * @generated from field: anduril.communicationsmanager.v1.DistributionRuleEvent distribution_rule_event = 1;
   */
  distributionRuleEvent?: DistributionRuleEvent;

  constructor(data?: PartialMessage<StreamRulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.communicationsmanager.v1.StreamRulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "rule_event", kind: "message", T: RuleEvent },
    { no: 1, name: "distribution_rule_event", kind: "message", T: DistributionRuleEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamRulesResponse {
    return new StreamRulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamRulesResponse {
    return new StreamRulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamRulesResponse {
    return new StreamRulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamRulesResponse | PlainMessage<StreamRulesResponse> | undefined, b: StreamRulesResponse | PlainMessage<StreamRulesResponse> | undefined): boolean {
    return proto3.util.equals(StreamRulesResponse, a, b);
  }
}

/**
 * A request to delete a rule on this distribution manager.
 *
 * @generated from message anduril.communicationsmanager.v1.DeleteRuleRequest
 */
export class DeleteRuleRequest extends Message<DeleteRuleRequest> {
  /**
   * @generated from field: anduril.communicationsmanager.v1.Rule rule = 2;
   */
  rule?: Rule;

  /**
   * To be DEPRECATED. Use `Rule`
   *
   * @generated from field: anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1;
   */
  distributionRule?: DistributionRule;

  constructor(data?: PartialMessage<DeleteRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.communicationsmanager.v1.DeleteRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "rule", kind: "message", T: Rule },
    { no: 1, name: "distribution_rule", kind: "message", T: DistributionRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRuleRequest {
    return new DeleteRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRuleRequest {
    return new DeleteRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRuleRequest {
    return new DeleteRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRuleRequest | PlainMessage<DeleteRuleRequest> | undefined, b: DeleteRuleRequest | PlainMessage<DeleteRuleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRuleRequest, a, b);
  }
}

/**
 * A response indicating success or failure of the DeleteRuleRequest.
 *
 * @generated from message anduril.communicationsmanager.v1.DeleteRuleResponse
 */
export class DeleteRuleResponse extends Message<DeleteRuleResponse> {
  /**
   * The current version of the rule after attempting to delete a rule. On success, distribution_rule is null.
   * On failure, the rule returned is the conflicted version.
   *
   * @generated from field: anduril.communicationsmanager.v1.Rule rule = 3;
   */
  rule?: Rule;

  /**
   * Error message returned in the event of an error such as a Proto-KV conflict.
   *
   * @generated from field: anduril.communicationsmanager.v1.CommunicationsManagerError error = 2;
   */
  error?: CommunicationsManagerError;

  /**
   * To be DEPRECATED. Use `Rule`
   *
   * @generated from field: anduril.communicationsmanager.v1.DistributionRule distribution_rule = 1;
   */
  distributionRule?: DistributionRule;

  constructor(data?: PartialMessage<DeleteRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.communicationsmanager.v1.DeleteRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "rule", kind: "message", T: Rule },
    { no: 2, name: "error", kind: "message", T: CommunicationsManagerError },
    { no: 1, name: "distribution_rule", kind: "message", T: DistributionRule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRuleResponse {
    return new DeleteRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRuleResponse {
    return new DeleteRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRuleResponse {
    return new DeleteRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRuleResponse | PlainMessage<DeleteRuleResponse> | undefined, b: DeleteRuleResponse | PlainMessage<DeleteRuleResponse> | undefined): boolean {
    return proto3.util.equals(DeleteRuleResponse, a, b);
  }
}

