// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/communicationsmanager/v1/cross_domain.pub.proto (package anduril.communicationsmanager.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message anduril.communicationsmanager.v1.RegisteredCds
 */
export declare class RegisteredCds extends Message<RegisteredCds> {
  /**
   * Flux hexadecimal host id, i.e. '5a'.
   *
   * @generated from field: string host_id = 1;
   */
  hostId: string;

  /**
   * identifier of the CDS to apply the rule to. A single Flux host may have multiple CDS services.
   *
   * @generated from field: string cds_name = 2;
   */
  cdsName: string;

  constructor(data?: PartialMessage<RegisteredCds>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.communicationsmanager.v1.RegisteredCds";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisteredCds;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisteredCds;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisteredCds;

  static equals(a: RegisteredCds | PlainMessage<RegisteredCds> | undefined, b: RegisteredCds | PlainMessage<RegisteredCds> | undefined): boolean;
}

/**
 * @generated from message anduril.communicationsmanager.v1.CdsDestination
 */
export declare class CdsDestination extends Message<CdsDestination> {
  /**
   * @generated from field: anduril.communicationsmanager.v1.RegisteredCds registered_cds = 1;
   */
  registeredCds?: RegisteredCds;

  constructor(data?: PartialMessage<CdsDestination>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.communicationsmanager.v1.CdsDestination";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CdsDestination;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CdsDestination;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CdsDestination;

  static equals(a: CdsDestination | PlainMessage<CdsDestination> | undefined, b: CdsDestination | PlainMessage<CdsDestination> | undefined): boolean;
}

