// @generated by protoc-gen-es v1.7.2 with parameter "js_import_style=legacy_commonjs"
// @generated from file anduril/auth/v2/idp.pub.proto (package anduril.auth.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message anduril.auth.v2.GetSSOURLRequest
 */
export declare class GetSSOURLRequest extends Message<GetSSOURLRequest> {
  /**
   * The email address of the user wishing to authenticate.
   *
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * The URL that the user should be redirected to after they successfully authenticate.
   *
   * @generated from field: string redirect_url = 2;
   */
  redirectUrl: string;

  /**
   * If true, appends the token to the query params when redirecting to redirect_url. Only for OIDC.
   *
   * @generated from field: bool append_token = 3;
   */
  appendToken: boolean;

  constructor(data?: PartialMessage<GetSSOURLRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.auth.v2.GetSSOURLRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSSOURLRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSSOURLRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSSOURLRequest;

  static equals(a: GetSSOURLRequest | PlainMessage<GetSSOURLRequest> | undefined, b: GetSSOURLRequest | PlainMessage<GetSSOURLRequest> | undefined): boolean;
}

/**
 * @generated from message anduril.auth.v2.GetSSOURLResponse
 */
export declare class GetSSOURLResponse extends Message<GetSSOURLResponse> {
  /**
   * @generated from oneof anduril.auth.v2.GetSSOURLResponse.response
   */
  response: {
    /**
     * @generated from field: anduril.auth.v2.GetSSOURLResponse.InvalidEmail invalid_email = 1;
     */
    value: GetSSOURLResponse_InvalidEmail;
    case: "invalidEmail";
  } | {
    /**
     * @generated from field: anduril.auth.v2.GetSSOURLResponse.ValidDomain valid_domain = 2;
     */
    value: GetSSOURLResponse_ValidDomain;
    case: "validDomain";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<GetSSOURLResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.auth.v2.GetSSOURLResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSSOURLResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSSOURLResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSSOURLResponse;

  static equals(a: GetSSOURLResponse | PlainMessage<GetSSOURLResponse> | undefined, b: GetSSOURLResponse | PlainMessage<GetSSOURLResponse> | undefined): boolean;
}

/**
 * The given email was invalid or not registered.
 *
 * @generated from message anduril.auth.v2.GetSSOURLResponse.InvalidEmail
 */
export declare class GetSSOURLResponse_InvalidEmail extends Message<GetSSOURLResponse_InvalidEmail> {
  /**
   * A human-readable reason (that may be shown to the user).
   *
   * @generated from field: string reason = 1;
   */
  reason: string;

  constructor(data?: PartialMessage<GetSSOURLResponse_InvalidEmail>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.auth.v2.GetSSOURLResponse.InvalidEmail";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSSOURLResponse_InvalidEmail;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSSOURLResponse_InvalidEmail;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSSOURLResponse_InvalidEmail;

  static equals(a: GetSSOURLResponse_InvalidEmail | PlainMessage<GetSSOURLResponse_InvalidEmail> | undefined, b: GetSSOURLResponse_InvalidEmail | PlainMessage<GetSSOURLResponse_InvalidEmail> | undefined): boolean;
}

/**
 * The given email domain is recognized, and the user may sign in using the specified IDPs.
 *
 * @generated from message anduril.auth.v2.GetSSOURLResponse.ValidDomain
 */
export declare class GetSSOURLResponse_ValidDomain extends Message<GetSSOURLResponse_ValidDomain> {
  /**
   * @generated from field: repeated anduril.auth.v2.Idp idps = 1;
   */
  idps: Idp[];

  constructor(data?: PartialMessage<GetSSOURLResponse_ValidDomain>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.auth.v2.GetSSOURLResponse.ValidDomain";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSSOURLResponse_ValidDomain;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSSOURLResponse_ValidDomain;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSSOURLResponse_ValidDomain;

  static equals(a: GetSSOURLResponse_ValidDomain | PlainMessage<GetSSOURLResponse_ValidDomain> | undefined, b: GetSSOURLResponse_ValidDomain | PlainMessage<GetSSOURLResponse_ValidDomain> | undefined): boolean;
}

/**
 * A wrapper around the types of supported IDPs.
 *
 * @generated from message anduril.auth.v2.Idp
 */
export declare class Idp extends Message<Idp> {
  /**
   * @generated from oneof anduril.auth.v2.Idp.idp
   */
  idp: {
    /**
     * @generated from field: anduril.auth.v2.InternalIDP internal = 1;
     */
    value: InternalIDP;
    case: "internal";
  } | {
    /**
     * @generated from field: anduril.auth.v2.ExternalIDP external = 2;
     */
    value: ExternalIDP;
    case: "external";
  } | {
    /**
     * @generated from field: anduril.auth.v2.PIV piv = 3;
     */
    value: PIV;
    case: "piv";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Idp>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.auth.v2.Idp";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Idp;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Idp;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Idp;

  static equals(a: Idp | PlainMessage<Idp> | undefined, b: Idp | PlainMessage<Idp> | undefined): boolean;
}

/**
 * A message indicating that the user may login with the internal IDP.
 *
 * @generated from message anduril.auth.v2.InternalIDP
 */
export declare class InternalIDP extends Message<InternalIDP> {
  constructor(data?: PartialMessage<InternalIDP>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.auth.v2.InternalIDP";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InternalIDP;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InternalIDP;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InternalIDP;

  static equals(a: InternalIDP | PlainMessage<InternalIDP> | undefined, b: InternalIDP | PlainMessage<InternalIDP> | undefined): boolean;
}

/**
 * A message indicating that a user may login with an external IDP.
 *
 * @generated from message anduril.auth.v2.ExternalIDP
 */
export declare class ExternalIDP extends Message<ExternalIDP> {
  /**
   * A human-readable name for the IDP.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The single sign on URL that the user may be redirected to to authenticate.
   *
   * @generated from field: string sso_url = 2;
   */
  ssoUrl: string;

  /**
   * String that uniquely identified the same IDP across different instances
   *
   * @generated from field: string unique_id = 3;
   */
  uniqueId: string;

  constructor(data?: PartialMessage<ExternalIDP>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.auth.v2.ExternalIDP";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExternalIDP;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExternalIDP;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExternalIDP;

  static equals(a: ExternalIDP | PlainMessage<ExternalIDP> | undefined, b: ExternalIDP | PlainMessage<ExternalIDP> | undefined): boolean;
}

/**
 * A message indicating that the user may login using their PIV smart card.
 *
 * @generated from message anduril.auth.v2.PIV
 */
export declare class PIV extends Message<PIV> {
  constructor(data?: PartialMessage<PIV>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "anduril.auth.v2.PIV";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PIV;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PIV;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PIV;

  static equals(a: PIV | PlainMessage<PIV> | undefined, b: PIV | PlainMessage<PIV> | undefined): boolean;
}

