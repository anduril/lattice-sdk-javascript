// @generated by protoc-gen-es v2.0.0
// @generated from file anduril/auth/v2/idp.pub.proto (package anduril.auth.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file anduril/auth/v2/idp.pub.proto.
 */
export declare const file_anduril_auth_v2_idp_pub: GenFile;

/**
 * @generated from message anduril.auth.v2.GetSSOURLRequest
 */
export declare type GetSSOURLRequest = Message<"anduril.auth.v2.GetSSOURLRequest"> & {
  /**
   * The email address of the user wishing to authenticate.
   *
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * The URL that the user should be redirected to after they successfully authenticate.
   *
   * @generated from field: string redirect_url = 2;
   */
  redirectUrl: string;

  /**
   * If true, appends the token to the query params when redirecting to redirect_url. Only for OIDC.
   *
   * @generated from field: bool append_token = 3;
   */
  appendToken: boolean;
};

/**
 * Describes the message anduril.auth.v2.GetSSOURLRequest.
 * Use `create(GetSSOURLRequestSchema)` to create a new message.
 */
export declare const GetSSOURLRequestSchema: GenMessage<GetSSOURLRequest>;

/**
 * @generated from message anduril.auth.v2.GetSSOURLResponse
 */
export declare type GetSSOURLResponse = Message<"anduril.auth.v2.GetSSOURLResponse"> & {
  /**
   * @generated from oneof anduril.auth.v2.GetSSOURLResponse.response
   */
  response: {
    /**
     * @generated from field: anduril.auth.v2.GetSSOURLResponse.InvalidEmail invalid_email = 1;
     */
    value: GetSSOURLResponse_InvalidEmail;
    case: "invalidEmail";
  } | {
    /**
     * @generated from field: anduril.auth.v2.GetSSOURLResponse.ValidDomain valid_domain = 2;
     */
    value: GetSSOURLResponse_ValidDomain;
    case: "validDomain";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.auth.v2.GetSSOURLResponse.
 * Use `create(GetSSOURLResponseSchema)` to create a new message.
 */
export declare const GetSSOURLResponseSchema: GenMessage<GetSSOURLResponse>;

/**
 * The given email was invalid or not registered.
 *
 * @generated from message anduril.auth.v2.GetSSOURLResponse.InvalidEmail
 */
export declare type GetSSOURLResponse_InvalidEmail = Message<"anduril.auth.v2.GetSSOURLResponse.InvalidEmail"> & {
  /**
   * A human-readable reason (that may be shown to the user).
   *
   * @generated from field: string reason = 1;
   */
  reason: string;
};

/**
 * Describes the message anduril.auth.v2.GetSSOURLResponse.InvalidEmail.
 * Use `create(GetSSOURLResponse_InvalidEmailSchema)` to create a new message.
 */
export declare const GetSSOURLResponse_InvalidEmailSchema: GenMessage<GetSSOURLResponse_InvalidEmail>;

/**
 * The given email domain is recognized, and the user may sign in using the specified IDPs.
 *
 * @generated from message anduril.auth.v2.GetSSOURLResponse.ValidDomain
 */
export declare type GetSSOURLResponse_ValidDomain = Message<"anduril.auth.v2.GetSSOURLResponse.ValidDomain"> & {
  /**
   * @generated from field: repeated anduril.auth.v2.Idp idps = 1;
   */
  idps: Idp[];
};

/**
 * Describes the message anduril.auth.v2.GetSSOURLResponse.ValidDomain.
 * Use `create(GetSSOURLResponse_ValidDomainSchema)` to create a new message.
 */
export declare const GetSSOURLResponse_ValidDomainSchema: GenMessage<GetSSOURLResponse_ValidDomain>;

/**
 * A wrapper around the types of supported IDPs.
 *
 * @generated from message anduril.auth.v2.Idp
 */
export declare type Idp = Message<"anduril.auth.v2.Idp"> & {
  /**
   * @generated from oneof anduril.auth.v2.Idp.idp
   */
  idp: {
    /**
     * @generated from field: anduril.auth.v2.InternalIDP internal = 1;
     */
    value: InternalIDP;
    case: "internal";
  } | {
    /**
     * @generated from field: anduril.auth.v2.ExternalIDP external = 2;
     */
    value: ExternalIDP;
    case: "external";
  } | {
    /**
     * @generated from field: anduril.auth.v2.PIV piv = 3;
     */
    value: PIV;
    case: "piv";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message anduril.auth.v2.Idp.
 * Use `create(IdpSchema)` to create a new message.
 */
export declare const IdpSchema: GenMessage<Idp>;

/**
 * A message indicating that the user may login with the internal IDP.
 *
 * @generated from message anduril.auth.v2.InternalIDP
 */
export declare type InternalIDP = Message<"anduril.auth.v2.InternalIDP"> & {
};

/**
 * Describes the message anduril.auth.v2.InternalIDP.
 * Use `create(InternalIDPSchema)` to create a new message.
 */
export declare const InternalIDPSchema: GenMessage<InternalIDP>;

/**
 * A message indicating that a user may login with an external IDP.
 *
 * @generated from message anduril.auth.v2.ExternalIDP
 */
export declare type ExternalIDP = Message<"anduril.auth.v2.ExternalIDP"> & {
  /**
   * A human-readable name for the IDP.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The single sign on URL that the user may be redirected to to authenticate.
   *
   * @generated from field: string sso_url = 2;
   */
  ssoUrl: string;

  /**
   * String that uniquely identified the same IDP across different instances
   *
   * @generated from field: string unique_id = 3;
   */
  uniqueId: string;
};

/**
 * Describes the message anduril.auth.v2.ExternalIDP.
 * Use `create(ExternalIDPSchema)` to create a new message.
 */
export declare const ExternalIDPSchema: GenMessage<ExternalIDP>;

/**
 * A message indicating that the user may login using their PIV smart card.
 *
 * @generated from message anduril.auth.v2.PIV
 */
export declare type PIV = Message<"anduril.auth.v2.PIV"> & {
};

/**
 * Describes the message anduril.auth.v2.PIV.
 * Use `create(PIVSchema)` to create a new message.
 */
export declare const PIVSchema: GenMessage<PIV>;

/**
 * @generated from service anduril.auth.v2.Idps
 */
export declare const Idps: GenService<{
  /**
   * GetSSOURL returns an identity provider's single sign on (SSO) URL which a user should be redirected to
   * authenticate. If no IDP can be located for the email's domain then a NotFound error is returned.
   *
   * @generated from rpc anduril.auth.v2.Idps.GetSSOURL
   */
  getSSOURL: {
    methodKind: "unary";
    input: typeof GetSSOURLRequestSchema;
    output: typeof GetSSOURLResponseSchema;
  },
}>;

