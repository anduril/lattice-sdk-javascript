// @generated by protoc-gen-es v1.7.2
// @generated from file anduril/auth/v2/idp.pub.proto (package anduril.auth.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message anduril.auth.v2.GetSSOURLRequest
 */
export const GetSSOURLRequest = proto3.makeMessageType(
  "anduril.auth.v2.GetSSOURLRequest",
  () => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "redirect_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "append_token", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message anduril.auth.v2.GetSSOURLResponse
 */
export const GetSSOURLResponse = proto3.makeMessageType(
  "anduril.auth.v2.GetSSOURLResponse",
  () => [
    { no: 1, name: "invalid_email", kind: "message", T: GetSSOURLResponse_InvalidEmail, oneof: "response" },
    { no: 2, name: "valid_domain", kind: "message", T: GetSSOURLResponse_ValidDomain, oneof: "response" },
  ],
);

/**
 * The given email was invalid or not registered.
 *
 * @generated from message anduril.auth.v2.GetSSOURLResponse.InvalidEmail
 */
export const GetSSOURLResponse_InvalidEmail = proto3.makeMessageType(
  "anduril.auth.v2.GetSSOURLResponse.InvalidEmail",
  () => [
    { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "GetSSOURLResponse_InvalidEmail"},
);

/**
 * The given email domain is recognized, and the user may sign in using the specified IDPs.
 *
 * @generated from message anduril.auth.v2.GetSSOURLResponse.ValidDomain
 */
export const GetSSOURLResponse_ValidDomain = proto3.makeMessageType(
  "anduril.auth.v2.GetSSOURLResponse.ValidDomain",
  () => [
    { no: 1, name: "idps", kind: "message", T: Idp, repeated: true },
  ],
  {localName: "GetSSOURLResponse_ValidDomain"},
);

/**
 * A wrapper around the types of supported IDPs.
 *
 * @generated from message anduril.auth.v2.Idp
 */
export const Idp = proto3.makeMessageType(
  "anduril.auth.v2.Idp",
  () => [
    { no: 1, name: "internal", kind: "message", T: InternalIDP, oneof: "idp" },
    { no: 2, name: "external", kind: "message", T: ExternalIDP, oneof: "idp" },
    { no: 3, name: "piv", kind: "message", T: PIV, oneof: "idp" },
  ],
);

/**
 * A message indicating that the user may login with the internal IDP.
 *
 * @generated from message anduril.auth.v2.InternalIDP
 */
export const InternalIDP = proto3.makeMessageType(
  "anduril.auth.v2.InternalIDP",
  [],
);

/**
 * A message indicating that a user may login with an external IDP.
 *
 * @generated from message anduril.auth.v2.ExternalIDP
 */
export const ExternalIDP = proto3.makeMessageType(
  "anduril.auth.v2.ExternalIDP",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sso_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "unique_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * A message indicating that the user may login using their PIV smart card.
 *
 * @generated from message anduril.auth.v2.PIV
 */
export const PIV = proto3.makeMessageType(
  "anduril.auth.v2.PIV",
  [],
);

