// @generated by protoc-gen-es v2.0.0
// @generated from file anduril/blobs/v1/blobs_api.pub.proto (package anduril.blobs.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { BlobMetadata, BlobProvenance } from "./common.pub_pb";

/**
 * Describes the file anduril/blobs/v1/blobs_api.pub.proto.
 */
export declare const file_anduril_blobs_v1_blobs_api_pub: GenFile;

/**
 * Create and store a new blob (<=2MB).
 *
 * @generated from message anduril.blobs.v1.CreateBlobRequest
 */
export declare type CreateBlobRequest = Message<"anduril.blobs.v1.CreateBlobRequest"> & {
  /**
   * blobs created will be namespaced by client_id
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * unique (per client) key for the blob
   *
   * @generated from field: string key = 2;
   */
  key: string;

  /**
   * timestamp after which should no longer retain this blob. required and cannot be > 90 days in the future.
   *
   * @generated from field: google.protobuf.Timestamp retention_time = 3;
   */
  retentionTime?: Timestamp;

  /**
   * optional md5 sum/hash of contents. if provided, will be validated against md5 of contents
   *
   * @generated from field: bytes md5 = 4;
   */
  md5: Uint8Array;

  /**
   * contents of the entire blob, maximum size is 2MB (2 * 1024 * 1024 bytes)
   *
   * @generated from field: bytes contents = 5;
   */
  contents: Uint8Array;

  /**
   * details regarding the blob's origin - aka source and type
   *
   * @generated from field: anduril.blobs.v1.BlobProvenance provenance = 6;
   */
  provenance?: BlobProvenance;
};

/**
 * Describes the message anduril.blobs.v1.CreateBlobRequest.
 * Use `create(CreateBlobRequestSchema)` to create a new message.
 */
export declare const CreateBlobRequestSchema: GenMessage<CreateBlobRequest>;

/**
 * @generated from message anduril.blobs.v1.CreateBlobResponse
 */
export declare type CreateBlobResponse = Message<"anduril.blobs.v1.CreateBlobResponse"> & {
  /**
   * @generated from field: anduril.blobs.v1.BlobMetadata metadata = 1;
   */
  metadata?: BlobMetadata;

  /**
   * URL at which the blob can be fetched
   *
   * @generated from field: string url = 2;
   */
  url: string;
};

/**
 * Describes the message anduril.blobs.v1.CreateBlobResponse.
 * Use `create(CreateBlobResponseSchema)` to create a new message.
 */
export declare const CreateBlobResponseSchema: GenMessage<CreateBlobResponse>;

/**
 * Create and store a new blob. Only the first 'CreateBlobChunkedRequest' message in the client stream needs
 * to contain metadata specific fields (IE: client_id, key, md5 etc.). Metadata fields set on all requests
 * ensuing the first request will be ignored.
 *
 * @generated from message anduril.blobs.v1.CreateBlobChunkedRequest
 */
export declare type CreateBlobChunkedRequest = Message<"anduril.blobs.v1.CreateBlobChunkedRequest"> & {
  /**
   * blobs created will be namespaced by client_id
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * unique (per client) key for the blob
   *
   * @generated from field: string key = 2;
   */
  key: string;

  /**
   * timestamp after which should no longer retain this blob. required and cannot be > 90 days in the future.
   *
   * @generated from field: google.protobuf.Timestamp retention_time = 3;
   */
  retentionTime?: Timestamp;

  /**
   * optional md5 sum/hash of contents. if provided, will be validated against the md5 of all contents in aggregate
   *
   * @generated from field: bytes md5 = 4;
   */
  md5: Uint8Array;

  /**
   * contents of the blob chunk, maximum size is 2MB per message (2 * 1024 * 1024 bytes)
   *
   * @generated from field: bytes chunk_contents = 5;
   */
  chunkContents: Uint8Array;

  /**
   * details regarding the blob's origin - aka source and type
   *
   * @generated from field: anduril.blobs.v1.BlobProvenance provenance = 6;
   */
  provenance?: BlobProvenance;
};

/**
 * Describes the message anduril.blobs.v1.CreateBlobChunkedRequest.
 * Use `create(CreateBlobChunkedRequestSchema)` to create a new message.
 */
export declare const CreateBlobChunkedRequestSchema: GenMessage<CreateBlobChunkedRequest>;

/**
 * @generated from message anduril.blobs.v1.CreateBlobChunkedResponse
 */
export declare type CreateBlobChunkedResponse = Message<"anduril.blobs.v1.CreateBlobChunkedResponse"> & {
  /**
   * @generated from field: anduril.blobs.v1.BlobMetadata metadata = 1;
   */
  metadata?: BlobMetadata;

  /**
   * URL at which the blob can be fetched
   *
   * @generated from field: string url = 2;
   */
  url: string;
};

/**
 * Describes the message anduril.blobs.v1.CreateBlobChunkedResponse.
 * Use `create(CreateBlobChunkedResponseSchema)` to create a new message.
 */
export declare const CreateBlobChunkedResponseSchema: GenMessage<CreateBlobChunkedResponse>;

/**
 * @generated from message anduril.blobs.v1.GetBlobRequest
 */
export declare type GetBlobRequest = Message<"anduril.blobs.v1.GetBlobRequest"> & {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * @generated from field: string key = 2;
   */
  key: string;
};

/**
 * Describes the message anduril.blobs.v1.GetBlobRequest.
 * Use `create(GetBlobRequestSchema)` to create a new message.
 */
export declare const GetBlobRequestSchema: GenMessage<GetBlobRequest>;

/**
 * @generated from message anduril.blobs.v1.GetBlobResponse
 */
export declare type GetBlobResponse = Message<"anduril.blobs.v1.GetBlobResponse"> & {
  /**
   * contents of the blob, maximum size of each response message contents in stream is capped at 2MB.
   *
   * @generated from field: bytes contents = 1;
   */
  contents: Uint8Array;

  /**
   * metadata will only be present in the first stream message
   *
   * @generated from field: anduril.blobs.v1.BlobMetadata metadata = 2;
   */
  metadata?: BlobMetadata;
};

/**
 * Describes the message anduril.blobs.v1.GetBlobResponse.
 * Use `create(GetBlobResponseSchema)` to create a new message.
 */
export declare const GetBlobResponseSchema: GenMessage<GetBlobResponse>;

/**
 * @generated from message anduril.blobs.v1.HeadBlobRequest
 */
export declare type HeadBlobRequest = Message<"anduril.blobs.v1.HeadBlobRequest"> & {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * @generated from field: string key = 2;
   */
  key: string;
};

/**
 * Describes the message anduril.blobs.v1.HeadBlobRequest.
 * Use `create(HeadBlobRequestSchema)` to create a new message.
 */
export declare const HeadBlobRequestSchema: GenMessage<HeadBlobRequest>;

/**
 * @generated from message anduril.blobs.v1.HeadBlobResponse
 */
export declare type HeadBlobResponse = Message<"anduril.blobs.v1.HeadBlobResponse"> & {
  /**
   * @generated from field: anduril.blobs.v1.BlobMetadata metadata = 1;
   */
  metadata?: BlobMetadata;

  /**
   * URL at which the blob can be fetched
   *
   * @generated from field: string url = 2;
   */
  url: string;
};

/**
 * Describes the message anduril.blobs.v1.HeadBlobResponse.
 * Use `create(HeadBlobResponseSchema)` to create a new message.
 */
export declare const HeadBlobResponseSchema: GenMessage<HeadBlobResponse>;

/**
 * @generated from message anduril.blobs.v1.StreamBlobMetadataRequest
 */
export declare type StreamBlobMetadataRequest = Message<"anduril.blobs.v1.StreamBlobMetadataRequest"> & {
  /**
   * The blob client_id to stream.
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;
};

/**
 * Describes the message anduril.blobs.v1.StreamBlobMetadataRequest.
 * Use `create(StreamBlobMetadataRequestSchema)` to create a new message.
 */
export declare const StreamBlobMetadataRequestSchema: GenMessage<StreamBlobMetadataRequest>;

/**
 * @generated from message anduril.blobs.v1.StreamBlobMetadataResponse
 */
export declare type StreamBlobMetadataResponse = Message<"anduril.blobs.v1.StreamBlobMetadataResponse"> & {
  /**
   * The set of blob announcement metadata returned from a StreamBlobMetadataResponse.
   *
   * @generated from field: repeated anduril.blobs.v1.BlobAnnouncement announcements = 1;
   */
  announcements: BlobAnnouncement[];
};

/**
 * Describes the message anduril.blobs.v1.StreamBlobMetadataResponse.
 * Use `create(StreamBlobMetadataResponseSchema)` to create a new message.
 */
export declare const StreamBlobMetadataResponseSchema: GenMessage<StreamBlobMetadataResponse>;

/**
 * @generated from message anduril.blobs.v1.BlobAnnouncement
 */
export declare type BlobAnnouncement = Message<"anduril.blobs.v1.BlobAnnouncement"> & {
  /**
   * The announced blob's specific client-driven namespace.
   *
   * @generated from field: string client_id = 1;
   */
  clientId: string;

  /**
   * The announced blob's unique key.
   *
   * @generated from field: string key = 2;
   */
  key: string;

  /**
   * The metadata describing the blob's contents.
   *
   * @generated from field: anduril.blobs.v1.BlobMetadata metadata = 3;
   */
  metadata?: BlobMetadata;
};

/**
 * Describes the message anduril.blobs.v1.BlobAnnouncement.
 * Use `create(BlobAnnouncementSchema)` to create a new message.
 */
export declare const BlobAnnouncementSchema: GenMessage<BlobAnnouncement>;

/**
 * A general purpose blob storage service.
 *
 * @generated from service anduril.blobs.v1.BlobsAPI
 */
export declare const BlobsAPI: GenService<{
  /**
   * Creates a new blob. This is a simple form for small (<=2MB) blobs with unary atomic API.
   *
   * @generated from rpc anduril.blobs.v1.BlobsAPI.CreateBlob
   */
  createBlob: {
    methodKind: "unary";
    input: typeof CreateBlobRequestSchema;
    output: typeof CreateBlobResponseSchema;
  },
  /**
   * Creates a new blob. This is for creating any sized blob using a client streaming API.
   *
   * @generated from rpc anduril.blobs.v1.BlobsAPI.CreateBlobChunked
   */
  createBlobChunked: {
    methodKind: "client_streaming";
    input: typeof CreateBlobChunkedRequestSchema;
    output: typeof CreateBlobChunkedResponseSchema;
  },
  /**
   * Gets a blob (streams blob contents).
   *
   * @generated from rpc anduril.blobs.v1.BlobsAPI.GetBlob
   */
  getBlob: {
    methodKind: "server_streaming";
    input: typeof GetBlobRequestSchema;
    output: typeof GetBlobResponseSchema;
  },
  /**
   * Gets the metadata for a blob, but not the contents.
   *
   * @generated from rpc anduril.blobs.v1.BlobsAPI.HeadBlob
   */
  headBlob: {
    methodKind: "unary";
    input: typeof HeadBlobRequestSchema;
    output: typeof HeadBlobResponseSchema;
  },
  /**
   * Stream blob metadata announcements for the provided clientID.
   *
   * @generated from rpc anduril.blobs.v1.BlobsAPI.StreamBlobMetadata
   */
  streamBlobMetadata: {
    methodKind: "server_streaming";
    input: typeof StreamBlobMetadataRequestSchema;
    output: typeof StreamBlobMetadataResponseSchema;
  },
}>;

