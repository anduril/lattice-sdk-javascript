// @generated by protoc-gen-es v2.0.0
// @generated from file anduril/blobs/v1/filter.pub.proto (package anduril.blobs.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file anduril/blobs/v1/filter.pub.proto.
 */
export declare const file_anduril_blobs_v1_filter_pub: GenFile;

/**
 * If match and not_match are both populated, both must evaluate to true for Statement to evaluate to true.
 * If match is not populated, only not_match is used. If not_match is empty, only match is used.
 * If match is not populated and not_match is empty, Statement evaluates to true.
 *
 * @generated from message anduril.blobs.v1.Statement
 */
export declare type Statement = Message<"anduril.blobs.v1.Statement"> & {
  /**
   * Positive match fields.
   *
   * @generated from field: anduril.blobs.v1.FieldMatcher match = 1;
   */
  match?: FieldMatcher;

  /**
   * Negative match fields. All not_match FieldMatchers must evaluate to false for this to evaluate to true.
   *
   * @generated from field: repeated anduril.blobs.v1.FieldMatcher not_match = 2;
   */
  notMatch: FieldMatcher[];
};

/**
 * Describes the message anduril.blobs.v1.Statement.
 * Use `create(StatementSchema)` to create a new message.
 */
export declare const StatementSchema: GenMessage<Statement>;

/**
 * All populated fields must be an exact match (logical AND).
 *
 * @generated from message anduril.blobs.v1.FieldMatcher
 */
export declare type FieldMatcher = Message<"anduril.blobs.v1.FieldMatcher"> & {
  /**
   * @generated from field: string integration_name = 1;
   */
  integrationName: string;

  /**
   * @generated from field: string mime_type = 2;
   */
  mimeType: string;

  /**
   * @generated from field: string data_type = 3;
   */
  dataType: string;
};

/**
 * Describes the message anduril.blobs.v1.FieldMatcher.
 * Use `create(FieldMatcherSchema)` to create a new message.
 */
export declare const FieldMatcherSchema: GenMessage<FieldMatcher>;

