// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/blobs/v1/filter.pub.proto (package anduril.blobs.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * If match and not_match are both populated, both must evaluate to true for Statement to evaluate to true.
 * If match is not populated, only not_match is used. If not_match is empty, only match is used.
 * If match is not populated and not_match is empty, Statement evaluates to true.
 *
 * @generated from message anduril.blobs.v1.Statement
 */
export class Statement extends Message<Statement> {
  /**
   * Positive match fields.
   *
   * @generated from field: anduril.blobs.v1.FieldMatcher match = 1;
   */
  match?: FieldMatcher;

  /**
   * Negative match fields. All not_match FieldMatchers must evaluate to false for this to evaluate to true.
   *
   * @generated from field: repeated anduril.blobs.v1.FieldMatcher not_match = 2;
   */
  notMatch: FieldMatcher[] = [];

  constructor(data?: PartialMessage<Statement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.blobs.v1.Statement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "match", kind: "message", T: FieldMatcher },
    { no: 2, name: "not_match", kind: "message", T: FieldMatcher, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Statement {
    return new Statement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Statement {
    return new Statement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Statement {
    return new Statement().fromJsonString(jsonString, options);
  }

  static equals(a: Statement | PlainMessage<Statement> | undefined, b: Statement | PlainMessage<Statement> | undefined): boolean {
    return proto3.util.equals(Statement, a, b);
  }
}

/**
 * All populated fields must be an exact match (logical AND).
 *
 * @generated from message anduril.blobs.v1.FieldMatcher
 */
export class FieldMatcher extends Message<FieldMatcher> {
  /**
   * @generated from field: string integration_name = 1;
   */
  integrationName = "";

  /**
   * @generated from field: string mime_type = 2;
   */
  mimeType = "";

  /**
   * @generated from field: string data_type = 3;
   */
  dataType = "";

  constructor(data?: PartialMessage<FieldMatcher>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.blobs.v1.FieldMatcher";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FieldMatcher {
    return new FieldMatcher().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FieldMatcher {
    return new FieldMatcher().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FieldMatcher {
    return new FieldMatcher().fromJsonString(jsonString, options);
  }

  static equals(a: FieldMatcher | PlainMessage<FieldMatcher> | undefined, b: FieldMatcher | PlainMessage<FieldMatcher> | undefined): boolean {
    return proto3.util.equals(FieldMatcher, a, b);
  }
}

