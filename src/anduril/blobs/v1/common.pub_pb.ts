// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anduril/blobs/v1/common.pub.proto (package anduril.blobs.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * Metadata about the blob.
 *
 * @generated from message anduril.blobs.v1.BlobMetadata
 */
export class BlobMetadata extends Message<BlobMetadata> {
  /**
   * timestamp of when blob was created
   *
   * @generated from field: google.protobuf.Timestamp created_time = 1;
   */
  createdTime?: Timestamp;

  /**
   * timestamp of when this blob will be retained until.
   *
   * @generated from field: google.protobuf.Timestamp retention_time = 2;
   */
  retentionTime?: Timestamp;

  /**
   * size of the blob contents in bytes
   *
   * @generated from field: uint64 size_bytes = 3;
   */
  sizeBytes = protoInt64.zero;

  /**
   * md5 sum/hash of blob contents
   *
   * @generated from field: bytes md5 = 4;
   */
  md5 = new Uint8Array(0);

  /**
   * MIME type of blob contents
   *
   * @generated from field: string content_type = 5;
   */
  contentType = "";

  /**
   * details regarding the blob's origin - aka source and type
   *
   * @generated from field: anduril.blobs.v1.BlobProvenance provenance = 6;
   */
  provenance?: BlobProvenance;

  constructor(data?: PartialMessage<BlobMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.blobs.v1.BlobMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created_time", kind: "message", T: Timestamp },
    { no: 2, name: "retention_time", kind: "message", T: Timestamp },
    { no: 3, name: "size_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "md5", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "content_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "provenance", kind: "message", T: BlobProvenance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlobMetadata {
    return new BlobMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlobMetadata {
    return new BlobMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlobMetadata {
    return new BlobMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: BlobMetadata | PlainMessage<BlobMetadata> | undefined, b: BlobMetadata | PlainMessage<BlobMetadata> | undefined): boolean {
    return proto3.util.equals(BlobMetadata, a, b);
  }
}

/**
 * @generated from message anduril.blobs.v1.BlobProvenance
 */
export class BlobProvenance extends Message<BlobProvenance> {
  /**
   * registered integration_name producing the Blob.
   *
   * @generated from field: string integration_name = 1;
   */
  integrationName = "";

  /**
   * data type defines what is inside of the Blob. Must be registered.
   *
   * @generated from field: string data_type = 2;
   */
  dataType = "";

  constructor(data?: PartialMessage<BlobProvenance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anduril.blobs.v1.BlobProvenance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlobProvenance {
    return new BlobProvenance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlobProvenance {
    return new BlobProvenance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlobProvenance {
    return new BlobProvenance().fromJsonString(jsonString, options);
  }

  static equals(a: BlobProvenance | PlainMessage<BlobProvenance> | undefined, b: BlobProvenance | PlainMessage<BlobProvenance> | undefined): boolean {
    return proto3.util.equals(BlobProvenance, a, b);
  }
}

